// ===== IMPORTS ================================

// ===== ARGS ===================================
function getScriptArgs() {
    var scriptArgs = {
        hackTarget : args[0],
        desiredRam : args[1],
    };
    
    return scriptArgs;
}

// ===== VARS ===================================
var sVars = {
    availableCashMod : 0.70,
    ramIncreaseFactor : 16,
    setupScriptName : "/master/hacking/deployHackBots-ns2.js",

};

var tests = {
	enabled : false, // Master override for all tests
	disableMain : false, // Disables all non-testing logic in main
	testEnabled_exampleFunction : false,
};

// ===== MAIN ===================================
main();

function main() {
	var sArgs = getScriptArgs();
	
	// - Tests ----------------------------------
	if (tests.enabled)
		executeTests();
	
	// - Early out ------------------------------
	if (tests.disableMain) {
		tprint("WARNING: SCRIPT IS IN TEST ONLY MODE");
		exit();
	}
	
	// - Real Script Logic ----------------------
	print("Starting script...");
    disableLog("ALL");
    
    if(sArgs.desiredRam > getPurchasedServerMaxRam()) {
        tprint("buy_server.script: sArgs.desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.");
        exit();
    }
    
    // loop to buy initial round of servers
    // while: server count < max servers
    print("DEBUG: server count:" + getPurchasedServers().length);
    print("DEBUG: server limit:" + getPurchasedServerLimit());
    while(getPurchasedServers().length < getPurchasedServerLimit())
    {
        print("DEBUG: Buying at " + sArgs.desiredRam +"GB");
        
        // wait to have enough money to buy
        if(getServerMoneyAvailable("home") > getPurchasedServerCost(sArgs.desiredRam))
        {
            // create a server name
            var servName = "pserv-" + sArgs.desiredRam + "GB";
            
            // buy a server
            var hostname = ""
            while (hostname === "") {
                while(getServerMoneyAvailable("home")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))
                {
                    print("DEBUG: Not enough money! Have/Need:" + Math.floor(getServerMoneyAvailable("home")) + "/" + getPurchasedServerCost(sArgs.desiredRam));
                    sleep(60*1000);
                }
                hostname = purchaseServer(servName, sArgs.desiredRam);
            }
            
            // copy and run script
            run(sVars.setupScriptName, 1, hostname, sArgs.hackTarget);
        }
    }
    
    //increase the desireRam count as a one off
    sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;
    
    // loop to upgrade servers
    while (sArgs.desiredRam <= getPurchasedServerMaxRam())
    {
        print("DEBUG: Buying at " + sArgs.desiredRam +"GB");
        
        // call get purchased servers
        var purchasedServers = getPurchasedServers();
        
        for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)
        {
            var oldHostname = purchasedServers[servIndex];
            print("DEBUG: Evaluating: " + oldHostname);
            
            if(getServerRam(oldHostname)[0] < sArgs.desiredRam)
            {
                while(getServerMoneyAvailable("home")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))
                {
                    print("DEBUG: Not enough money! Have/Need:" + Math.floor(getServerMoneyAvailable("home")) + "/" + getPurchasedServerCost(sArgs.desiredRam));
                    sleep(60*1000);
                }
                
                // kill all scripts on the old server
                print("DEBUG: Killing all scripts on: " + oldHostname);
                killall(oldHostname);
                sleep(10000);
                
                // delete the old server
                print("DEBUG: Deleting: " + oldHostname);
                deleteServer(oldHostname);
                
                // buy a server
                var servName = "pserv-" + sArgs.desiredRam + "GB";
                var newHostname = ""
    
                while (newHostname === "") {
                    while(getServerMoneyAvailable("home")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))
                    {
                        print("DEBUG: Not enough money! Have/Need:" + Math.floor(getServerMoneyAvailable("home")) + "/" + getPurchasedServerCost(sArgs.desiredRam));
                        sleep(60*1000);
                    }
                    newHostname = purchaseServer(servName, sArgs.desiredRam);
                    sleep(1000);
                }
                print("DEBUG: New server named: " + newHostname);
                
                // copy and run scripts
                run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);
            }
        }
        
        // increase ram for the next loop
        sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;
        
    }
}

// ===== FUNCTIONS ==============================


// ===== TESTS ==================================
function executeTests() {
    if (tests.testEnabled_exampleFunction)
        test_exampleFunction();
}

function test_exampleFunction() {
	ns.print("==== TEST: test_exampleFunction ====");

}

// ===== REFERENCE ==============================
// Useful functions:
// ==================
// getPurchasedServers - array of servers that you won
// getPurchasedServerLimit - max number of servers you can purchase
// getPurchasedServerCost - cost of a server based on a RAM amount
// getPurchasedServerMaxRam - max ram you can purchse
// purchaseServer(name, RAM) - buys a server with the specified RAM
// getServerRam - returns max ram, used ram
// getServerMoneyAvailable("home")
// ==================