// ===== IMPORTS ================================
import {getRootAccess} from "/master/functions/getRootAccess-ns1.script";
import * as enumLib from "/master/functions/enumLib-ns1.script";
var ePortIndex = enumLib.getEnumPortIndexVersion(1);
var portEmpty = "NULL PORT DATA";

// ===== ARGS ===================================
var sArgs = {
	initialHackTarget : args[0],	// Initial to hack
};

// ===== VARS ===================================
var sVars = {
	moneyThreshModPcnt : 0.75,
	securityThreshModAdd : 5,
};

var tests = {
	enabled : false, // Master override for all tests
	testExampleEnabled : false,
};

// ===== MAIN ===================================
main();

function main() {
	var sArgs = getScriptArgs();

	var hackTarget = sArgs.initialHackTarget;
	
	// - Tests ----------------------------------
	if (tests.enabled)
		executeTests();
	
	// - Early out ------------------------------
	if (tests.disableMain) {
		tprint("WARNING: SCRIPT IS IN TEST ONLY MODE");
		exit();
	}

	// - Real Script Logic ----------------------

	// Setting up some thresholds
	var moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;
	var securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;

	// Get root access if I don't have it
	if (hasRootAccess(hackTarget) === false) {
		getRootAccess(hackTarget);
	}

	while(true) {
		var updateResults = updateHackTarget(hackTarget);
		if(updateResults.updated === true) {
			hackTarget = updateResults.hackTarget;
			moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;
			securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;

			if (hasRootAccess(hackTarget) === false) {
				getRootAccess(hackTarget);
			}
		}

		if (getServerSecurityLevel(hackTarget) > securityThresh) {
			// If the server's security level is above our threshold, weaken it
			weaken(hackTarget);
		} else if (getServerMoneyAvailable(hackTarget) < moneyThresh) {
			// If the server's money is less than our threshold, grow it
			grow(hackTarget);
		} else {
			// Otherwise, hack it
			hack(hackTarget);
		}
	}
}

// ===== FUNCTIONS ==============================
function updateHackTarget(currentTarget) {
	var results = {
		updated: false,
		hackTarget: currentTarget,
	};

	primaryHackTarget = peek(ePortIndex.PRIMARY_HACK_TARGET);

	if(primaryHackTarget !== portEmpty && currentTarget !== primaryHackTarget) {

		results.hackTarget = primaryHackTarget;
	}

	return results;
}

// ===== TESTS ==================================
function executeTests(ns) {
	if (tests.testExampleEnabled)
		testExample(ns);
}

function testExample(ns) {
	ns.print("==== TEST: testExample ====");

}