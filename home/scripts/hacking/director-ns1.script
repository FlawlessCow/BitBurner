// ========= IMPORTS  ========= 
import * as enumLib from "/master/functions/enumLib-ns1.script";
ePortIndex = enumLib.getEnumPortIndexVersion(1);

// ========== ARGS ============ 
var sArgs = {

};

// ========== VARS ============
var sVars = {

};

// ========= FUNCTIONS ========= 
function getTargetInfo(target) {
	print("Getting info for " + target + "...");
	var targetInfo = {
		name : target,
		moneyAvailable : getServerMoneyAvailable(target),
		maxMoney : getServerMaxMoney(target),
		growth : getServerGrowth(target),
		securityLevel : getServerSecurityLevel(target),
		baseSecurityLevel : getServerBaseSecurityLevel(target),
		minSecurityLevel : getServerMinSecurityLevel(target),
		requiredHackingLevel : getServerRequiredHackingLevel(target),
		numPortsRequired : getServerNumPortsRequired(target),
		ram : getServerRam(target)[0],
	};
	
	return targetInfo;
}

// ========== LOGIC ==========
disableLog("ALL");

// Enabling certain sections of the script/testing
var mainScriptEnabled = false;
var portPeekObjectTestEnabled = false;
var portReadObjectTestEnabled = false;
var statDumpTestEnabled = true;
var sortTestEnabled = false;

var targetList = [
	getTargetInfo("foodnstuff"),
	getTargetInfo("the-hub"),
	getTargetInfo("joesguns"),
	getTargetInfo("4sigma"),
];

if(mainScriptEnabled) {
	var hackTarget = targetList[0].name;
	print("Setting a default hackTarget: " + hackTarget);
	write(ePortIndex.PRIMARY_HACKING_TARGET, hackTarget);
	
	print("Sorting by requiredHackingLevel, low -> high");
	targetList.sort(function (a, b) {
		return a.requiredHackingLevel - b.requiredHackingLevel;
	});
	
	hackTarget = targetList[0].name;
	print("Setting hack target to the lowest requiredHackingLevel, which is: " + hackTarget);
	write(ePortIndex.PRIMARY_HACKING_TARGET, hackTarget);
	
	
	print("Sorting by maxMoney...");
	targetList.sort(function (a, b) {
		return b.maxMoney - a.maxMoney;
	});
}

// ========== TESTS ==========
if(portPeekObjectTestEnabled) {
    print("running portPeekObjectTest");

    clear(ePortIndex.PRIMARY_HACKING_TARGET);
	
	write(ePortIndex.PRIMARY_HACKING_TARGET, targetList);
	
	print("Peeking at port contents: " + peek(ePortIndex.PRIMARY_HACKING_TARGET));
	
	print("Peeking at port contents.name: " + peek(ePortIndex.PRIMARY_HACKING_TARGET).name);
	
	print("Peeking again but storing...");
	peekTargetListA = peek(ePortIndex.PRIMARY_HACKING_TARGET);
	
	print("targetList Length: " + targetList.length);
	print("peekTargetListA Length: " + peekTargetListA.length);

	for (i = 0; i < peekTargetListA.length; i++) {
		print("name: " + peekTargetListA[i].name);
		print("moneyAvailable: " + peekTargetListA[i].moneyAvailable);
		print("maxMoney: " + peekTargetListA[i].maxMoney);
		print("growth: " + peekTargetListA[i].growth);
		print("securityLevel: " + peekTargetListA[i].securityLevel);
		print("baseSecurityLevel: " + peekTargetListA[i].baseSecurityLevel);
		print("minSecurityLevel: " + peekTargetListA[i].minSecurityLevel);
		print("requiredHackingLevel: " + peekTargetListA[i].requiredHackingLevel);
		print("numPortsRequired: " + peekTargetListA[i].numPortsRequired);
		print("ram: " + peekTargetListA[i].ram);
	}
}

if(portReadObjectTestEnabled) {
	//10:30pm notes: Peek is working, but read is not. Weird. Not sure what's up. Sigh.

	print("running portReadObjectTest");
	write(ePortIndex.PRIMARY_HACKING_TARGET, targetList);
	print(peek(ePortIndex.PRIMARY_HACKING_TARGET));
	readTargetList = read(ePortIndex.PRIMARY_HACKING_TARGET);
	print("targetList Length: " + targetList.length);
	print("readTargetList Length: " + readTargetList.length);

	for (i = 0; i < readTargetList.length; i++) {
		print("name: " + readTargetList[i].name);
		print("moneyAvailable: " + readTargetList[i].moneyAvailable);
		print("maxMoney: " + readTargetList[i].maxMoney);
		print("growth: " + readTargetList[i].growth);
		print("securityLevel: " + readTargetList[i].securityLevel);
		print("baseSecurityLevel: " + readTargetList[i].baseSecurityLevel);
		print("minSecurityLevel: " + readTargetList[i].minSecurityLevel);
		print("requiredHackingLevel: " + readTargetList[i].requiredHackingLevel);
		print("numPortsRequired: " + readTargetList[i].numPortsRequired);
		print("ram: " + readTargetList[i].ram);
	}
}

if(sortTestEnabled) {
	for (i = 0; i < targetList.length; i++) {
		print("name: " + targetList[i].name);
		print("maxMoney: " + targetList[i].maxMoney);
		print("requiredHackingLevel: " + targetList[i].requiredHackingLevel);
		print("numPortsRequired: " + targetList[i].numPortsRequired);
	}
	
	print("sorting...");
	targetList.sort(function (a, b) {
		return b.maxMoney - a.maxMoney;
	});
	
	for (i = 0; i < targetList.length; i++) {
		print("name: " + targetList[i].name);
		print("maxMoney: " + targetList[i].maxMoney);
		print("requiredHackingLevel: " + targetList[i].requiredHackingLevel);
		print("numPortsRequired: " + targetList[i].numPortsRequired);
	}
}

if(statDumpTestEnabled) {
	for (i = 0; i < targetList.length; i++) {
		print("name: " + targetList[i].name);
		print("moneyAvailable: " + targetList[i].moneyAvailable);
		print("maxMoney: " + targetList[i].maxMoney);
		print("growth: " + targetList[i].growth);
		print("securityLevel: " + targetList[i].securityLevel);
		print("baseSecurityLevel: " + targetList[i].baseSecurityLevel);
		print("minSecurityLevel: " + targetList[i].minSecurityLevel);
		print("requiredHackingLevel: " + targetList[i].requiredHackingLevel);
		print("numPortsRequired: " + targetList[i].numPortsRequired);
		print("ram: " + targetList[i].ram);
	}
}

/* Reference
write()
tryWrite()
read()
peek()
clear()
	*/