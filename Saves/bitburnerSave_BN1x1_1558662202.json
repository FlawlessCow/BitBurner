{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":354,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":2,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.6995555903944564,\"hacking_speed_mult\":1.5780595093707699,\"hacking_money_mult\":2.0145216748645884,\"hacking_grow_mult\":1.4014063825144967,\"hacking_exp\":100286.90232105082,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":2.1018439831580698,\"strength_mult\":2.108836324407814,\"defense_mult\":2.9523708541709395,\"dexterity_mult\":1.9423492461650924,\"agility_mult\":1.4714767016402215,\"charisma_mult\":1.8498564249191358,\"hacking_exp_mult\":4.195636234153781,\"strength_exp_mult\":1.7727790738808389,\"defense_exp_mult\":1.7727790738808389,\"dexterity_exp_mult\":1.7727790738808389,\"agility_exp_mult\":1.7727790738808389,\"charisma_exp_mult\":1.7727790738808389,\"company_rep_mult\":2.3400683775227065,\"faction_rep_mult\":1.772779073880838,\"money\":\"2251445.0455222082513\",\"homeComputer\":\"60.8.2.2\",\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"60.8.2.2\",\"purchasedServers\":[\"28.0.4.9\",\"45.6.1.9\",\"84.3.3.4\",\"46.6.8.1\",\"78.3.6.2\",\"30.4.6.1\",\"34.8.3.3\",\"23.2.3.2\",\"97.2.5.2\",\"19.4.8.4\",\"58.1.4.5\",\"3.9.0.7\",\"89.5.5.6\",\"92.8.3.8\",\"0.7.0.0\",\"87.5.4.3\",\"33.9.5.3\",\"23.5.8.9\",\"8.2.2.9\",\"59.1.5.8\",\"69.7.2.8\",\"39.6.0.2\",\"83.8.7.2\",\"58.5.5.3\",\"93.3.9.1\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":107,\"moneyGainRatePerSecond\":894.5175452722035,\"onlineTimeSeconds\":4955.999999997974,\"ram\":4,\"totalMoneyGenerated\":2360934.4190708334,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":3,\"level\":107,\"moneyGainRatePerSecond\":894.5175452722035,\"onlineTimeSeconds\":4946.799999997975,\"ram\":4,\"totalMoneyGenerated\":2350896.4801318333,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":107,\"moneyGainRatePerSecond\":782.7028521131781,\"onlineTimeSeconds\":4941.599999997975,\"ram\":4,\"totalMoneyGenerated\":2344079.3198005147,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":107,\"moneyGainRatePerSecond\":782.7028521131781,\"onlineTimeSeconds\":4936.399999997975,\"ram\":4,\"totalMoneyGenerated\":2339670.4130644286,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":4929.399999997975,\"ram\":4,\"totalMoneyGenerated\":2315897.0909468294,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":4896.999999997977,\"ram\":4,\"totalMoneyGenerated\":2310522.421897328,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":4798.199999997983,\"ram\":4,\"totalMoneyGenerated\":2290046.199575744,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":4673.99999999799,\"ram\":4,\"totalMoneyGenerated\":2258684.9151892676,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":4519.999999997994,\"ram\":4,\"totalMoneyGenerated\":2212685.801080854,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":3747.799999998717,\"ram\":4,\"totalMoneyGenerated\":1938175.0317908411,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":2979.7999999995895,\"ram\":4,\"totalMoneyGenerated\":1621123.8474570531,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":1319.6000000001336,\"ram\":4,\"totalMoneyGenerated\":779045.6400614412,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":107,\"moneyGainRatePerSecond\":670.8881589541527,\"onlineTimeSeconds\":502.3999999999874,\"ram\":4,\"totalMoneyGenerated\":335702.1744280285,\"name\":\"hacknet-node-12\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[\"Netburners\"],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Neurotrainer II\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.4014063825144967,\"crime_success_mult\":1.4014063825144967,\"isWorking\":false,\"workType\":\"Working on Create a Program\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":1800000,\"work_money_mult\":1.5415470207659463,\"hacknet_node_money_mult\":3.534478278549922,\"hacknet_node_purchase_cost_mult\":0.5308959576767479,\"hacknet_node_ram_cost_mult\":0.6939816440218927,\"hacknet_node_core_cost_mult\":0.6939816440218927,\"hacknet_node_level_cost_mult\":0.5898843974186088,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":0,\"corporation\":0,\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1558662201756,\"totalPlaytime\":3442857000,\"playtimeSinceLastAug\":4970400,\"playtimeSinceLastBitnode\":377115800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknetnode\":25457463.75442774,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":25457463.75442774,\"work\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1009868924035.5034,\"hacknetnode\":69061990924.37717,\"hospitalization\":0,\"infiltration\":0,\"stock\":-145512.93206036376,\"total\":1078930925792.9391,\"work\":156317.6769164874}},\"scriptProdSinceLastAug\":0,\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0,\"factionWorkType\":\"Faction Hacking Work\"}}","AllServersSave":"{\"60.8.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"60.8.2.2\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe-44.32%-INC\",\"FTPCrack.exe\"],\"ramUsed\":20.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/master/character/hacknet/node_autobuy-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.054,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4849.809999997974,\"ramUsage\":9.7,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\",8],\"dataMap\":{},\"filename\":\"/master/buy_server/buy_server-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.056,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4849.409999997974,\"ramUsage\":10.4,\"server\":\"60.8.2.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/scripts/hacking/early/early_hack_template.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"harakiri-sushi\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/scripts/hacking/early/early_hack_harakiri-sushi.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 8GB.\\nvar ram = 8;\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n    // Check if we have enough money to purchase a server\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n        // If we have enough money, then:\\n        //  1. Purchase the server\\n        //  2. Copy our hacking script onto the newly-purchased server\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\n        //  4. Increment our iterator to indicate that we've bought a new server\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n        scp(\\\"early_hack_harakiri-sushi.script\\\", hostname);\\n        exec(\\\"early_hack_harakiri-sushi.script\\\", hostname, 3);\\n        ++i;\\n    }\\n}\",\"filename\":\"/scripts/purchase_server_8gb.script\",\"module\":\"\",\"ramUsage\":6.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nhack(serv);\",\"filename\":\"/scripts/hacking/helpers/hack_target.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// How much RAM each purchased server will have. In this case, it'll\\n// be 8GB.\\nvar ram = 16;\\n\\n// Iterator we'll use for our loop\\nvar i = 0;\\n\\n// Continuously try to purchase servers until we've reached the maximum\\n// amount of servers\\nwhile (i < getPurchasedServerLimit()) {\\n    // Check if we have enough money to purchase a server\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\n        // If we have enough money, then:\\n        //  1. Purchase the server\\n        //  2. Copy our hacking script onto the newly-purchased server\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\n        //  4. Increment our iterator to indicate that we've bought a new server\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\n        scp(\\\"early_hack_harakiri-sushi.script\\\", hostname);\\n        exec(\\\"early_hack_harakiri-sushi.script\\\", hostname, 3);\\n        ++i;\\n    }\\n}\",\"filename\":\"/scripts/purchase_server_16gb.script\",\"module\":\"\",\"ramUsage\":6.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"testValue = \\\"foodnstuff\\\";\\ntprint(testValue);\\n\\ntprint(\\\"Grow: \\\" + getGrowTime(testValue));\\ntprint(\\\"Weak: \\\" + getWeakenTime(testValue));\\ntprint(\\\"Hack: \\\" + getHackTime(testValue));\\n\\ntestValue = \\\"joesguns\\\";\\ntprint(testValue);\\n\\ntprint(\\\"Grow: \\\" + getGrowTime(testValue));\\ntprint(\\\"Weak: \\\" + getWeakenTime(testValue));\\ntprint(\\\"Hack: \\\" + getHackTime(testValue));\\n\\ntestValue = \\\"phantasy\\\";\\ntprint(testValue);\\n\\ntprint(\\\"Grow: \\\" + getGrowTime(testValue));\\ntprint(\\\"Weak: \\\" + getWeakenTime(testValue));\\ntprint(\\\"Hack: \\\" + getHackTime(testValue));\\n\\ntestValue = \\\"the-hub\\\";\\ntprint(testValue);\\n\\ntprint(\\\"Grow: \\\" + getGrowTime(testValue));\\ntprint(\\\"Weak: \\\" + getWeakenTime(testValue));\\ntprint(\\\"Hack: \\\" + getHackTime(testValue));\",\"filename\":\"/temp/scratch.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\ngrow(serv);\",\"filename\":\"/scripts/hacking/helpers/grow_target.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nweaken(serv);\",\"filename\":\"/scripts/hacking/helpers/weaken_target.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/scripts/hacking/helpers/hack_target.script\\\";\\nvar growScript = \\\"/scripts/hacking/helpers/grow_target.script\\\";\\nvar weakenScript = \\\"/scripts/hacking/helpers/weaken_target.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/scripts/hacking/advanced/run.script\",\"module\":\"\",\"ramUsage\":4.9,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO\\n// add validation that desiredRam is a power of 2\\n// protect against scripts failing to install/launch on the new server\\n// write out info to a log file?\\n\\n// args\\nvar hackTarget = args[0];\\nvar desiredRam = args[1];\\nvar availableCashMod = 0.70;\\nvar ramIncreaseFactor = 16;\\nvar setupScriptName = \\\"/scripts/hacking/basic/install_and_run.script\\\";\\n\\nif(desiredRam > getPurchasedServerMaxRam()) {\\n\\ttprint(\\\"buy_server.script: desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.\\\");\\n\\texit();\\n}\\n\\n// loop to buy initial round of servers\\n// while: server count < max servers\\nprint(\\\"DEBUG: server count:\\\" + getPurchasedServers().length);\\nprint(\\\"DEBUG: server limit:\\\" + getPurchasedServerLimit());\\nwhile(getPurchasedServers().length < getPurchasedServerLimit())\\n{\\n    print(\\\"DEBUG: Buying at \\\" + desiredRam +\\\"GB\\\");\\n    \\n    // wait to have enough money to buy\\n    if(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(desiredRam))\\n    {\\n        // create a server name\\n        var servName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n        \\n        // buy a server\\n        var hostname = purchaseServer(servName, desiredRam);\\n        \\n        // copy and run script\\n        run(setupScriptName, 1, hostname, hackTarget);\\n    }\\n}\\n\\n//increase the desireRam count as a one off\\ndesiredRam = desiredRam*ramIncreaseFactor;\\n\\n// loop to upgrade servers\\nwhile (desiredRam <= getPurchasedServerMaxRam())\\n{\\n    print(\\\"DEBUG: Buying at \\\" + desiredRam +\\\"GB\\\");\\n    \\n    // call get purchased servers\\n    var purchasedServers = getPurchasedServers();\\n    \\n    for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)\\n    {\\n        var oldHostname = purchasedServers[servIndex];\\n        print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n        \\n        if(getServerRam(oldHostname)[0] < desiredRam)\\n        {\\n            while(getServerMoneyAvailable(\\\"home\\\")*availableCashMod < getPurchasedServerCost(desiredRam))\\n            {\\n                print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(desiredRam));\\n                sleep(60*1000);\\n            }\\n            \\n            // kill all scripts on the old server\\n            print(\\\"DEBUG: Killing all scripts on: \\\" + oldHostname);\\n            killall(oldHostname);\\n            sleep(10000);\\n            \\n            // delete the old server\\n            print(\\\"DEBUG: Deleting: \\\" + oldHostname);\\n            deleteServer(oldHostname);\\n            \\n            // buy a server\\n            var servName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n            var newHostname = purchaseServer(servName, desiredRam);\\n            print(\\\"DEBUG: New server named: \\\" + newHostname);\\n            \\n            // copy and run scripts\\n            run(setupScriptName, 1, newHostname, hackTarget);\\n        }\\n    }\\n    \\n    // increase ram for the next loop\\n    desiredRam = desiredRam*ramIncreaseFactor;\\n    \\n}\\n\\n\\n// Useful functions:\\n// ==================\\n// getPurchasedServers - array of servers that you won\\n// getPurchasedServerLimit - max number of servers you can purchase\\n// getPurchasedServerCost - cost of a server based on a RAM amount\\n// getPurchasedServerMaxRam - max ram you can purchse\\n// purchaseServer(name, RAM) - buys a server with the specified RAM\\n// getServerRam - returns max ram, used ram\\n// getServerMoneyAvailable(\\\"home\\\")\\n// ==================\",\"filename\":\"/scripts/buy_server/buy_server.script\",\"module\":\"\",\"ramUsage\":10.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args\\nvar destServ = args[0];\\nvar hackTargetServ = args[1];\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/scripts/functions/getRootAccess.script\\\",\\n    \\\"/scripts/hacking_2_0/run.script\\\",\\n    \\\"/scripts/hacking_2_0/helpers/grow_target.script\\\",\\n    \\\"/scripts/hacking_2_0/helpers/hack_target.script\\\",\\n    \\\"/scripts/hacking_2_0/helpers/weaken_target.script\\\"\\n    ];\\n\\nvar primaryScript = \\\"/scripts/hacking_2_0/run.script\\\";\\n\\nvar sourceServer = \\\"home\\\";\\n\\nscp(scripts, sourceServer, destServ);\\nexec(primaryScript, destServ, 1, hackTargetServ);\",\"filename\":\"/scripts/hacking/advanced/install_and_run.script\",\"module\":\"\",\"ramUsage\":3.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n    // If we have the various port oepning program, use them to open ports\\n    // on the target server\\n    if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        brutessh(target);\\n    }\\n    if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ftpcrack(target);\\n    }\\n    if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        relaysmtp(target);\\n    }\\n    if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        httpworm(target);\\n    }\\n    if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        sqlinject(target);\\n    }\\n    \\n    // Get root access to target server\\n    nuke(target);\\n}\",\"filename\":\"/scripts/functions/getRootAccess.script\",\"module\":\"\",\"ramUsage\":2,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"clear(1);\\n\\ni=0;\\nvar success = true;\\n\\nwhile(success)\\n{\\n    success = tryWrite(1, i);\\n    print(\\\"Tried to write \\\" + i + \\\" to port 1. Success: \\\" + success);\\n    i++;\\n}\\n\\nclear(1);\",\"filename\":\"/temp/port_write_script_test.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"joesguns\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/scripts/hacking/early/early_hack_joesguns.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/scripts/hacking_2_0/helpers/hack_target.script\\\";\\nvar growScript = \\\"/scripts/hacking_2_0/helpers/grow_target.script\\\";\\nvar weakenScript = \\\"/scripts/hacking_2_0/helpers/weaken_target.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/temp/copy_test/scripts/hacking_2_0/run.script\",\"module\":\"\",\"ramUsage\":4.9,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"filename\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"module\":\"\",\"ramUsage\":0,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case\\nvar target = args[0];\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/scripts/hacking/basic/archive/v01/run.script\",\"module\":\"\",\"ramUsage\":2.8,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  =========\\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n};\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/scripts/functions/getRootAccess.script\\\",\\n    \\\"/scripts/hacking/basic/run.script\\\",\\n];\\n\\n// script to run\\nvar primaryScript = \\\"/scripts/hacking/basic/run.script\\\";\\n\\n// source server\\nvar sourceServer = \\\"home\\\";\\n\\n// ========= FUNCTIONS ========= \\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ========== LOGIC ==========\\n// Copy the scripts over\\nscp(scripts, sourceServer, sArgs.destServ);\\n\\n// See how many threads we can run on the target server\\nvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, primaryScript);\\nvar threadCount = 1;\\n\\nif(maxThreadCapactity < sVars.threadLimit) {\\n\\tthreadCount = maxThreadCapactity;\\n}\\nelse if(maxThreadCapactity >= sVars.threadLimit){\\n\\tthreadCount = sVars.threadLimit;\\n}\\n\\n// kill all scripts on the server\\n//killall(sArgs.destServ);\\n//sleep(10000);\\n\\n// Run the script on the tartget server\\nexec(primaryScript, sArgs.destServ, threadCount, sArgs.hackTargetServ);\",\"filename\":\"/scripts/hacking/basic/archive/v01/install_and_run.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/scripts/pserv/killall_and_deploy.script\",\"module\":\"\",\"ramUsage\":5.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Array of all servers that don't need any ports opened\\n// to gain root access. These have 16 GB of RAM\\nvar servers0Port = [\\\"foodnstuff\\\",\\n                    \\\"sigma-cosmetics\\\",\\n                    \\\"joesguns\\\",\\n                    \\\"nectar-net\\\",\\n                    \\\"hong-fang-tea\\\",\\n                    \\\"harakiri-sushi\\\"];\\n\\n// Array of all servers that only need 1 port opened\\n// to gain root access. These have 32 GB of RAM\\nvar servers1Port = [\\\"neo-net\\\",\\n                    \\\"zer0\\\",\\n                    \\\"max-hardware\\\",\\n                    \\\"iron-gym\\\"];\\n\\ndisableLog(\\\"ALL\\\");\\n\\nprint(\\\"Server\\\\tReqHack\\\\tMaxMoneyt\\\\tGrowth\\\\tMinSec\\\\tHackAnalyzePercent\\\" );\\n\\nfor (var i = 0; i < servers0Port.length; ++i) {\\n    var serv = servers0Port[i];\\n\\n    var servReqHack = getServerRequiredHackingLevel(serv);\\n    var servMaxMoney = getServerMaxMoney(serv);\\n    var servGrowth = getServerGrowth(serv);\\n    var servMinSec = getServerMinSecurityLevel(serv);\\n    var servHackAnalyzePercent = hackAnalyzePercent(serv);\\n    var tenPercentHackAmount = servMaxMoney/10;\\n    var servTenPercentHack = hackAnalyzeThreads(serv, servMaxMoney/10);\\n    print(serv + \\\"\\\\t\\\" + servReqHack + \\\"\\\\t\\\" + servMaxMoney + \\\"\\\\t\\\" + servGrowth + \\\"\\\\t\\\" + servMinSec + \\\"\\\\t\\\" + servHackAnalyzePercent + \\\"\\\\t\\\" + tenPercentHackAmount + \\\"\\\\t\\\" + servTenPercentHack);\\n}\\n\\nfor (var i = 0; i < servers1Port.length; ++i) {\\n    var serv = servers1Port[i];\\n\\n    var servReqHack = getServerRequiredHackingLevel(serv);\\n    var servMaxMoney = getServerMaxMoney(serv);\\n    var servGrowth = getServerGrowth(serv);\\n    var servMinSec = getServerMinSecurityLevel(serv);\\n    var servHackAnalyzePercent = hackAnalyzePercent(serv);\\n    var tenPercentHackAmount = servMaxMoney/10;\\n    var servTenPercentHack = hackAnalyzeThreads(serv, servTenPercentHack);\\n    print(serv + \\\"\\\\t\\\" + servReqHack + \\\"\\\\t\\\" + servMaxMoney + \\\"\\\\t\\\" + servGrowth + \\\"\\\\t\\\" + servMinSec + \\\"\\\\t\\\" + servHackAnalyzePercent + \\\"\\\\t\\\" + tenPercentHackAmount + \\\"\\\\t\\\" + servTenPercentHack);\\n}\\n\\nenableLog(\\\"ALL\\\");\\n\\nprint(getPurchasedServerCost(16));\\n\\n/*\\nserver_info.script []:\\n\\nServer          ReqHack  MaxMoney Growth MinSec\\nfoodnstuff            1  50000000      5      3\\nsigma-cosmetics       5  57500000     10      3\\njoesguns             10  62500000     20      5\\nnectar-net           20  68750000     25      7\\nhong-fang-tea        30  75000000     20      5\\nharakiri-sushi       40 100000000     40      5\\nneo-net              50 125000000     25      8\\nzer0                 75 187500000     40      8\\nmax-hardware         80 250000000     30      5\\niron-gym            100 500000000     20     10\\nScript finished running\\n*/\",\"filename\":\"/scripts/one_offs/server_info.script\",\"module\":\"\",\"ramUsage\":4.25,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\n\\n// ========== VARS ============\\nvar sVars = {\\n    // Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\n    servers0Port: [\\\"foodnstuff\\\",\\n        \\\"sigma-cosmetics\\\",\\n        \\\"joesguns\\\",\\n        \\\"nectar-net\\\",\\n        \\\"hong-fang-tea\\\",\\n        \\\"harakiri-sushi\\\"\\n    ],\\n\\n    // Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\n    servers1Port: [\\\"neo-net\\\",\\n        \\\"zer0\\\",\\n        \\\"max-hardware\\\",\\n        \\\"iron-gym\\\"\\n    ],\\n\\n    // Script to use for our basic hacks\\n    basicHackingScript: \\\"/scripts/hacking/basic/install_and_run.script\\\",\\n    basicHackingScriptTarget: \\\"joesguns\\\",\\n\\n    // PSERV settings\\n    pservStartingRamAmount: 8,\\n    pservHackTarget: \\\"joesguns\\\",\\n\\n    // home hacking  settings\\n    homeHackTarget: \\\"joesguns\\\",\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction setup0PortBasicHacks(serverList, hackingScript, hackingScriptTarget) {\\n    // Copy our scripts onto each server that requires 0 ports\\n    // to gain root access. Then use nuke() to gain admin access and\\n    // run the scripts.\\n    for (var i = 0; i < serverList.length; ++i) {\\n        var serv = serverList[i];\\n\\n        nuke(serv);\\n\\n        var waitingToInstall = true;\\n        while(waitingToInstall) {\\n            homeRam = getServerRam(getHostname());\\n            homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n            if (homeFreeRam >= getScriptRam(hackingScript)) {\\n                run(hackingScript, 1, serv, hackingScriptTarget);\\n                waitingToInstall = false;\\n            }\\n        }\\n    }\\n}\\n\\nfunction setup1PortBasicHacks(serverList, hackingScript, hackingScriptTarget) {\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!fileExists(\\\"BruteSSH.exe\\\")) {\\n        sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 1 port\\n    // to gain root access. Then use brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    for (var i = 0; i < serverList.length; ++i) {\\n        var serv = serverList[i];\\n\\n        brutessh(serv);\\n        nuke(serv);\\n\\n        var waitingToInstall = true;\\n        while(waitingToInstall) {\\n            homeRam = getServerRam(getHostname());\\n            homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n            if (homeFreeRam >= getScriptRam(hackingScript)) {\\n                run(hackingScript, 1, serv, hackingScriptTarget);\\n                waitingToInstall = false;\\n            }\\n        }\\n    }\\n}\\n\\n// ========== LOGIC ==========\\nrun(\\\"/scripts/character/hacknet/server_autobuy/run.js\\\");\\nrun(\\\"/scripts/character/hacknet/hashManager/run.js\\\");\\nrun(\\\"/scripts/buy_server/buy_server.script\\\", 1, sVars.pservHackTarget, sVars.pservStartingRamAmount);\\n// run(\\\"/scripts/hacking/advanced/run.script\\\", 1, sVars.homeHackTarget);\\nsetup0PortBasicHacks(sVars.servers0Port, sVars.basicHackingScript, sVars.basicHackingScriptTarget);\\nsetup1PortBasicHacks(sVars.servers1Port, sVars.basicHackingScript, sVars.basicHackingScriptTarget);\",\"filename\":\"/scripts/restart_run/run.script\",\"module\":\"\",\"ramUsage\":3.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Name of script to be run\\nvar hackingScript = \\\"early_hack_harakiri-sushi.script\\\"\\n\\n// Array of all servers that don't need any ports opened\\n// to gain root access. These have 16 GB of RAM\\nvar servers0Port = [\\\"foodnstuff\\\",\\n                    \\\"sigma-cosmetics\\\",\\n                    \\\"joesguns\\\",\\n                    \\\"nectar-net\\\",\\n                    \\\"hong-fang-tea\\\",\\n                    \\\"harakiri-sushi\\\"];\\n\\n// Array of all servers that only need 1 port opened\\n// to gain root access. These have 32 GB of RAM\\nvar servers1Port = [\\\"neo-net\\\",\\n                    \\\"zer0\\\",\\n                    \\\"max-hardware\\\",\\n                    \\\"iron-gym\\\"];\\n\\n// Copy our scripts onto each server that requires 0 ports\\n// to gain root access. Then use nuke() to gain admin access and\\n// run the scripts.\\nfor (var i = 0; i < servers0Port.length; ++i) {\\n    var serv = servers0Port[i];\\n\\n    scp(hackingScript, serv);\\n    nuke(serv);\\n    exec(hackingScript, serv, 6);\\n}\\n\\n// Wait until we acquire the \\\"BruteSSH.exe\\\" program\\nwhile (!fileExists(\\\"BruteSSH.exe\\\")) {\\n    sleep(60000);\\n}\\n\\n// Copy our scripts onto each server that requires 1 port\\n// to gain root access. Then use brutessh() and nuke()\\n// to gain admin access and run the scripts.\\nfor (var i = 0; i < servers1Port.length; ++i) {\\n    var serv = servers1Port[i];\\n\\n    scp(hackingScript, serv);\\n    brutessh(serv);\\n    nuke(serv);\\n    exec(hackingScript, serv, 12);\\n}\",\"filename\":\"/scripts/restart_run/archive/v01/run.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n    nodeCountLimit: 24,\\n    nodeLevelLimit: 200,\\n    nodeRamLimit: 64,\\n    nodeCoresLimit: 16,\\n    moneySpendLimitPercent: 0.80,\\n    playerMultipliers: getHacknetMultipliers(),\\n};\\n\\nvar buy = {\\n    nothing: -1,\\n    node: 0,\\n    level: 1,\\n    ram: 2,\\n    cores: 3,\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction getMyMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats() {\\n    print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesStats = hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats() {\\n\\tprint(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesStats = hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats() {\\n    print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesStats = hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats() {\\n\\tprint(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n\\t\\tprint(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        thisNodesStats = hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(maxNodes, maxLevel, maxRam, maxCores) {\\n    print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = hacknet.getNodeStats(baseNodeIndex);\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats();\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = hacknet.getPurchaseNodeCost();\\n\\t\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tprint(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tprint(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, sVars.playerMultipliers);\\n\\t\\tprint(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tprint(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction\\n\\t\\tprint(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tprint(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tprint(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tprint(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, sVars.playerMultipliers);\\n\\t\\tprint(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, sVars.playerMultipliers);\\n\\t\\tprint(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, sVars.playerMultipliers);\\n\\t\\tprint(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tprint(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction\\n\\t\\tprint(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a level\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tprint(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tprint(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, sVars.playerMultipliers);\\n        print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1)\\n        print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tprint(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying RAM\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tprint(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, sVars.playerMultipliers);\\n        print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1)\\n        print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tprint(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a core\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tprint(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tprint(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, sVars.playerMultipliers);\\n        print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n        var nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1)\\n        print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tprint(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tprint(\\\"=== Ready to make a decision ===\\\");\\n\\tprint(\\\"Getting the minimum of: \\\");\\n\\tprint(\\\"--- bareNodeRecoupTime:\\\" + bareNodeRecoupTime);\\n\\tprint(\\\"--- upgradedNodeRecoupTime:\\\" + upgradedNodeRecoupTime);\\n\\tprint(\\\"--- levelRecoupTime:\\\" + levelRecoupTime);\\n\\tprint(\\\"--- ramRecoupTime:\\\" + ramRecoupTime);\\n\\tprint(\\\"--- coresRecoupTime:\\\" + coresRecoupTime);\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime)\\n\\t{\\n        print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime)\\n\\t{\\n        print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime)\\n    {\\n        print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime)\\n    {\\n        print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime)\\n    {\\n        print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction upgradeAllHacknetNodeLevel() {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredLevel(i, desiredLevel);\\n    }\\n}\\n\\nfunction upgradeAllHacknetNodeRam() {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredRam(i, desiredRam);\\n    }\\n}\\n\\nfunction upgradeAllHacknetNodeCores() {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredCores(i, desiredCores);\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredLevel(nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a level\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredRam(nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a RAM\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredCores(nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a core\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nfunction purchaseAndUpgradeNode() {\\n    // buy a new node and get it's stats\\n    newNodeIndex = hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.Ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    upgradeNodeToDesiredLevel(newNodeIndex, desiredLevel);\\n    upgradeNodeToDesiredRam(newNodeIndex, desiredRam);\\n    upgradeNodeToDesiredCores(newNodeIndex, desiredCores);\\n}\\n\\nfunction upgradeAllToMatchBaseNode() {\\n    baseNodeStats = hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.Ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < hacknet.numNodes(); nodeIndex++) {\\n\\t\\tprint(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tupgradeNodeToDesiredLevel(nodeIndex, desiredLevel);\\n\\t\\tupgradeNodeToDesiredRam(nodeIndex, desiredRam);\\n\\t\\tupgradeNodeToDesiredCores(nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ========== LOGIC ==========\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\ndisableLog(\\\"sleep\\\");\\n\\nvar done = false;\\nvar thingToBuy = buy.nothing;\\n\\n// I bet this script will break horribly if I don't have at least one node to start off with\\nif (hacknet.numNodes() === 0) {\\n    print(\\\"Buying the first node\\\");\\n    var nodeCost = hacknet.getPurchaseNodeCost();\\n    while(nodeCost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n        print(\\\"Waiting for more money to buy a node!\\\");\\n        sleep(5000);\\n    }\\n    hacknet.purchaseNode();\\n}\\n\\nwhile (!done) {\\n    // check to see what to buy\\n    thingToBuy = evaluateHacknetPurchaseOptions(sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit);\\n\\n    // buy the right thing\\n    switch(thingToBuy){\\n        case buy.node:\\n            var nodeCost = hacknet.getPurchaseNodeCost();\\n            while(nodeCost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n                print(\\\"Waiting for more money to buy a node!\\\");\\n                sleep(5000);\\n            }\\n            print(\\\"Buying a node\\\");\\n            purchaseAndUpgradeNode();\\n            break;\\n        case buy.level:\\n            print(\\\"Upgrading LEVELS of all nodes\\\");\\n            upgradeAllHacknetNodeLevel();\\n            break;\\n        case buy.ram:\\n            print(\\\"Upgrading RAM of all nodes\\\");\\n            upgradeAllHacknetNodeRam();\\n            break;\\n        case buy.cores:\\n            print(\\\"Upgrading CORES of all nodes\\\");\\n            upgradeAllHacknetNodeCores();\\n            break;\\n        case buy.nothing:\\n            done = true;\\n            break;\\n    }\\n}\",\"filename\":\"/scripts/character/hacknet/node_autobuy/archive/v03/run.script\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n    nodeCountLimit : 8,\\n    nodeLevelLimit : 80,\\n    nodeRamLimit : 16,\\n    nodeCoreLevelLimit : 2,\\n    nodeCacheLevelLimit : 2,\\n    //NYI moneySpendLimitPercent : 0.10,\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction getMyMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\n// ========== LOGIC ==========\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\ndisableLog(\\\"sleep\\\");\\n\\n// Buying Nodes\\nwhile (hacknet.numNodes() < sVars.nodeCountLimit) {\\n    res = hacknet.purchaseNode();\\n    print(\\\"Purchased hacknet Node with index \\\" + res);\\n}\\n\\n// Upgrading Level\\nfor (var i = 0; i < sVars.nodeCountLimit; i++) {\\n    while (hacknet.getNodeStats(i).level <= sVars.nodeLevelLimit) {\\n        var cost = hacknet.getLevelUpgradeCost(i, 10);\\n        while (getMyMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + getMyMoney());\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeLevel(i, 10);\\n    }\\n}\\n\\nprint(\\\"All nodes upgraded to level \\\" + sVars.nodeLevelLimit);\\n\\n// Upgrading RAM\\nfor (var i = 0; i < sVars.nodeCountLimit; i++) {\\n    while (hacknet.getNodeStats(i).ram < sVars.nodeRamLimit) {\\n        var cost = hacknet.getRamUpgradeCost(i, 2);\\n        while (getMyMoney() < cost) {\\n            print(\\\"Need $\\\" + cost + \\\" . Available $\\\" + getMyMoney() );\\n            sleep(3000);\\n        }\\n        res = hacknet.upgradeRam(i, 2);\\n    }\\n}\\n\\nprint(\\\"All nodes upgraded to \\\" + sVars.nodeRamLimit + \\\"GB RAM\\\");\",\"filename\":\"/scripts/character/hacknet/node_autobuy/archive/v01/run.script\",\"module\":\"\",\"ramUsage\":5.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n    nodeCountLimit: 24,\\n    nodeLevelLimit: 200,\\n    nodeRamLimit: 64,\\n    nodeCoresLimit: 16,\\n    moneySpendLimitPercent: 0.10,\\n    playerMultipliers: getHacknetMultipliers(),\\n};\\n\\nvar buy = {\\n    nothing: -1,\\n    node: 0,\\n    level: 1,\\n    ram: 2,\\n    cores: 3,\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction getMyMoney() {\\n    return getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getMinHacknetNodeLevel() {\\n    var minLevel = hacknet.getNodeStats(0).level;\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesLevel = hacknet.getNodeStats(i).level;\\n\\n        if (thisNodesLevel < minLevel) {\\n            minLevel = thisNodesLevel;\\n        }\\n    }\\n\\n    return minLevel;\\n}\\n\\nfunction getMinHacknetNodeRam() {\\n    var minRam = hacknet.getNodeStats(0).ram;\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesRam = hacknet.getNodeStats(i).ram;\\n\\n        if (thisNodesRam < minRam) {\\n            minRam = thisNodesRam;\\n        }\\n    }\\n\\n    return minRam;\\n}\\n\\nfunction getMinHacknetNodeCores() {\\n    var minCores = hacknet.getNodeStats(0).cores;\\n\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        thisNodesCores = hacknet.getNodeStats(i).cores;\\n\\n        if (thisNodesCores < minCores) {\\n            minCores = thisNodesCores;\\n        }\\n    }\\n\\n    return minCores;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(maxNodes, maxLevel, maxRam, maxCores) {\\n    print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar nodeStats = hacknet.getNodeStats(0);\\n\\t\\n\\tvar nodesRecoupTime = Number.MAX_VALUE;\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (hacknet.numNodes() < maxNodes) {\\n\\t\\tif ( hacknet.getPurchaseNodeCost() < hacknet.getLevelUpgradeCost(0) &&\\n\\t\\t\\thacknet.getPurchaseNodeCost() < hacknet.getRamUpgradeCost(0) &&\\n\\t\\t\\thacknet.getPurchaseNodeCost() < hacknet.getCoreUpgradeCost(0)\\n\\t\\t) {\\n            print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tprint(\\\"Current production: \\\" + nodeStats.production);\\n\\t\\n\\t// actually let's see if we can make this node math work out\\n\\t// but it's 11:40 pm, so I'm just going to stub this shit for now\\n\\t// For getting the recoup time, the nextNodeProduction will the same as current\\n\\t// however upgrade cost would be...oh no wait...you have to buy a node to see it's upgrade costs. motherfucker. damn it. I'll come back to this later...\\n\\t\\n\\t// get the recoup time of buying a level\\n    if (nodeStats.level < maxLevel) {\\n        var nextLevelProduction = getHacknetNodeProduction(nodeStats.level+1, nodeStats.ram, nodeStats.cores, sVars.playerMultipliers);\\n        print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - nodeStats.production;\\n        print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tlevelRecoupTime = hacknet.getLevelUpgradeCost(0)/nextLevelProductionDelta;\\n\\t\\tprint(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying RAM\\n    if (nodeStats.ram < maxRam) {\\n        var nextRamProduction = getHacknetNodeProduction(nodeStats.level, nodeStats.ram+1, nodeStats.cores, sVars.playerMultipliers);\\n        print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - nodeStats.production;\\n        print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tramRecoupTime = hacknet.getLevelUpgradeCost(0)/nextRamProductionDelta;\\n\\t\\tprint(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a core\\n    if (nodeStats.cores < maxCores) {\\n        var nextCoreProduction = getHacknetNodeProduction(nodeStats.level, nodeStats.ram, nodeStats.cores+1, sVars.playerMultipliers);\\n        print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n        var nexCoreProductionDelta = nextCoreProduction - nodeStats.production;\\n        print(\\\"nexCoreProductionDelta: \\\" + nexCoreProductionDelta);\\n        \\n\\t\\tcoresRecoupTime = hacknet.getLevelUpgradeCost(0)/nexCoreProductionDelta;\\n\\t\\tprint(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\t// Do comparisons to see what to buy\\n    if (levelRecoupTime < ramRecoupTime && levelRecoupTime < coresRecoupTime)\\n    {\\n        print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n\\t\\n    if (ramRecoupTime < levelRecoupTime && ramRecoupTime < coresRecoupTime)\\n    {\\n        print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n\\t\\n    if (coresRecoupTime < ramRecoupTime && coresRecoupTime < levelRecoupTime)\\n    {\\n        print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction upgradeAllHacknetNodeLevel() {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredLevel(i, desiredLevel)\\n    }\\n}\\n\\nfunction upgradeAllHacknetNodeRam() {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredRam(i, desiredRam)\\n    }\\n}\\n\\nfunction upgradeAllHacknetNodeCores() {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < hacknet.numNodes(); i++) {\\n        upgradeNodeToDesiredCores(i, desiredCores)\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredLevel(nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a level\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredRam(nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a RAM\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nfunction upgradeNodeToDesiredCores(nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n        while (cost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n            print(\\\"Waiting for more money to buy a core\\\");\\n            sleep(5000);\\n        }\\n        \\n        hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nfunction purchaseAndUpgradeNode() {\\n    // buy a new node and get it's stats\\n    newNodeIndex = hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.Ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    upgradeNodeToDesiredLevel(newNodeIndex, desiredLevel);\\n    upgradeNodeToDesiredRam(newNodeIndex, desiredRam);\\n    upgradeNodeToDesiredCores(newNodeIndex, desiredCores);\\n}\\n\\nfunction upgradeAllToMatchBaseNode() {\\n    baseNodeStats = hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.Ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < hacknet.numNodes(); nodeIndex++) {\\n\\t\\tprint(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tupgradeNodeToDesiredLevel(nodeIndex, desiredLevel);\\n\\t\\tupgradeNodeToDesiredRam(nodeIndex, desiredRam);\\n\\t\\tupgradeNodeToDesiredCores(nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ========== LOGIC ==========\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\ndisableLog(\\\"sleep\\\");\\n\\nvar done = false;\\nvar thingToBuy = buy.nothing;\\n\\n// I bet this script will break horribly if I don't have at least one node to start off with\\nif (hacknet.numNodes() === 0) {\\n    print(\\\"Buying the first node\\\");\\n    hacknet.purchaseNode();\\n}\\n\\n// Do a first pass to make sure everyone is upgraded to match node 0\\nupgradeAllToMatchBaseNode();\\n\\nwhile (!done) {\\n    // check to see what to buy\\n    thingToBuy = evaluateHacknetPurchaseOptions(sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit);\\n\\n    // buy the right thing\\n    switch(thingToBuy){\\n        case buy.node:\\n            var nodeCost = hacknet.getPurchaseNodeCost();\\n            while(nodeCost > getMyMoney() * sVars.moneySpendLimitPercent) {\\n                print(\\\"Waiting for more money to buy a node!\\\");\\n                sleep(5000);\\n            }\\n            print(\\\"Buying a node\\\");\\n            purchaseAndUpgradeNode();\\n            break;\\n        case buy.level:\\n            print(\\\"Upgrading LEVELS of all nodes\\\");\\n            upgradeAllHacknetNodeLevel();\\n            break;\\n        case buy.ram:\\n            print(\\\"Upgrading RAM of all nodes\\\");\\n            upgradeAllHacknetNodeRam();\\n            break;\\n        case buy.cores:\\n            print(\\\"Upgrading CORES of all nodes\\\");\\n            upgradeAllHacknetNodeCores();\\n            break;\\n        case buy.nothing:\\n            done = true;\\n            break;\\n    }\\n}\",\"filename\":\"/scripts/character/hacknet/node_autobuy/archive/v02/run.script\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\nimport * as enumLib from \\\"/scripts/functions/enumLib.script\\\";\\nePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction getTargetInfo(target) {\\n\\tprint(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetInfo = {\\n\\t\\tname : target,\\n\\t\\tmoneyAvailable : getServerMoneyAvailable(target),\\n\\t\\tmaxMoney : getServerMaxMoney(target),\\n\\t\\tgrowth : getServerGrowth(target),\\n\\t\\tsecurityLevel : getServerSecurityLevel(target),\\n\\t\\tbaseSecurityLevel : getServerBaseSecurityLevel(target),\\n\\t\\tminSecurityLevel : getServerMinSecurityLevel(target),\\n\\t\\trequiredHackingLevel : getServerRequiredHackingLevel(target),\\n\\t\\tnumPortsRequired : getServerNumPortsRequired(target),\\n\\t\\tram : getServerRam(target)[0],\\n\\t};\\n\\t\\n\\treturn targetInfo;\\n}\\n\\n// ========== LOGIC ==========\\ndisableLog(\\\"ALL\\\");\\n\\n// Enabling certain sections of the script/testing\\nvar mainScriptEnabled = false;\\nvar portPeekObjectTestEnabled = false;\\nvar portReadObjectTestEnabled = false;\\nvar statDumpTestEnabled = true;\\nvar sortTestEnabled = false;\\n\\nvar targetList = [\\n\\tgetTargetInfo(\\\"foodnstuff\\\"),\\n\\tgetTargetInfo(\\\"the-hub\\\"),\\n\\tgetTargetInfo(\\\"joesguns\\\"),\\n\\tgetTargetInfo(\\\"4sigma\\\"),\\n];\\n\\nif(mainScriptEnabled) {\\n\\tvar hackTarget = targetList[0].name;\\n\\tprint(\\\"Setting a default hackTarget: \\\" + hackTarget);\\n\\twrite(ePortIndex.HACKING_TARGET, hackTarget);\\n\\t\\n\\tprint(\\\"Sorting by requiredHackingLevel, low -> high\\\");\\n\\ttargetList.sort(function (a, b) {\\n\\t\\treturn a.requiredHackingLevel - b.requiredHackingLevel;\\n\\t});\\n\\t\\n\\thackTarget = targetList[0].name;\\n\\tprint(\\\"Setting hack target to the lowest requiredHackingLevel, which is: \\\" + hackTarget);\\n\\twrite(ePortIndex.HACKING_TARGET, hackTarget);\\n\\t\\n\\t\\n\\tprint(\\\"Sorting by maxMoney...\\\");\\n\\ttargetList.sort(function (a, b) {\\n\\t\\treturn b.maxMoney - a.maxMoney;\\n\\t});\\n}\\n\\n// ========== TESTS ==========\\nif(portPeekObjectTestEnabled) {\\n    print(\\\"running portPeekObjectTest\\\");\\n\\n    clear(ePortIndex.HACKING_TARGET);\\n\\t\\n\\twrite(ePortIndex.HACKING_TARGET, targetList);\\n\\t\\n\\tprint(\\\"Peeking at port contents: \\\" + peek(ePortIndex.HACKING_TARGET));\\n\\t\\n\\tprint(\\\"Peeking at port contents.name: \\\" + peek(ePortIndex.HACKING_TARGET).name);\\n\\t\\n\\tprint(\\\"Peeking again but storing...\\\");\\n\\tpeekTargetListA = peek(ePortIndex.HACKING_TARGET);\\n\\t\\n\\tprint(\\\"targetList Length: \\\" + targetList.length);\\n\\tprint(\\\"peekTargetListA Length: \\\" + peekTargetListA.length);\\n\\n\\tfor (i = 0; i < peekTargetListA.length; i++) {\\n\\t\\tprint(\\\"name: \\\" + peekTargetListA[i].name);\\n\\t\\tprint(\\\"moneyAvailable: \\\" + peekTargetListA[i].moneyAvailable);\\n\\t\\tprint(\\\"maxMoney: \\\" + peekTargetListA[i].maxMoney);\\n\\t\\tprint(\\\"growth: \\\" + peekTargetListA[i].growth);\\n\\t\\tprint(\\\"securityLevel: \\\" + peekTargetListA[i].securityLevel);\\n\\t\\tprint(\\\"baseSecurityLevel: \\\" + peekTargetListA[i].baseSecurityLevel);\\n\\t\\tprint(\\\"minSecurityLevel: \\\" + peekTargetListA[i].minSecurityLevel);\\n\\t\\tprint(\\\"requiredHackingLevel: \\\" + peekTargetListA[i].requiredHackingLevel);\\n\\t\\tprint(\\\"numPortsRequired: \\\" + peekTargetListA[i].numPortsRequired);\\n\\t\\tprint(\\\"ram: \\\" + peekTargetListA[i].ram);\\n\\t}\\n}\\n\\nif(portReadObjectTestEnabled) {\\n\\t//10:30pm notes: Peek is working, but read is not. Weird. Not sure what's up. Sigh.\\n\\n\\tprint(\\\"running portReadObjectTest\\\");\\n\\twrite(ePortIndex.HACKING_TARGET, targetList);\\n\\tprint(peek(ePortIndex.HACKING_TARGET));\\n\\treadTargetList = read(ePortIndex.HACKING_TARGET);\\n\\tprint(\\\"targetList Length: \\\" + targetList.length);\\n\\tprint(\\\"readTargetList Length: \\\" + readTargetList.length);\\n\\n\\tfor (i = 0; i < readTargetList.length; i++) {\\n\\t\\tprint(\\\"name: \\\" + readTargetList[i].name);\\n\\t\\tprint(\\\"moneyAvailable: \\\" + readTargetList[i].moneyAvailable);\\n\\t\\tprint(\\\"maxMoney: \\\" + readTargetList[i].maxMoney);\\n\\t\\tprint(\\\"growth: \\\" + readTargetList[i].growth);\\n\\t\\tprint(\\\"securityLevel: \\\" + readTargetList[i].securityLevel);\\n\\t\\tprint(\\\"baseSecurityLevel: \\\" + readTargetList[i].baseSecurityLevel);\\n\\t\\tprint(\\\"minSecurityLevel: \\\" + readTargetList[i].minSecurityLevel);\\n\\t\\tprint(\\\"requiredHackingLevel: \\\" + readTargetList[i].requiredHackingLevel);\\n\\t\\tprint(\\\"numPortsRequired: \\\" + readTargetList[i].numPortsRequired);\\n\\t\\tprint(\\\"ram: \\\" + readTargetList[i].ram);\\n\\t}\\n}\\n\\nif(sortTestEnabled) {\\n\\tfor (i = 0; i < targetList.length; i++) {\\n\\t\\tprint(\\\"name: \\\" + targetList[i].name);\\n\\t\\tprint(\\\"maxMoney: \\\" + targetList[i].maxMoney);\\n\\t\\tprint(\\\"requiredHackingLevel: \\\" + targetList[i].requiredHackingLevel);\\n\\t\\tprint(\\\"numPortsRequired: \\\" + targetList[i].numPortsRequired);\\n\\t}\\n\\t\\n\\tprint(\\\"sorting...\\\");\\n\\ttargetList.sort(function (a, b) {\\n\\t\\treturn b.maxMoney - a.maxMoney;\\n\\t});\\n\\t\\n\\tfor (i = 0; i < targetList.length; i++) {\\n\\t\\tprint(\\\"name: \\\" + targetList[i].name);\\n\\t\\tprint(\\\"maxMoney: \\\" + targetList[i].maxMoney);\\n\\t\\tprint(\\\"requiredHackingLevel: \\\" + targetList[i].requiredHackingLevel);\\n\\t\\tprint(\\\"numPortsRequired: \\\" + targetList[i].numPortsRequired);\\n\\t}\\n}\\n\\nif(statDumpTestEnabled) {\\n\\tfor (i = 0; i < targetList.length; i++) {\\n\\t\\tprint(\\\"name: \\\" + targetList[i].name);\\n\\t\\tprint(\\\"moneyAvailable: \\\" + targetList[i].moneyAvailable);\\n\\t\\tprint(\\\"maxMoney: \\\" + targetList[i].maxMoney);\\n\\t\\tprint(\\\"growth: \\\" + targetList[i].growth);\\n\\t\\tprint(\\\"securityLevel: \\\" + targetList[i].securityLevel);\\n\\t\\tprint(\\\"baseSecurityLevel: \\\" + targetList[i].baseSecurityLevel);\\n\\t\\tprint(\\\"minSecurityLevel: \\\" + targetList[i].minSecurityLevel);\\n\\t\\tprint(\\\"requiredHackingLevel: \\\" + targetList[i].requiredHackingLevel);\\n\\t\\tprint(\\\"numPortsRequired: \\\" + targetList[i].numPortsRequired);\\n\\t\\tprint(\\\"ram: \\\" + targetList[i].ram);\\n\\t}\\n}\\n\\n/* Reference\\nwrite()\\ntryWrite()\\nread()\\npeek()\\nclear()\\n\\t*/\",\"filename\":\"/scripts/hacking/director/run.script\",\"module\":\"\",\"ramUsage\":6.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ePortIndex_v1 = {\\n\\tHACKING_TARGET: 1,\\n};\\n\\nfunction getEnumPortIndexVersion (version) {\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/scripts/functions/enumLib.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/scripts/pserv/deploy.script\",\"module\":\"\",\"ramUsage\":4.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n}\",\"filename\":\"/scripts/pserv/killall.script\",\"module\":\"\",\"ramUsage\":4.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var upgradeName = \\\"Sell for Money\\\";\\nvar hashReserve = 50;\\n\\nwhile(true) {\\n    if ((hacknet.numHashes()-hashReserve) > hacknet.hashCost(upgradeName)) {\\n        hacknet.spendHashes(upgradeName);\\n    }\\n}\",\"filename\":\"/scripts/character/hacknet/hashManager/archive/v01/run.script\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 64,\\n\\tnodeCoresLimit: 16,\\n\\tmoneySpendLimitPercent: 0.90,\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n};\\n\\n// ========== LOGIC ==========\\nexport async function main(ns) {\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ========= FUNCTIONS ========= \\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction;\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction;\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a level\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying RAM\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a core\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n        var nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + bareNodeRecoupTime);\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + upgradedNodeRecoupTime);\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + levelRecoupTime);\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ramRecoupTime);\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + coresRecoupTime);\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a level\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a RAM\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a core\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n    }\\n}\",\"filename\":\"/scripts/character/hacknet/node_autobuy/run.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : true, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_nameDump : false,\\n\\ttestEnabled_nameAndPortsDump : false, \\n    testEnabled_dataDump : false,\\n    testEnabled_testScanArrayDump : false,\\n    testEnabled_sortByRequiredHackShowMaxMoney : true,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n    \\n\\t// - Tests ----------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.print(\\\"Starting main function\\\");\\n}\\n\\n// ===== FUNCTIONS ============\\nexport async function buildServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport function getTargetInfo(ns, target, parent, depth) {\\n\\t//ns.print(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetIsHacknet = target.startsWith(\\\"hacknet\\\");\\n    var targetInfo;\\n\\t\\n\\tif (targetIsHacknet) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHacknet : true,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t};\\n\\t}\\n\\telse {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\t\\n\\treturn targetInfo;\\n}\\n\\nexport async function processScanResultsRecursive(ns, serverListArray, parentServer, calledDepth) {\\n\\t// ns.print(\\\"---- Calling processScanResultsRecursive @ depth \\\" + calledDepth + \\\" ----\\\"); //DEBUG\\n\\tvar currentDepth = calledDepth + 1;\\n\\t\\n\\tvar returningTargetInfoArray = [];\\n\\t// Loop over all elements of serverListArray\\n\\tfor (var i = 0; i < serverListArray.length; i++) {\\n\\t\\tvar currentServerName = serverListArray[i];\\n\\t\\n\\t\\t// assign it's data to the array we're going to return\\n\\t\\treturningTargetInfoArray.push(getTargetInfo(ns, currentServerName, parentServer.name, currentDepth));\\n\\t\\t\\n\\t\\t// scan for more servers\\n\\t\\tvar neighboringServerArray = ns.scan(currentServerName);\\n\\t\\t// ns.print(\\\"== dumping neighboring servers pre-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, neighboringServerArray); //DEBUG\\n\\t\\t\\n\\t\\t// remove the parent from the list\\n\\t\\tvar parentNeighborIndex;\\n\\t\\t\\n\\t\\tfor (var j = 0; j < neighboringServerArray.length; j++) {\\n\\t\\t\\tif (neighboringServerArray[j] === parentServer.name) {\\n\\t\\t\\t\\tparentNeighborIndex = j;\\n\\t\\t\\t}\\n\\t\\t\\t// await ns.sleep(100);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// ns.print(\\\"parentNeighborIndex: \\\" + parentNeighborIndex); //DEBUG\\n\\t\\tvar childServerArray = neighboringServerArray;\\n\\t\\tchildServerArray.splice(parentNeighborIndex, 1);\\n\\t\\t\\n\\t\\t// ns.print(\\\"== dumping childServerArray servers post-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, childServerArray); //DEBUG\\n\\t\\t// ns.print(\\\"== childServerArray.length: \\\" + childServerArray.length); //DEBUG\\n\\t\\t\\n\\t\\t// call process scan results for the children\\n\\t\\tvar childServerInfoArray;\\n\\t\\t\\n\\t\\tif (childServerArray.length !== 0) {\\n\\t\\t\\t// ns.print(\\\"Attempting to call processScanResultsRecursive again\\\"); //DEBUG\\n\\t\\t\\tchildServerInfoArray = await processScanResultsRecursive(ns, childServerArray, getTargetInfo(ns, currentServerName, parentServer.name, currentDepth), currentDepth);\\n\\t\\t\\t// ns.print(\\\"childServerInfoArray.length :\\\" + childServerInfoArray.length); //DEBUG\\n\\t\\t\\t\\n\\t\\t\\t// push all the results from the children into the array\\n\\t\\t\\tfor (var k = 0; k < childServerInfoArray.length; k++) {\\n\\t\\t\\t\\treturningTargetInfoArray.push(childServerInfoArray[k]);\\n\\t\\t\\t\\t// await ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t// ns.print(\\\"== Skipped Recursion ===\\\"); //DEBUG\\n\\t\\t}\\n\\t\\t\\n\\t\\t// await ns.sleep(100);\\n\\t}\\n\\t\\n\\treturn returningTargetInfoArray;\\n}\\n\\n// ===== TESTS ================\\nasync function executeTests(ns) {\\n    var serverInfoArray = await buildServerInfoArray(ns);\\n\\n    if (tests.testEnabled_nameDump) { testNameDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_nameAndPortsDump) { testNameAndPortsDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_dataDump) { testDataDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_testScanArrayDump) { testScanArrayDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_sortByRequiredHackShowMaxMoney) { test_sortByRequiredHackShowMaxMoney(ns, serverInfoArray); }\\n}\\n\\nfunction testNameDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tns.print(serverInfoArray[i].name);\\n\\t}\\n} \\n\\nfunction testNameAndPortsDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameAndPortsDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"/Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testDataDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testDataDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"    /    Parent: \\\" + serverInfoArray[i].parent + \\\"    /    Depth: \\\" + serverInfoArray[i].depth + \\\"    /    Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testScanArrayDump(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: testScanArrayDump ====\\\");\\n\\tfor (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.print(\\\"Index: \\\" + i + \\\"/SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\nfunction test_sortByRequiredHackShowMaxMoney(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: test_sortByRequiredHackShowMaxMoney ====\\\");\\n    \\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\",\"filename\":\"/scripts/functions/buildServerInfoArray.js\",\"module\":\"\",\"ramUsage\":2.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/scripts/functions/buildServerInfoArray.js\\\";\\nimport * as hpn from \\\"/scripts/functions/getNumOpenablePorts.js\\\";\\nimport * as gra from \\\"/scripts/functions/getRootAccess.js\\\";\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns)\\n{\\n    var sArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return sArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/scripts/hacking/basic/install_and_run.script\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n          thisServer.isHacknet === false &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n            var waitingToInstall = true;\\n            while(waitingToInstall) {\\n                var homeRam = ns.getServerRam(ns.getHostname());\\n                var homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n                if (homeFreeRam >= ns.getScriptRam(sVars.installScript)) {\\n                    ns.run(sVars.installScript, 1, thisServer.name, sArgs.hackingTarget);\\n                    waitingToInstall = false;\\n                }\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/scripts/deploy/server_steal_basic/run.js\",\"module\":\"\",\"ramUsage\":4.3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n}\\n\\n// ========= FUNCTIONS ========= \\n\\n\\n// =========== TESTS ===========\",\"filename\":\"/scripts/templates/ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n    \\n    var hackablePortNumber = getNumOpenablePorts(ns);\\n\\n    // figure out how many ports I can steal\\n    // build get the list of servers\\n    // based on how many ports I can open, use the install and run script    \\n\\n    ns.print(hackablePortNumber);\\n}\\n\\n// ========= FUNCTIONS ========= \\nexport function getNumOpenablePorts(ns) {\\n    var numOpenablePorts = 0;\\n    \\n    if(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    \\n    return numOpenablePorts;\\n}\\n\\n// =========== TESTS ===========\",\"filename\":\"/scripts/functions/getNumOpenablePorts.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getRootAccess (ns, target)\\n{\\n    // If we have the various port oepning program, use them to open ports\\n    // on the target server\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target);\\n    }\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target);\\n    }\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target);\\n    }\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target);\\n    }\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target);\\n    }\\n    \\n    // Get root access to target server\\n    ns.nuke(target);\\n}\",\"filename\":\"/scripts/functions/getRootAccess.js\",\"module\":\"\",\"ramUsage\":2,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\t// Get root access if I don't have it\\n\\tif (hasRootAccess(sArgs.target) === false) {\\n\\t\\tgetRootAccess(sArgs.target);\\n\\t}\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/scripts/hacking/basic/run.script\",\"module\":\"\",\"ramUsage\":2.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/scripts/functions/getRootAccess.script\\\",\\n\\t\\t\\t\\\"/scripts/hacking/basic/run.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/scripts/hacking/basic/run.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/scripts/hacking/basic/install_and_run.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\thashReserve : 0,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_TotalHacknetProductionEnabled : false,\\n\\ttestEnabled_getTotalHashCapacity : false,\\n\\ttestEnabled_evaluateMinimumHacknetProduction : false,\\n\\ttestEnabled_evaluateImporoveStudying : false,\\n};\\n\\nvar eUpgradeName = {\\n\\tsellForMoney : \\\"Sell for Money\\\",\\n\\tsellForCorporationFunds : \\\"Sell for Corporation Funds\\\",\\n\\treduceMinimumSecurity : \\\"Reduce Minimum Security\\\",\\n\\tincreaseMaximumMoney : \\\"Increase Maximum Money\\\",\\n\\timproveStudying : \\\"Improve Studying\\\",\\n\\timproveGymTraining : \\\"Improve Gym Training\\\",\\n\\texchangeForCorporationResearch : \\\"Exchange for Corporation Research\\\",\\n\\texchangeForBladeburnerRank : \\\"Exchange for Bladeburner Rank\\\",\\n\\texchangeForBladeburnerSkillPpoints : \\\"Exchange for Bladeburner SP\\\",\\n\\tgenerateCodingContract : \\\"Generate Coding Contract\\\",\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\t// Real Logic\\n\\tif (!tests.disableMain) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.print(\\\"Starting main function\\\");\\n\\t\\tvar upgradeToBuy = eUpgradeName.sellForMoney;\\n\\n\\t\\twhile(true) {\\n\\t\\t\\tupgradeToBuy = decideWhatToBuy(ns);\\n\\t\\t\\tns.print(\\\"Decided to buy: \\\" + upgradeToBuy);\\n\\t\\t\\tawait buyUpgrade(ns, upgradeToBuy);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"WARNING: Script is in test only mode\\\");\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getTotalHashCapacity(ns) {\\n\\tvar hashCapacity = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\thashCapacity += 64 * Math.pow(2, ns.hacknet.getNodeStats(i).cache - 1);\\n\\t}\\n\\t\\n\\t\\n\\t// see how many hacknet nodes we have \\n\\t// see how many cache upgrades we have \\n\\t\\n\\treturn hashCapacity;\\n}\\n\\nfunction getTotalHacknetHashProduction(ns) {\\n\\tvar totalHacknetProduction = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\ttotalHacknetProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\t\\n\\treturn totalHacknetProduction;\\n}\\n\\nfunction decideWhatToBuy(ns) {\\n\\tvar upgradeNameToPurchase = eUpgradeName.sellForMoney; // if nothing else, we'll decide to convert to cash\\n\\t\\n\\t/* Purchase Priority goals - Go down the list, and do the first thing that is true\\n\\t\\t1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\t\\t2) We should then start spending some on University upgrades \\n\\t\\tZ) Convert to cash (which we defaulted to when declaring the return variable)\\n\\t*/\\n\\t\\n\\t// 1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\tif (evaluateMinimumHacknetProduction(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.sellForMoney; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\t// 2) We should then start spending some on University upgrades \\n\\tif (evaluateImporoveStudying(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.improveStudying; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\treturn upgradeNameToPurchase;\\n}\\n\\nasync function buyUpgrade(ns, upgradeToBuy) {\\n\\tvar upgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\tvar desiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\n\\twhile (desiredHashCount < upgradeHashCost){\\n\\t\\tns.print(\\\"Waiting for more hashes (Have: \\\" + ns.nFormat(desiredHashCount, \\\"0,0\\\") + \\\" / Want: \\\" + ns.nFormat(upgradeHashCost, \\\"0,0\\\") + \\\")\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tupgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\t\\tdesiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\t}\\n\\t\\n\\tif ((ns.hacknet.numHashes()-sVars.hashReserve) > ns.hacknet.hashCost(upgradeToBuy)) {\\n\\t\\tns.print(\\\"Spending hashes on: \\\" + upgradeToBuy);\\n\\t\\tns.hacknet.spendHashes(upgradeToBuy);\\n\\t}\\n}\\n\\nfunction evaluateMinimumHacknetProduction(ns) {\\n\\tif (getTotalHacknetHashProduction(ns) < 1) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nfunction evaluateImporoveStudying(ns) {\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tvar hashCapacityPcnt = 0.50;\\n\\n\\tif (imporoveStudyingCost < hashCapacity * hashCapacityPcnt) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_TotalHacknetProductionEnabled)\\n\\t\\ttest_getTotalHacknetHashProduction(ns);\\n\\tif (tests.testEnabled_getTotalHashCapacity)\\n\\t\\ttest_getTotalHashCapacity(ns);\\n\\tif (tests.testEnabled_evaluateMinimumHacknetProduction)\\n\\t\\ttest_evaluateMinimumHacknetProduction(ns);\\n\\tif (tests.testEnabled_evaluateImporoveStudying)\\n\\t\\ttest_evaluateImporoveStudying(ns);\\n}\\n\\nfunction test_getTotalHacknetHashProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHacknetHashProduction ====\\\");\\n\\tvar totalHashProduction = getTotalHacknetHashProduction(ns);\\n\\tns.print(\\\"Total Hash Production: \\\" + totalHashProduction);\\n}\\n\\nfunction test_getTotalHashCapacity(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHashCapacity ====\\\");\\n\\tvar hashCapactiy = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapactiy: \\\" + hashCapactiy);\\n}\\n\\nfunction test_evaluateMinimumHacknetProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateMinimumHacknetProduction ====\\\");\\n\\tvar resultOfEvaluation = evaluateMinimumHacknetProduction(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\nfunction test_evaluateImporoveStudying(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateImporoveStudying ====\\\");\\n\\t\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tns.print(\\\"imporoveStudyingCost: \\\" + imporoveStudyingCost);\\n\\t\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapacity: \\\" + hashCapacity);\\t\\n\\t\\n\\tvar resultOfEvaluation = evaluateImporoveStudying(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\n// ===== REFERENCE ============\\n/* Function Reference\\nnumHashes()\\nhashCost(upgName)\\nspendHashes(upgName, upgTarget)\\n*/\\n\\n/* Hash Upgrade Table\\nSell for Money\\t\\t\\t\\t\\t\\t\\tBase Cost: 4.000\\t\\tSell hashes for $1m\\nSell for Corporation Funds\\t\\t\\t\\tBase Cost: 100.000\\t\\tSell hashes for $1b in Corporation funds\\nReduce Minimum Security\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to decrease the minimum security of a single server by 2%. Note that a server's minimum security cannot go below 1.\\nIncrease Maximum Money\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to increase the maximum amount of money on a single server by 2%\\nImprove Studying\\t\\t\\t\\t\\t\\tBase Cost: 100.000\\t\\tUse hashes to improve the experience earned when studying at a university by 20%. This effect persists until you install Augmentations\\nImprove Gym Training\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to improve the experience earned when training at the gym by 20%. This effect persists until you install Augmentations\\nExchange for Corporation Research\\t\\tBase Cost: 200.000\\t\\tExchange hashes for 1k Scientific Research in all of your Corporation's Industries\\nExchange for Bladeburner Rank\\t\\t\\tBase Cost: 250.000\\t\\tExchange hashes for 100 Bladeburner Rank\\nExchange for Bladeburner SP\\t\\t\\t\\tBase Cost: 250.000\\t\\tExchanges hashes for 10 Bladeburner Skill Points\\nGenerate Coding Contract\\t\\t\\t\\tBase Cost: 200.000\\t\\tGenerate a random Coding Contract somewhere on the network\\n*/\",\"filename\":\"/scripts/character/hacknet/hashManager/run.js\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS ================= \\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tnodeCountLimit: 20,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 1024,\\n\\tnodeCoresLimit: 16,\\n\\tnodeCacheLimit: 5,\\n\\tmoneySpendLimitPercent: 0.90,\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n\\tcache: 4,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cache:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CACHES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCacheAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.001;\\n    var ramModifier = Math.pow(1.07, Math.log2(ram));\\n    var coresModifier = (cores + 4) / 5;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction convertHashProductionToMoney(hashProduction){\\n\\tvar moneyProduction = 1000000/(4/hashProduction);\\n\\treturn moneyProduction;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Improving the cache size doesn't get us more production, but can be nice to have\\n\\t// Because there is no comparitive math here, we just early out by claiming we're going to buy a cache level\\n\\tif (evaluateImprovingCaches(ns)){\\n\\t\\tns.print(\\\"Choosing to buy cache upgrades\\\");\\n\\t\\treturn buy.cache;\\n\\t}\\n\\t\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + bareNodeRecoupTime);\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + upgradedNodeRecoupTime);\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + levelRecoupTime);\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ramRecoupTime);\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + coresRecoupTime);\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction evaluateImprovingCaches(ns) {\\n\\tns.print(\\\"Evauluating if we should buy caches\\\");\\n\\tvar shouldBuy = false;\\n\\tvar baseNode = 0;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar levelUpgradeCost = ns.hacknet.getLevelUpgradeCost(baseNode, 1);\\n\\tvar ramUpgradeCost = ns.hacknet.getRamUpgradeCost(baseNode, 1);\\n\\tvar coreUpgradeCost = ns.hacknet.getCoreUpgradeCost(baseNode, 1);\\n\\tvar cacheUpgradeCost = ns.hacknet.getCacheUpgradeCost(baseNode, 1);\\n\\t\\n\\tif (cacheUpgradeCost < newNodeCost &&\\n\\t\\tcacheUpgradeCost < levelUpgradeCost &&\\n\\t\\tcacheUpgradeCost < ramUpgradeCost &&\\n\\t\\tcacheUpgradeCost < coreUpgradeCost\\n\\t) {\\n\\t\\tshouldBuy = true;\\n\\t}\\n\\t\\n\\treturn shouldBuy;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/convertHashProductionToMoney(bareNodeProduction);\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/convertHashProductionToMoney(upgradedNodeProduction);\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/convertHashProductionToMoney(nextLevelProductionDelta);\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/convertHashProductionToMoney(nextRamProductionDelta);\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/convertHashProductionToMoney(nextCoreProductionDelta);\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCacheAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCache = ns.hacknet.getNodeStats(0).cache + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCacheAsync(ns, i, desiredCache);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a level\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a RAM\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a core\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCacheAsync(ns, nodeIndex, desiredCache) {\\n    // Keep going until we hit the desired cache amount\\n    while (ns.hacknet.getNodeStats(nodeIndex).cache < desiredCache) {\\n        var cost = ns.hacknet.getCacheUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cache\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a cache upgrade\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCache(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n    }\\n}\",\"filename\":\"/scripts/character/hacknet/server_autobuy/run.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/scripts/functions/buildServerInfoArray.js\\\";\\nimport * as hpn from \\\"/scripts/functions/getNumOpenablePorts.js\\\";\\nimport * as gra from \\\"/scripts/functions/getRootAccess.js\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n    \\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/scripts/hacking/basic/install_and_run.script\\\",\\n    hackingTarget : \\\"max-hardware\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n\\t\\t\\tns.killall(thisServer.name);\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/scripts/deploy/killAll/run.js\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    \\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/_getScriptList-ns2.js\\\", \\\"/pull/_getScriptList-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/pull_scripts-ns2.js\\\", \\\"/pull/pull_scripts-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/destroy_scripts-ns2.js\\\", \\\"/pull/destroy_scripts-ns2.js\\\");\\n\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait ns.run(\\\"/pull/pull_scripts-ns2.js\\\", 1, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t\\tns.tprint(\\\"===== ALERT ===== Valid values: master, beta\\\");\\n\\t}\\n\\n\\tns.tprint(\\\"Pull complete!\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait pull(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function pull(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\n\\t// gitHub Setup\\n\\tvar gitHubBranchPath = branch;\\n\\tvar gitHubPrjectURL = \\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/\\\";\\n\\tvar gitHubScriptsPath = \\\"/home/scripts\\\";\\n\\t\\n\\t// bitBurner setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar sourcePath = gitHubPrjectURL + gitHubBranchPath + gitHubScriptsPath + scriptPath;\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.wget(sourcePath, destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait destroy(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function destroy(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\tvar deprecatedScripts = getDrecatedScriptList();\\n\\t\\n\\t// bitBurner path setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n\\t\\n\\tfor(var i = 0; i < deprecatedScripts.length; i++) {\\n\\t\\tvar scriptPath = deprecatedScripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/destroy_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"run(\\\"./../path_bravo/test.script\\\");\",\"filename\":\"/temp/rel_dir_test/path_alpha/test.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"tprint(\\\"Test successful\\\");\",\"filename\":\"/temp/rel_dir_test/path_bravo/test.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_getScriptList : true,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getScriptList(){\\n\\tvar scripts = [\\n\\t\\t// buy_server\\n\\t\\t\\\"/buy_server/buy_server-ns1.script\\\",\\n\\t\\t// hacknet\\n\\t\\t\\\"/character/hacknet/hashmanager-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/node_autobuy-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/server_autobuy-ns2.js\\\",\\n\\t\\t// deploy\\n\\t\\t\\\"/deploy/kill_all-ns2.js\\\",\\n\\t\\t\\\"/deploy/server_steal_basic-ns2.js\\\",\\n\\t\\t// functions\\n\\t\\t\\\"/functions/buildServerInfoArray-ns2.js\\\",\\n\\t\\t\\\"/functions/enumLib-ns1.script\\\",\\n\\t\\t\\\"/functions/enumLib-ns2.js\\\",\\n\\t\\t\\\"/functions/getNumOpenablePorts-ns2.js\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns2.js\\\",\\n\\t\\t\\\"/functions/getServerRamObj-ns2.js\\\",\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/advanced/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/advanced/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_harakiri-sushi-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_joesguns-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_template-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/director-ns2.js\\\",\\n\\t\\t// pserv\\n\\t\\t\\\"/pserv/deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall_and_deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall-ns1.script\\\",\\n\\t\\t// restart_run\\n\\t\\t\\\"/restart_run/restart_run-ns1.script\\\",\\n\\t\\t// templates\\n\\t\\t\\\"/templates/ns1_template.js\\\",\\n\\t\\t\\\"/templates/ns2_template.js\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\nexport function getDrecatedScriptList(){\\n\\tvar scripts = [\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/director-ns1.script\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_getScriptList)\\n\\t\\ttest_getScriptList(ns);\\n}\\n\\nfunction test_getScriptList(ns) {\\n\\tns.print(\\\"==== TEST: test_getScriptList ====\\\");\\n\\n\\tscripts = getScriptList();\\n\\tfor (var i = 0; i < scripts.length; i++) {\\n\\t\\tns.print(scripts[i]);\\n\\t}\\n}\",\"filename\":\"/pull/_getScriptList-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\thashReserve : 0,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_TotalHacknetProductionEnabled : false,\\n\\ttestEnabled_getTotalHashCapacity : false,\\n\\ttestEnabled_evaluateMinimumHacknetProduction : false,\\n\\ttestEnabled_evaluateImporoveStudying : false,\\n};\\n\\nvar eUpgradeName = {\\n\\tsellForMoney : \\\"Sell for Money\\\",\\n\\tsellForCorporationFunds : \\\"Sell for Corporation Funds\\\",\\n\\treduceMinimumSecurity : \\\"Reduce Minimum Security\\\",\\n\\tincreaseMaximumMoney : \\\"Increase Maximum Money\\\",\\n\\timproveStudying : \\\"Improve Studying\\\",\\n\\timproveGymTraining : \\\"Improve Gym Training\\\",\\n\\texchangeForCorporationResearch : \\\"Exchange for Corporation Research\\\",\\n\\texchangeForBladeburnerRank : \\\"Exchange for Bladeburner Rank\\\",\\n\\texchangeForBladeburnerSkillPpoints : \\\"Exchange for Bladeburner SP\\\",\\n\\tgenerateCodingContract : \\\"Generate Coding Contract\\\",\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\t// Real Logic\\n\\tif (!tests.disableMain) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.print(\\\"Starting main function\\\");\\n\\t\\tvar upgradeToBuy = eUpgradeName.sellForMoney;\\n\\n\\t\\twhile(true) {\\n\\t\\t\\tupgradeToBuy = decideWhatToBuy(ns);\\n\\t\\t\\tns.print(\\\"Decided to buy: \\\" + upgradeToBuy);\\n\\t\\t\\tawait buyUpgrade(ns, upgradeToBuy);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getTotalHashCapacity(ns) {\\n\\tvar hashCapacity = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\thashCapacity += 64 * Math.pow(2, ns.hacknet.getNodeStats(i).cache - 1);\\n\\t}\\n\\t\\n\\t\\n\\t// see how many hacknet nodes we have \\n\\t// see how many cache upgrades we have \\n\\t\\n\\treturn hashCapacity;\\n}\\n\\nfunction getTotalHacknetHashProduction(ns) {\\n\\tvar totalHacknetProduction = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\ttotalHacknetProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\t\\n\\treturn totalHacknetProduction;\\n}\\n\\nfunction decideWhatToBuy(ns) {\\n\\tvar upgradeNameToPurchase = eUpgradeName.sellForMoney; // if nothing else, we'll decide to convert to cash\\n\\t\\n\\t/* Purchase Priority goals - Go down the list, and do the first thing that is true\\n\\t\\t1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\t\\t2) We should then start spending some on University upgrades \\n\\t\\tZ) Convert to cash (which we defaulted to when declaring the return variable)\\n\\t*/\\n\\t\\n\\t// 1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\tif (evaluateMinimumHacknetProduction(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.sellForMoney; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\t// 2) We should then start spending some on University upgrades \\n\\tif (evaluateImporoveStudying(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.improveStudying; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\treturn upgradeNameToPurchase;\\n}\\n\\nasync function buyUpgrade(ns, upgradeToBuy) {\\n\\tvar upgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\tvar desiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\n\\twhile (desiredHashCount < upgradeHashCost){\\n\\t\\tns.print(\\\"Waiting for more hashes (Have: \\\" + ns.nFormat(desiredHashCount, \\\"0,0\\\") + \\\" / Want: \\\" + ns.nFormat(upgradeHashCost, \\\"0,0\\\") + \\\")\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tupgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\t\\tdesiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\t}\\n\\t\\n\\tif ((ns.hacknet.numHashes()-sVars.hashReserve) > ns.hacknet.hashCost(upgradeToBuy)) {\\n\\t\\tns.print(\\\"Spending hashes on: \\\" + upgradeToBuy);\\n\\t\\tns.hacknet.spendHashes(upgradeToBuy);\\n\\t}\\n}\\n\\nfunction evaluateMinimumHacknetProduction(ns) {\\n\\tif (getTotalHacknetHashProduction(ns) < 1) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nfunction evaluateImporoveStudying(ns) {\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tvar hashCapacityPcnt = 0.50;\\n\\n\\tif (imporoveStudyingCost < hashCapacity * hashCapacityPcnt) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_TotalHacknetProductionEnabled)\\n\\t\\ttest_getTotalHacknetHashProduction(ns);\\n\\tif (tests.testEnabled_getTotalHashCapacity)\\n\\t\\ttest_getTotalHashCapacity(ns);\\n\\tif (tests.testEnabled_evaluateMinimumHacknetProduction)\\n\\t\\ttest_evaluateMinimumHacknetProduction(ns);\\n\\tif (tests.testEnabled_evaluateImporoveStudying)\\n\\t\\ttest_evaluateImporoveStudying(ns);\\n}\\n\\nfunction test_getTotalHacknetHashProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHacknetHashProduction ====\\\");\\n\\tvar totalHashProduction = getTotalHacknetHashProduction(ns);\\n\\tns.print(\\\"Total Hash Production: \\\" + totalHashProduction);\\n}\\n\\nfunction test_getTotalHashCapacity(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHashCapacity ====\\\");\\n\\tvar hashCapactiy = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapactiy: \\\" + hashCapactiy);\\n}\\n\\nfunction test_evaluateMinimumHacknetProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateMinimumHacknetProduction ====\\\");\\n\\tvar resultOfEvaluation = evaluateMinimumHacknetProduction(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\nfunction test_evaluateImporoveStudying(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateImporoveStudying ====\\\");\\n\\t\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tns.print(\\\"imporoveStudyingCost: \\\" + imporoveStudyingCost);\\n\\t\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapacity: \\\" + hashCapacity);\\t\\n\\t\\n\\tvar resultOfEvaluation = evaluateImporoveStudying(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\n// ===== REFERENCE ============\\n/* Function Reference\\nnumHashes()\\nhashCost(upgName)\\nspendHashes(upgName, upgTarget)\\n*/\\n\\n/* Hash Upgrade Table\\nSell for Money\\t\\t\\t\\t\\t\\t\\tBase Cost: 4.000\\t\\tSell hashes for $1m\\nSell for Corporation Funds\\t\\t\\t\\tBase Cost: 100.000\\t\\tSell hashes for $1b in Corporation funds\\nReduce Minimum Security\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to decrease the minimum security of a single server by 2%. Note that a server's minimum security cannot go below 1.\\nIncrease Maximum Money\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to increase the maximum amount of money on a single server by 2%\\nImprove Studying\\t\\t\\t\\t\\t\\tBase Cost: 100.000\\t\\tUse hashes to improve the experience earned when studying at a university by 20%. This effect persists until you install Augmentations\\nImprove Gym Training\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to improve the experience earned when training at the gym by 20%. This effect persists until you install Augmentations\\nExchange for Corporation Research\\t\\tBase Cost: 200.000\\t\\tExchange hashes for 1k Scientific Research in all of your Corporation's Industries\\nExchange for Bladeburner Rank\\t\\t\\tBase Cost: 250.000\\t\\tExchange hashes for 100 Bladeburner Rank\\nExchange for Bladeburner SP\\t\\t\\t\\tBase Cost: 250.000\\t\\tExchanges hashes for 10 Bladeburner Skill Points\\nGenerate Coding Contract\\t\\t\\t\\tBase Cost: 200.000\\t\\tGenerate a random Coding Contract somewhere on the network\\n*/\",\"filename\":\"/master/character/hacknet/hashmanager-ns2.js\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 1024,\\n\\tnodeCoresLimit: 16,\\n\\tnodeCacheLimit: 5,\\n\\tmoneySpendLimitPercent: 0.90,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n\\tcache: 4,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cache:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CACHES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCacheAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.001;\\n    var ramModifier = Math.pow(1.07, Math.log2(ram));\\n    var coresModifier = (cores + 4) / 5;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction convertHashProductionToMoney(hashProduction){\\n\\tvar moneyProduction = 1000000/(4/hashProduction);\\n\\treturn moneyProduction;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Improving the cache size doesn't get us more production, but can be nice to have\\n\\t// Because there is no comparitive math here, we just early out by claiming we're going to buy a cache level\\n\\tif (evaluateImprovingCaches(ns)){\\n\\t\\tns.print(\\\"Choosing to buy cache upgrades\\\");\\n\\t\\treturn buy.cache;\\n\\t}\\n\\t\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction evaluateImprovingCaches(ns) {\\n\\tns.print(\\\"Evauluating if we should buy caches\\\");\\n\\tvar shouldBuy = false;\\n\\tvar baseNode = 0;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar levelUpgradeCost = ns.hacknet.getLevelUpgradeCost(baseNode, 1);\\n\\tvar ramUpgradeCost = ns.hacknet.getRamUpgradeCost(baseNode, 1);\\n\\tvar coreUpgradeCost = ns.hacknet.getCoreUpgradeCost(baseNode, 1);\\n\\tvar cacheUpgradeCost = ns.hacknet.getCacheUpgradeCost(baseNode, 1);\\n\\t // Multipliers on cost to be less than, lower means longer time between buying caches\\n\\tvar levelCostModifier = 0.50;\\n\\tvar ramCostModifier = 0.50;\\n\\tvar coreCostModifier = 0.50;\\n\\tvar cacheCostModifier = 0.50;\\n\\t\\n\\tif (cacheUpgradeCost < newNodeCost*levelCostModifier &&\\n\\t\\tcacheUpgradeCost < levelUpgradeCost*ramCostModifier &&\\n\\t\\tcacheUpgradeCost < ramUpgradeCost*coreCostModifier &&\\n\\t\\tcacheUpgradeCost < coreUpgradeCost*cacheCostModifier \\n\\t) {\\n\\t\\tshouldBuy = true;\\n\\t}\\n\\t\\n\\treturn shouldBuy;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/convertHashProductionToMoney(bareNodeProduction);\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/convertHashProductionToMoney(upgradedNodeProduction);\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/convertHashProductionToMoney(nextLevelProductionDelta);\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/convertHashProductionToMoney(nextRamProductionDelta);\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/convertHashProductionToMoney(nextCoreProductionDelta);\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCacheAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCache = ns.hacknet.getNodeStats(0).cache + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCacheAsync(ns, i, desiredCache);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCacheAsync(ns, nodeIndex, desiredCache) {\\n    // Keep going until we hit the desired cache amount\\n    while (ns.hacknet.getNodeStats(nodeIndex).cache < desiredCache) {\\n        var cost = ns.hacknet.getCacheUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cache\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a cache upgrade\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCache(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/server_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n    \\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n    hackingTarget : \\\"max-hardware\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n\\t\\t\\tns.killall(thisServer.name);\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/kill_all-ns2.js\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : true, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_nameDump : false,\\n\\ttestEnabled_nameAndPortsDump : false, \\n    testEnabled_dataDump : false,\\n    testEnabled_testScanArrayDump : false,\\n    testEnabled_sortByRequiredHackShowMaxMoney : true,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n    \\n\\t// - Tests ----------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.print(\\\"Starting main function\\\");\\n}\\n\\n// ===== FUNCTIONS ============\\nexport async function buildServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport async function buildHackableServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tif (returnedServerInfo[i].isHackable === true) {\\n\\t\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t\\t}\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport function getTargetInfo(ns, target, parent, depth) {\\n\\t//ns.print(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetIsHacknet = target.startsWith(\\\"hacknet\\\");\\n    var targetInfo;\\n\\t\\n\\tif (target.name === \\\"home\\\") {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsHacknet) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHacknet : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t};\\n\\t}\\n\\telse {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisHackable : true,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\t\\n\\treturn targetInfo;\\n}\\n\\nexport async function processScanResultsRecursive(ns, serverListArray, parentServer, calledDepth) {\\n\\t// ns.print(\\\"---- Calling processScanResultsRecursive @ depth \\\" + calledDepth + \\\" ----\\\"); //DEBUG\\n\\tvar currentDepth = calledDepth + 1;\\n\\t\\n\\tvar returningTargetInfoArray = [];\\n\\t// Loop over all elements of serverListArray\\n\\tfor (var i = 0; i < serverListArray.length; i++) {\\n\\t\\tvar currentServerName = serverListArray[i];\\n\\t\\n\\t\\t// assign it's data to the array we're going to return\\n\\t\\treturningTargetInfoArray.push(getTargetInfo(ns, currentServerName, parentServer.name, currentDepth));\\n\\t\\t\\n\\t\\t// scan for more servers\\n\\t\\tvar neighboringServerArray = ns.scan(currentServerName);\\n\\t\\t// ns.print(\\\"== dumping neighboring servers pre-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, neighboringServerArray); //DEBUG\\n\\t\\t\\n\\t\\t// remove the parent from the list\\n\\t\\tvar parentNeighborIndex;\\n\\t\\t\\n\\t\\tfor (var j = 0; j < neighboringServerArray.length; j++) {\\n\\t\\t\\tif (neighboringServerArray[j] === parentServer.name) {\\n\\t\\t\\t\\tparentNeighborIndex = j;\\n\\t\\t\\t}\\n\\t\\t\\t// await ns.sleep(100);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// ns.print(\\\"parentNeighborIndex: \\\" + parentNeighborIndex); //DEBUG\\n\\t\\tvar childServerArray = neighboringServerArray;\\n\\t\\tchildServerArray.splice(parentNeighborIndex, 1);\\n\\t\\t\\n\\t\\t// ns.print(\\\"== dumping childServerArray servers post-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, childServerArray); //DEBUG\\n\\t\\t// ns.print(\\\"== childServerArray.length: \\\" + childServerArray.length); //DEBUG\\n\\t\\t\\n\\t\\t// call process scan results for the children\\n\\t\\tvar childServerInfoArray;\\n\\t\\t\\n\\t\\tif (childServerArray.length !== 0) {\\n\\t\\t\\t// ns.print(\\\"Attempting to call processScanResultsRecursive again\\\"); //DEBUG\\n\\t\\t\\tchildServerInfoArray = await processScanResultsRecursive(ns, childServerArray, getTargetInfo(ns, currentServerName, parentServer.name, currentDepth), currentDepth);\\n\\t\\t\\t// ns.print(\\\"childServerInfoArray.length :\\\" + childServerInfoArray.length); //DEBUG\\n\\t\\t\\t\\n\\t\\t\\t// push all the results from the children into the array\\n\\t\\t\\tfor (var k = 0; k < childServerInfoArray.length; k++) {\\n\\t\\t\\t\\treturningTargetInfoArray.push(childServerInfoArray[k]);\\n\\t\\t\\t\\t// await ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t// ns.print(\\\"== Skipped Recursion ===\\\"); //DEBUG\\n\\t\\t}\\n\\t\\t\\n\\t\\t// await ns.sleep(100);\\n\\t}\\n\\t\\n\\treturn returningTargetInfoArray;\\n}\\n\\n// ===== TESTS ================\\nasync function executeTests(ns) {\\n    var serverInfoArray = await buildServerInfoArray(ns);\\n\\n    if (tests.testEnabled_nameDump) { testNameDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_nameAndPortsDump) { testNameAndPortsDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_dataDump) { testDataDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_testScanArrayDump) { testScanArrayDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_sortByRequiredHackShowMaxMoney) { test_sortByRequiredHackShowMaxMoney(ns, serverInfoArray); }\\n}\\n\\nfunction testNameDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tns.print(serverInfoArray[i].name);\\n\\t}\\n} \\n\\nfunction testNameAndPortsDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameAndPortsDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"/Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testDataDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testDataDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"    /    Parent: \\\" + serverInfoArray[i].parent + \\\"    /    Depth: \\\" + serverInfoArray[i].depth + \\\"    /    Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testScanArrayDump(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: testScanArrayDump ====\\\");\\n\\tfor (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.print(\\\"Index: \\\" + i + \\\"/SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\nfunction test_sortByRequiredHackShowMaxMoney(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: test_sortByRequiredHackShowMaxMoney ====\\\");\\n    \\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / numPortsRequired: \\\" + serverListArray[i].numPortsRequired + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\",\"filename\":\"/master/functions/buildServerInfoArray-ns2.js\",\"module\":\"\",\"ramUsage\":2.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getEnumPortIndexVersion (version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns1.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n    \\n    var hackablePortNumber = getNumOpenablePorts(ns);\\n\\n    // figure out how many ports I can steal\\n    // build get the list of servers\\n    // based on how many ports I can open, use the install and run script    \\n\\n    ns.print(hackablePortNumber);\\n}\\n\\n// ========= FUNCTIONS ========= \\nexport function getNumOpenablePorts(ns) {\\n    var numOpenablePorts = 0;\\n    \\n    if(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    \\n    return numOpenablePorts;\\n}\\n\\n// =========== TESTS ===========\",\"filename\":\"/master/functions/getNumOpenablePorts-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getRootAccess (ns, target)\\n{\\n\\tif (ns.hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(target);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(target);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(target);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(target);\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        ns.nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns2.js\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args\\nvar destServ = args[0];\\nvar hackTargetServ = args[1];\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/master/functions/getRootAccess-ns1.script\\\",\\n    \\\"/master/hacking/advanced/run-ns1.script\\\",\\n    \\\"/master/hacking/helpers/grow_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/hack_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/weaken_target-ns1.script\\\"\\n    ];\\n\\nvar primaryScript = \\\"/master/hacking/advanced/run-ns1.script\\\";\\n\\nvar sourceServer = \\\"home\\\";\\n\\nscp(scripts, sourceServer, destServ);\\nexec(primaryScript, destServ, 1, hackTargetServ);\",\"filename\":\"/master/hacking/advanced/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/master/hacking/helpers/hack_target-ns1.script\\\";\\nvar growScript = \\\"/master/hacking/helpers/grow_target-ns1.script\\\";\\nvar weakenScript = \\\"/master/hacking/helpers/weaken_target-ns1.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/master/hacking/advanced/run-ns1.script\",\"module\":\"\",\"ramUsage\":4.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Get root access on the destServ & hackTargetServ\\n\\tgetRootAccess(sArgs.destServ);\\n\\tgetRootAccess(sArgs.hackTargetServ);\\n\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\tif (threadCount <= 0) {\\n\\t\\ttprint(\\\"ERROR: Desired thread count to low to run exec()! threadCount: \\\" + threadCount + \\\", sArgs.destServ: \\\" + sArgs.destServ)\\n\\t\\texit();\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":4.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"harakiri-sushi\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_harakiri-sushi-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"joesguns\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_joesguns-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_template-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\ngrow(serv);\",\"filename\":\"/master/hacking/helpers/grow_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nhack(serv);\",\"filename\":\"/master/hacking/helpers/hack_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nweaken(serv);\",\"filename\":\"/master/hacking/helpers/weaken_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/deploy-ns1.script\",\"module\":\"\",\"ramUsage\":4.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/killall_and_deploy-ns1.script\",\"module\":\"\",\"ramUsage\":5.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n}\",\"filename\":\"/master/pserv/killall-ns1.script\",\"module\":\"\",\"ramUsage\":4.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\n\\n// ========== VARS ============\\nvar sVars = {\\n    // Array of all servers that don't need any ports opened to gain root access. These have 16 GB of RAM\\n    servers0Port: [\\\"foodnstuff\\\",\\n        \\\"sigma-cosmetics\\\",\\n        \\\"joesguns\\\",\\n        \\\"nectar-net\\\",\\n        \\\"hong-fang-tea\\\",\\n        \\\"harakiri-sushi\\\"\\n    ],\\n\\n    // Array of all servers that only need 1 port opened to gain root access. These have 32 GB of RAM\\n    servers1Port: [\\\"neo-net\\\",\\n        \\\"zer0\\\",\\n        \\\"max-hardware\\\",\\n        \\\"iron-gym\\\"\\n    ],\\n\\n    // Script to use for our basic hacks\\n    basicHackingScript: \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n    basicHackingScriptTarget: \\\"joesguns\\\",\\n\\n    // PSERV settings\\n    pservStartingRamAmount: 8,\\n    pservHackTarget: \\\"joesguns\\\",\\n\\n    // home hacking  settings\\n    homeHackTarget: \\\"joesguns\\\",\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ========= FUNCTIONS ========= \\nfunction setup0PortBasicHacks(serverList, hackingScript, hackingScriptTarget) {\\n    // Copy our scripts onto each server that requires 0 ports\\n    // to gain root access. Then use nuke() to gain admin access and\\n    // run the scripts.\\n    for (var i = 0; i < serverList.length; ++i) {\\n        var serv = serverList[i];\\n\\n        nuke(serv);\\n\\n        var waitingToInstall = true;\\n        while(waitingToInstall) {\\n            homeRam = getServerRam(getHostname());\\n            homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n            if (homeFreeRam >= getScriptRam(hackingScript)) {\\n                run(hackingScript, 1, serv, hackingScriptTarget);\\n                waitingToInstall = false;\\n            }\\n        }\\n    }\\n}\\n\\nfunction setup1PortBasicHacks(serverList, hackingScript, hackingScriptTarget) {\\n    // Wait until we acquire the \\\"BruteSSH.exe\\\" program\\n    while (!fileExists(\\\"BruteSSH.exe\\\")) {\\n        sleep(60000);\\n    }\\n\\n    // Copy our scripts onto each server that requires 1 port\\n    // to gain root access. Then use brutessh() and nuke()\\n    // to gain admin access and run the scripts.\\n    for (var i = 0; i < serverList.length; ++i) {\\n        var serv = serverList[i];\\n\\n        brutessh(serv);\\n        nuke(serv);\\n\\n        var waitingToInstall = true;\\n        while(waitingToInstall) {\\n            homeRam = getServerRam(getHostname());\\n            homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n            if (homeFreeRam >= getScriptRam(hackingScript)) {\\n                run(hackingScript, 1, serv, hackingScriptTarget);\\n                waitingToInstall = false;\\n            }\\n        }\\n    }\\n}\\n\\n// ========== LOGIC ==========\\n// For BN-9 when we go back...\\n// run(\\\"/master/character/hacknet/server_autobuy-ns2.js\\\");\\n// run(\\\"/master/character/hacknet/hashmanager-ns2.js\\\");\\n\\nrun(\\\"/master/character/hacknet/node_autobuy-ns2.js\\\");\\nrun(\\\"/master/buy_server/buy_server-ns1.script\\\", 1, sVars.pservHackTarget, sVars.pservStartingRamAmount);\\n// run(\\\"/master/hacking/advanced/run-ns1.script\\\", 1, sVars.homeHackTarget);\\nsetup0PortBasicHacks(sVars.servers0Port, sVars.basicHackingScript, sVars.basicHackingScriptTarget);\\nsetup1PortBasicHacks(sVars.servers1Port, sVars.basicHackingScript, sVars.basicHackingScriptTarget);\",\"filename\":\"/master/restart_run/restart_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/templates/ns2_template.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO\\n// add validation that desiredRam is a power of 2\\n// protect against scripts failing to install/launch on the new server\\n// write out info to a log file?\\n\\n// args\\nvar hackTarget = args[0];\\nvar desiredRam = args[1];\\nvar availableCashMod = 0.70;\\nvar ramIncreaseFactor = 16;\\nvar setupScriptName = \\\"/master/hacking/basic/install_and_run-ns1.script\\\";\\n\\nif(desiredRam > getPurchasedServerMaxRam()) {\\n\\ttprint(\\\"buy_server.script: desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.\\\");\\n\\texit();\\n}\\n\\n// loop to buy initial round of servers\\n// while: server count < max servers\\nprint(\\\"DEBUG: server count:\\\" + getPurchasedServers().length);\\nprint(\\\"DEBUG: server limit:\\\" + getPurchasedServerLimit());\\nwhile(getPurchasedServers().length < getPurchasedServerLimit())\\n{\\n    print(\\\"DEBUG: Buying at \\\" + desiredRam +\\\"GB\\\");\\n    \\n    // wait to have enough money to buy\\n    if(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(desiredRam))\\n    {\\n        // create a server name\\n        var servName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n        \\n        // buy a server\\n        var hostname = \\\"\\\"\\n        while (hostname === \\\"\\\") {\\n            while(getServerMoneyAvailable(\\\"home\\\")*availableCashMod < getPurchasedServerCost(desiredRam))\\n            {\\n                print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(desiredRam));\\n                sleep(60*1000);\\n            }\\n            hostname = purchaseServer(servName, desiredRam);\\n        }\\n        \\n        // copy and run script\\n        run(setupScriptName, 1, hostname, hackTarget);\\n    }\\n}\\n\\n//increase the desireRam count as a one off\\ndesiredRam = desiredRam*ramIncreaseFactor;\\n\\n// loop to upgrade servers\\nwhile (desiredRam <= getPurchasedServerMaxRam())\\n{\\n    print(\\\"DEBUG: Buying at \\\" + desiredRam +\\\"GB\\\");\\n    \\n    // call get purchased servers\\n    var purchasedServers = getPurchasedServers();\\n    \\n    for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)\\n    {\\n        var oldHostname = purchasedServers[servIndex];\\n        print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n        \\n        if(getServerRam(oldHostname)[0] < desiredRam)\\n        {\\n            while(getServerMoneyAvailable(\\\"home\\\")*availableCashMod < getPurchasedServerCost(desiredRam))\\n            {\\n                print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(desiredRam));\\n                sleep(60*1000);\\n            }\\n            \\n            // kill all scripts on the old server\\n            print(\\\"DEBUG: Killing all scripts on: \\\" + oldHostname);\\n            killall(oldHostname);\\n            sleep(10000);\\n            \\n            // delete the old server\\n            print(\\\"DEBUG: Deleting: \\\" + oldHostname);\\n            deleteServer(oldHostname);\\n            \\n            // buy a server\\n            var servName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n            var newHostname = \\\"\\\"\\n\\n            while (newHostname === \\\"\\\") {\\n                while(getServerMoneyAvailable(\\\"home\\\")*availableCashMod < getPurchasedServerCost(desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(desiredRam));\\n                    sleep(60*1000);\\n                }\\n                newHostname = purchaseServer(servName, desiredRam);\\n                sleep(1000);\\n            }\\n            print(\\\"DEBUG: New server named: \\\" + newHostname);\\n            \\n            // copy and run scripts\\n            run(setupScriptName, 1, newHostname, hackTarget);\\n        }\\n    }\\n    \\n    // increase ram for the next loop\\n    desiredRam = desiredRam*ramIncreaseFactor;\\n    \\n}\\n\\n\\n// Useful functions:\\n// ==================\\n// getPurchasedServers - array of servers that you won\\n// getPurchasedServerLimit - max number of servers you can purchase\\n// getPurchasedServerCost - cost of a server based on a RAM amount\\n// getPurchasedServerMaxRam - max ram you can purchse\\n// purchaseServer(name, RAM) - buys a server with the specified RAM\\n// getServerRam - returns max ram, used ram\\n// getServerMoneyAvailable(\\\"home\\\")\\n// ==================\",\"filename\":\"/master/buy_server/buy_server-ns1.script\",\"module\":\"\",\"ramUsage\":10.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns)\\n{\\n    var sArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return sArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n          thisServer.isHacknet === false &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n            var waitingToInstall = true;\\n            while(waitingToInstall) {\\n                var homeRam = ns.getServerRam(ns.getHostname());\\n                var homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n                if (homeFreeRam >= ns.getScriptRam(sVars.installScript)) {\\n                    ns.run(sVars.installScript, 1, thisServer.name, sArgs.hackingTarget);\\n                    waitingToInstall = false;\\n                }\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/server_steal_basic-ns2.js\",\"module\":\"\",\"ramUsage\":4.3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEnumPortIndexVersion(version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tscanFrequency : 60 * 1000, // 60 seconds in milliseconds\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_serverArrayBuilder : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Build server lists\\n\\tvar hackableServerListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tvar deployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\n\\t// Establish initial target & deploy the hackbots\\n\\tns.print(\\\"Picking initial target and deploying the hackbots\\\");\\n\\tvar primaryHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET); // Could start out as NULL PORT DATA\\n\\tif(primaryHackTarget !== \\\"NULL PORT DATA\\\") {\\n\\t\\tawait deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\t}\\n\\t\\n\\n\\t// Sort the server list by money, high -> low\\n    hackableServerListArray.sort(function(a, b) {\\n        return b.maxMoney - a.maxMoney;\\n    });\\n\\n\\t// Start loopin' to find & update target\\n\\twhile(true) {\\n\\t\\tns.print(\\\"Scanning for a new target...\\\");\\n\\t\\tvar currentBestTarget = getBestHackableTarget(ns, hackableServerListArray);\\n\\n\\t\\t// If the best option is different from our current option, update the port\\n\\t\\tif (currentBestTarget !== primaryHackTarget)\\n\\t\\t{\\n\\t\\t\\tns.print(\\\"Updating primaryHackTarget to: \\\" + currentBestTarget);\\n\\t\\t\\tprimaryHackTarget = currentBestTarget;\\n\\t\\t\\tns.clear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\t\\t\\tns.write(ePortIndex.PRIMARY_HACKING_TARGET, currentBestTarget);\\n\\n\\t\\t\\t// Re-deploy the hackbots at the new target\\n\\t\\t\\tawait deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\n\\t\\t}\\n\\n\\t\\t// Sleep for like...a minute or something.\\n\\t\\tawait ns.sleep(sVars.scanFrequency);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getBestHackableTarget(ns, serverListArray) {\\n\\t// Figure out my hacking ability & port opening ability\\n\\tvar hackingSkillLevel = ns.getHackingLevel();\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\t// Iterate thru the list, finding the first option that can be hacked (skill & ports opening\\n\\tfor (var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i];\\n\\n\\t\\tif(hackingSkillLevel >= server.requiredHackingLevel && portBreakingLevel >= server.numPortsRequired) {\\n\\t\\t\\treturn server.name;\\n\\t\\t}\\n\\t}\\n}\\n\\nasync function deployHackBots(ns, deployServerListArray, hackTargetServer) {\\n\\tns.print(\\\"Beggining to deploy the hackbots! Targeting: \\\" + hackTargetServer);\\n\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\tfor (var i = 0; i < deployServerListArray.length; i++) {\\n\\t\\tvar deployServer = deployServerListArray[i];\\n\\t\\tns.print(\\\"Evaluating server: \\\" + deployServer.name);\\n\\n\\t\\tif (portBreakingLevel >= deployServer.numPortsRequired) {\\n\\t\\t\\tns.print(\\\"Preparing to deploy the hackBots to: \\\" + deployServer.name);\\n\\t\\t\\tgra.getRootAccess(ns, deployServer.name);\\n\\n\\t\\t\\t// ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n\\t\\t\\twhile (!ns.killall(deployServer.name)) {\\n\\t\\t\\t\\tns.print(\\\"Sleeping after trying to killall on \\\" + deployServer.name);\\n\\t\\t\\t\\tns.sleep(1000);\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar hackHelperScript = \\\"/master/hacking/helpers/hack_target_loop-ns1.script\\\";\\n\\t\\t\\tvar growHelperScript = \\\"/master/hacking/helpers/grow_target_loop-ns1.script\\\";\\n\\t\\t\\tvar weakenHelperScript = \\\"/master/hacking/helpers/weaken_target_loop-ns1.script\\\";\\n\\n\\t\\t\\tvar freeRam = gsr.getServerRamObject.freeRam;\\n\\t\\t\\tvar ramPerHelperThread = 1.7;\\n\\t\\t\\tvar hackThreads = 1;\\n\\t\\t\\tvar weakenAndGrowRamPool = freeRam - (hackThreads * ramPerHelperThread); // Reserved for 1 hack thread\\n\\t\\t\\tvar weakenAndGrowAvailableThreads = weakenAndGrowRamPool / ramPerHelperThread;\\n\\t\\t\\tvar weakenThreads = Math.ceil(weakenAndGrowAvailableThreads / 10);\\n\\t\\t\\tvar growAvailableRamPool = weakenAndGrowRamPool - (weakenThreads * ramPerHelperThread);\\n\\t\\t\\tvar growThreads = Math.floor(growAvailableRamPool / ramPerHelperThread);\\n\\n\\t\\t\\t// Copy the scripts\\n\\t\\t\\tns.print(\\\"Copying scripts...\\\");\\n\\t\\t\\tns.scp(hackHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\tns.scp(growHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\tns.scp(weakenHelperScript, \\\"home\\\", deployServer.name);\\n\\n\\t\\t\\t// Run the scripts\\n\\t\\t\\tns.print(\\\"Launching the hackbots!\\\");\\n\\t\\t\\tawait ns.exec(weakenHelperScript, deployServer.name, weakenThreads, hackTargetServer);\\n\\t\\t\\tawait ns.exec(growHelperScript, deployServer.name, growThreads, hackTargetServer);\\n\\t\\t\\tawait ns.exec(hackHelperScript, deployServer.name, hackThreads, hackTargetServer);\\n\\t\\t}\\n\\n\\t\\tns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nasync function executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n\\tif (tests.testEnabled_serverArrayBuilder)\\n\\t\\tawait test_serverArrayBuilder(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\nasync function test_serverArrayBuilder(ns) {\\n\\tns.print(\\\"==== TEST: test_serverArrayBuilder ====\\\");\\n\\n\\tvar serverListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tprint(typeof serverListArray);\\n\\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\n/* ===== REFERENCE ==============================\\nns.write()\\nns.trywrite()\\nns.read()\\nns.peek()\\nns.clear()\\n\\t*/\",\"filename\":\"/master/hacking/director-ns2.js\",\"module\":\"\",\"ramUsage\":8.65,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/functions/enumLib-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\nvar portEmpty = \\\"NULL PORT DATA\\\";\\n\\n// ===== ARGS ===================================\\nvar sArgs = {\\n\\tinitialHackTarget : args[0],\\t// Initial to hack\\n};\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\n\\tvar hackTarget = sArgs.initialHackTarget;\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\n\\t// - Real Script Logic ----------------------\\n\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t// Get root access if I don't have it\\n\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\tgetRootAccess(hackTarget);\\n\\t}\\n\\n\\twhile(true) {\\n\\t\\tvar updateResults = updateHackTarget(hackTarget);\\n\\t\\tif(updateResults.updated === true) {\\n\\t\\t\\thackTarget = updateResults.hackTarget;\\n\\t\\t\\tmoneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\t\\t\\tsecurityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t\\t\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\t\\t\\tgetRootAccess(hackTarget);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (getServerSecurityLevel(hackTarget) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(hackTarget);\\n\\t\\t} else if (getServerMoneyAvailable(hackTarget) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(hackTarget);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(hackTarget);\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction updateHackTarget(currentTarget) {\\n\\tvar results = {\\n\\t\\tupdated: false,\\n\\t\\thackTarget: currentTarget,\\n\\t};\\n\\n\\tprimaryHackTarget = peek(ePortIndex.PRIMARY_HACK_TARGET);\\n\\n\\tif(primaryHackTarget !== portEmpty && currentTarget !== primaryHackTarget) {\\n\\n\\t\\tresults.hackTarget = primaryHackTarget;\\n\\t}\\n\\n\\treturn results;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":3.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 64,\\n\\tnodeCoresLimit: 16,\\n\\tmoneySpendLimitPercent: 0.20,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction;\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction;\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/node_autobuy-ns2.js\",\"module\":{},\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg: ns.args[0]\\n    };\\n\\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n    enabled: false, // Master override for all tests\\n    disableMain: false, // Disables all non-testing logic in main\\n    testEnabled_exampleFunction: false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\n    // - Tests ----------------------------------\\n    if (tests.enabled)\\n        executeTests(ns);\\n\\n    // - Early out ------------------------------\\n    if (tests.disableMain) {\\n        ns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n        ns.exit();\\n    }\\n\\n    // - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getServerRamObject(ns, server) {\\n    // Get the server's RAM, total and used\\n    var targetServRam = getServerRam(target);\\n    var targetServTotalRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServTotalRam - targetServUsedRam;\\n\\n    var serverRamObj = {\\n        total: targetServRam,\\n        used: targetServUsedRam,\\n        free: targetServFreeRam,\\n    }\\n\\n    return serverRamObj;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n    ns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/functions/getServerRamObj-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    hack(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}}],\"serversOnNetwork\":[\"62.5.0.9\",\"15.4.7.5\",\"48.8.9.5\",\"21.5.2.0\",\"80.8.7.4\",\"30.2.9.6\",\"28.0.4.9\",\"45.6.1.9\",\"84.3.3.4\",\"46.6.8.1\",\"78.3.6.2\",\"30.4.6.1\",\"34.8.3.3\",\"23.2.3.2\",\"97.2.5.2\",\"19.4.8.4\",\"58.1.4.5\",\"3.9.0.7\",\"89.5.5.6\",\"92.8.3.8\",\"0.7.0.0\",\"87.5.4.3\",\"33.9.5.3\",\"23.5.8.9\",\"8.2.2.9\",\"59.1.5.8\",\"69.7.2.8\",\"39.6.0.2\",\"83.8.7.2\",\"58.5.5.3\",\"93.3.9.1\",\"75.3.5.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"// TODO Create a file copying script, assuming the libraries allow it\\n// TODO Create a script for buying up hacknet nodes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/configs/hack_target.txt\",\"text\":\"harakiri-sushi\"}}],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"24.0.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"24.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.3.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":50598498635,\"moneyMax\":1264962465875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1329,\"serverGrowth\":99}},\"53.7.2.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"53.7.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"80.0.8.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":44332755629,\"moneyMax\":1108318890725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1332,\"serverGrowth\":99}},\"56.3.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"56.3.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.0.4.3\",\"24.0.4.3\",\"34.9.9.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":81,\"hackDifficulty\":81,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":18226900532,\"moneyMax\":455672513300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":931,\"serverGrowth\":72}},\"98.2.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"98.2.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.0.4.3\",\"85.9.3.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":97,\"hackDifficulty\":97,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":18456762274,\"moneyMax\":461419056850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":921,\"serverGrowth\":83}},\"82.0.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"82.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"New World Order\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.0.4.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":29135426002,\"moneyMax\":728385650050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1038,\"serverGrowth\":93}},\"80.0.8.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"80.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.0.4.3\",\"53.7.2.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":48,\"hackDifficulty\":48,\"manuallyHacked\":false,\"minDifficulty\":16,\"moneyAvailable\":19639003290,\"moneyMax\":490975082250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1050,\"serverGrowth\":72}},\"50.0.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"50.0.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"41.3.3.3\",\"82.0.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":14268991896,\"moneyMax\":356724797400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":976,\"serverGrowth\":99}},\"83.9.6.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"83.9.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"FourSigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.5.6.1\",\"84.7.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":75,\"hackDifficulty\":75,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":21101973227,\"moneyMax\":527549330675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1172,\"serverGrowth\":75}},\"70.0.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"70.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.5.6.1\",\"56.3.8.1\",\"98.2.7.3\",\"80.0.8.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":96,\"hackDifficulty\":96,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":26440525011,\"moneyMax\":661013125275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":959,\"serverGrowth\":93}},\"79.5.6.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"79.5.6.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"0.4.5.0\",\"83.9.6.0\",\"70.0.4.3\",\"10.1.8.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":85,\"hackDifficulty\":85,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":1718924619,\"moneyMax\":42973115475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1090,\"serverGrowth\":94}},\"85.9.3.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"85.9.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies Assets\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.2.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1335,\"serverGrowth\":1}},\"50.0.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"50.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"0.4.5.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":1154504445,\"moneyMax\":28862611125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":942,\"serverGrowth\":91}},\"6.0.8.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"6.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.3.4.9\",\"94.5.8.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":92,\"hackDifficulty\":92,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":851720980,\"moneyMax\":21293024500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":928,\"serverGrowth\":65}},\"94.5.8.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"94.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"6.0.8.4\",\"0.4.5.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":85,\"hackDifficulty\":85,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":797244899,\"moneyMax\":19931122475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":942,\"serverGrowth\":39}},\"41.3.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"41.3.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"3.2.6.9\",\"50.0.4.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":91,\"hackDifficulty\":91,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":638022789,\"moneyMax\":15950569725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":855,\"serverGrowth\":77}},\"36.6.7.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"36.6.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.8.4.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":88,\"hackDifficulty\":88,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":730615839,\"moneyMax\":18265395975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":813,\"serverGrowth\":74}},\"73.2.8.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"73.2.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"83.0.1.5\",\"13.0.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":95,\"hackDifficulty\":95,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":914170876,\"moneyMax\":22854271900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":899,\"serverGrowth\":91}},\"23.1.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"23.1.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"83.0.1.5\",\"62.7.5.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":84,\"hackDifficulty\":84,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":1179258662,\"moneyMax\":29481466550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":801,\"serverGrowth\":88}},\"0.4.5.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"0.4.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"94.5.8.7\",\"79.5.6.1\",\"50.0.7.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":74,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":841525709,\"moneyMax\":21038142725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":852,\"serverGrowth\":74}},\"3.2.6.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"3.2.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"13.0.4.0\",\"41.3.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":623881119,\"moneyMax\":15597027975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":816,\"serverGrowth\":87}},\"13.0.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"13.0.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"73.2.8.7\",\"3.2.6.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":71,\"hackDifficulty\":71,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":851037872,\"moneyMax\":21275946800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":904,\"serverGrowth\":70}},\"1.2.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"1.2.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"2.6.6.6\",\"87.4.8.6\",\"62.3.4.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":64,\"hackDifficulty\":64,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":805540437,\"moneyMax\":20138510925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":851,\"serverGrowth\":81}},\"42.8.5.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"42.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"8.8.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":1116000687,\"moneyMax\":27900017175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":915,\"serverGrowth\":62}},\"87.4.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"87.4.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.2.1.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":86,\"hackDifficulty\":86,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":910848060,\"moneyMax\":22771201500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":69}},\"62.7.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"62.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"23.1.6.3\",\"75.8.4.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":61,\"hackDifficulty\":61,\"manuallyHacked\":false,\"minDifficulty\":20,\"moneyAvailable\":1067365576,\"moneyMax\":26684139400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":784,\"serverGrowth\":68}},\"29.7.6.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"29.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"26.1.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":895068973,\"moneyMax\":22376724325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":797,\"serverGrowth\":75}},\"31.3.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"31.3.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"83.0.1.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":843803479,\"moneyMax\":21095086975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":818,\"serverGrowth\":70}},\"83.0.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"83.0.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Delta One\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"59.8.4.0\",\"73.2.8.7\",\"23.1.6.3\",\"31.3.9.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":1506894644,\"moneyMax\":37672366100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":873,\"serverGrowth\":61}},\"59.8.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"59.8.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"43.6.0.1\",\"83.0.1.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":1602403018,\"moneyMax\":40060075450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":784,\"serverGrowth\":88}},\"26.1.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"26.1.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"17.5.3.2\",\"29.7.6.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":64,\"hackDifficulty\":64,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":1146277874,\"moneyMax\":28656946850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":785,\"serverGrowth\":68}},\"17.5.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"17.5.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.3.4.9\",\"26.1.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":1383510072,\"moneyMax\":34587751800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":848,\"serverGrowth\":72}},\"62.3.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"62.3.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.2.1.3\",\"6.0.8.4\",\"17.5.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":75,\"hackDifficulty\":75,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1014300794,\"moneyMax\":25357519850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":814,\"serverGrowth\":71}},\"6.9.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"6.9.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Lexo Corporation\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"90.0.2.0\",\"74.7.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":729685039,\"moneyMax\":18242125975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":669,\"serverGrowth\":60}},\"82.1.5.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"82.1.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"22.6.9.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":51,\"hackDifficulty\":51,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":579611194,\"moneyMax\":14490279850,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":512,\"serverGrowth\":57}},\"43.6.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"43.6.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"80.9.6.8\",\"59.8.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":656806927,\"moneyMax\":16420173175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":597,\"serverGrowth\":60}},\"8.8.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"8.8.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"22.6.9.0\",\"42.8.5.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":260525513,\"moneyMax\":6513137825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":416,\"serverGrowth\":50}},\"90.0.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"90.0.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.9.8.1\",\"6.9.6.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":45,\"hackDifficulty\":45,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":235172972,\"moneyMax\":5879324300,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":376,\"serverGrowth\":38}},\"80.9.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"80.9.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.9.8.1\",\"43.6.0.1\",\"2.6.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":812607983,\"moneyMax\":20315199575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":752,\"serverGrowth\":83}},\"85.5.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"85.5.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"52.5.3.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":308424888,\"moneyMax\":7710622200,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":463,\"serverGrowth\":57}},\"22.6.9.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"22.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"52.5.3.1\",\"82.1.5.1\",\"8.8.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":67,\"hackDifficulty\":67,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":428383031,\"moneyMax\":10709575775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":628,\"serverGrowth\":70}},\"14.2.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"14.2.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.0.1.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":63,\"hackDifficulty\":63,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":355897973,\"moneyMax\":8897449325,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":426,\"serverGrowth\":42}},\"32.6.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"32.6.0.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"14.9.3.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":44,\"hackDifficulty\":44,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":190824292,\"moneyMax\":4770607300,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":301,\"serverGrowth\":46}},\"52.5.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"52.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"65.9.5.3\",\"85.5.6.4\",\"22.6.9.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":56,\"hackDifficulty\":56,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":239654130,\"moneyMax\":5991353250,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":345,\"serverGrowth\":62}},\"21.4.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"21.4.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Netlink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"65.9.5.3\",\"8.3.1.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":67,\"hackDifficulty\":67,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":379,\"serverGrowth\":61}},\"50.9.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"50.9.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"14.9.3.9\",\"90.0.2.0\",\"80.9.6.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":60,\"hackDifficulty\":60,\"manuallyHacked\":false,\"minDifficulty\":20,\"moneyAvailable\":83414981,\"moneyMax\":2085374525,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":251,\"serverGrowth\":50}},\"62.5.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"62.5.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Food N Stuff Supermarket\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"62.5.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"62.5.0.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"95.3.8.3\",\"79.8.2.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":10,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"15.4.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"15.4.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,72,24]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13.881252095864285,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.05799999999999,\"onlineExpGained\":3913.029706308866,\"onlineMoneyMade\":0,\"onlineRunningTime\":4832.809999997975,\"ramUsage\":2.4,\"server\":\"15.4.7.5\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"15.4.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"15.4.7.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":10,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"48.8.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"48.8.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,72,24]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13.881421932223065,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.06099999999999,\"onlineExpGained\":3913.029706308866,\"onlineMoneyMade\":0,\"onlineRunningTime\":4829.809999997975,\"ramUsage\":2.4,\"server\":\"48.8.9.5\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"48.8.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"48.8.9.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"8.7.7.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"95.3.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"95.3.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,156,52]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30.076745367382955,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.063,\"onlineExpGained\":8478.23103033588,\"onlineMoneyMade\":0,\"onlineRunningTime\":4814.409999997976,\"ramUsage\":2.4,\"server\":\"95.3.8.3\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"95.3.8.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"95.3.8.3\"}}],\"serversOnNetwork\":[\"62.5.0.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"77.7.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"77.7.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,72,24]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13.881574784945974,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.063,\"onlineExpGained\":3913.029706308866,\"onlineMoneyMade\":0,\"onlineRunningTime\":4826.609999997975,\"ramUsage\":2.4,\"server\":\"77.7.6.3\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"77.7.6.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"77.7.6.3\"}}],\"serversOnNetwork\":[\"30.2.9.6\",\"14.9.3.9\",\"78.6.4.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":20,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"58.7.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"58.7.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,156,52]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30.077334133426724,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.065,\"onlineExpGained\":8478.23103033588,\"onlineMoneyMade\":0,\"onlineRunningTime\":4817.409999997976,\"ramUsage\":2.4,\"server\":\"58.7.2.7\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"58.7.2.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"58.7.2.7\"}}],\"serversOnNetwork\":[\"79.8.2.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"65.9.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"65.9.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.8.2.6\",\"52.5.3.1\",\"21.4.3.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"21.5.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"21.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,72,24]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13.881863506755895,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.066,\"onlineExpGained\":3913.029706308866,\"onlineMoneyMade\":0,\"onlineRunningTime\":4823.609999997975,\"ramUsage\":2.4,\"server\":\"21.5.2.0\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"21.5.2.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"21.5.2.0\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"80.8.7.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"80.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,72,24]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13.881897474027655,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.068,\"onlineExpGained\":3913.029706308866,\"onlineMoneyMade\":0,\"onlineRunningTime\":4820.409999997975,\"ramUsage\":2.4,\"server\":\"80.8.7.4\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"80.8.7.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"80.8.7.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"14.9.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"14.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"77.7.6.3\",\"32.6.0.4\",\"50.9.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":20,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"79.8.2.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"79.8.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,156,52]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30.077812505837297,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.071,\"onlineExpGained\":8478.23103033588,\"onlineMoneyMade\":0,\"onlineRunningTime\":4811.409999997976,\"ramUsage\":2.4,\"server\":\"79.8.2.6\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"79.8.2.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"79.8.2.6\"}}],\"serversOnNetwork\":[\"62.5.0.9\",\"58.7.2.7\",\"65.9.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"78.6.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"78.6.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"77.7.6.3\",\"91.5.8.2\",\"70.0.1.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":34,\"hackDifficulty\":34,\"manuallyHacked\":false,\"minDifficulty\":11,\"moneyAvailable\":67710849,\"moneyMax\":1692771225,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":200,\"serverGrowth\":32}},\"91.5.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"91.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"78.6.4.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":43,\"hackDifficulty\":43,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":40369401,\"moneyMax\":1009235025,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":253,\"serverGrowth\":28}},\"30.2.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"30.2.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,156,52]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30.078401271881066,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.073,\"onlineExpGained\":8478.23103033588,\"onlineMoneyMade\":0,\"onlineRunningTime\":4808.209999997976,\"ramUsage\":2.4,\"server\":\"30.2.9.6\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"30.2.9.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"30.2.9.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"77.7.6.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":15.019999999999994,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":72493397.31284188,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"2.6.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"2.6.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"80.9.6.8\",\"1.2.1.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":52,\"hackDifficulty\":52,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":499,\"serverGrowth\":30}},\"84.7.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-994342.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"131129187215\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"84.7.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"83.9.6.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":56,\"hackDifficulty\":56,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":958,\"serverGrowth\":58}},\"74.7.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"74.7.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"6.9.6.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":50,\"hackDifficulty\":50,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":741,\"serverGrowth\":45}},\"75.8.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"75.8.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"62.7.5.5\",\"36.6.7.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":507,\"serverGrowth\":0}},\"8.3.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"8.3.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"21.4.3.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":358,\"serverGrowth\":0}},\"70.0.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"70.0.1.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"78.6.4.3\",\"14.2.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\"10.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"10.1.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.5.6.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":548,\"serverGrowth\":0}},\"8.7.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"8.7.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"48.8.9.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"34.9.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"34.9.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.3.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"69.9.1.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"69.9.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"28.0.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB\",\"httpPortOpen\":false,\"ip\":\"28.0.4.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,12]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.941254442459632,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.07600000000001,\"onlineExpGained\":1956.514853154433,\"onlineMoneyMade\":0,\"onlineRunningTime\":4834.009999997975,\"ramUsage\":2.4,\"server\":\"28.0.4.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"28.0.4.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"28.0.4.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"45.6.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-0\",\"httpPortOpen\":false,\"ip\":\"45.6.1.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,12]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.941254442459632,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.07600000000001,\"onlineExpGained\":1956.514853154433,\"onlineMoneyMade\":0,\"onlineRunningTime\":4832.809999997975,\"ramUsage\":2.4,\"server\":\"45.6.1.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"45.6.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"45.6.1.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"84.3.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-1\",\"httpPortOpen\":false,\"ip\":\"84.3.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032069462998555,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.077,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":3942.4099999983805,\"ramUsage\":2.4,\"server\":\"84.3.3.4\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"84.3.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"84.3.3.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.6.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-2\",\"httpPortOpen\":false,\"ip\":\"46.6.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032069462998555,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.077,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":3833.009999998505,\"ramUsage\":2.4,\"server\":\"46.6.8.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"46.6.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"46.6.8.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"78.3.6.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-3\",\"httpPortOpen\":false,\"ip\":\"78.3.6.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032069462998553,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.077,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":3641.0099999987233,\"ramUsage\":2.4,\"server\":\"78.3.6.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"78.3.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"78.3.6.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"30.4.6.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-4\",\"httpPortOpen\":false,\"ip\":\"30.4.6.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032128905724126,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.07799999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":3641.0099999987233,\"ramUsage\":2.4,\"server\":\"30.4.6.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"30.4.6.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"30.4.6.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"34.8.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-5\",\"httpPortOpen\":false,\"ip\":\"34.8.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032188348449701,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.079,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":3385.009999999014,\"ramUsage\":2.4,\"server\":\"34.8.3.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"34.8.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"34.8.3.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"23.2.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-6\",\"httpPortOpen\":false,\"ip\":\"23.2.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,9]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.486797821816118,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08,\"onlineExpGained\":1834.232674832281,\"onlineMoneyMade\":0,\"onlineRunningTime\":3385.009999999014,\"ramUsage\":2.4,\"server\":\"23.2.3.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"23.2.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"23.2.3.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"97.2.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-7\",\"httpPortOpen\":false,\"ip\":\"97.2.5.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.0321883484497,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.082,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2529.209999999924,\"ramUsage\":2.4,\"server\":\"97.2.5.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"97.2.5.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"97.2.5.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"19.4.8.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-8\",\"httpPortOpen\":false,\"ip\":\"19.4.8.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032307233900847,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08399999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2465.209999999979,\"ramUsage\":2.4,\"server\":\"19.4.8.4\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"19.4.8.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"19.4.8.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"58.1.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-9\",\"httpPortOpen\":false,\"ip\":\"58.1.4.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032307233900847,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08399999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2337.2100000000905,\"ramUsage\":2.4,\"server\":\"58.1.4.5\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"58.1.4.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"58.1.4.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"3.9.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-10\",\"httpPortOpen\":false,\"ip\":\"3.9.0.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032307233900846,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08399999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2236.8100000001828,\"ramUsage\":2.4,\"server\":\"3.9.0.7\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"3.9.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"3.9.0.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"89.5.5.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-11\",\"httpPortOpen\":false,\"ip\":\"89.5.5.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032426119351994,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.086,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2234.410000000185,\"ramUsage\":2.4,\"server\":\"89.5.5.6\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"89.5.5.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"89.5.5.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"92.8.3.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-12\",\"httpPortOpen\":false,\"ip\":\"92.8.3.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032426119351993,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.086,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2232.210000000187,\"ramUsage\":2.4,\"server\":\"92.8.3.8\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"92.8.3.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"92.8.3.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"0.7.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-13\",\"httpPortOpen\":false,\"ip\":\"0.7.0.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032426119351993,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.086,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2227.4100000001913,\"ramUsage\":2.4,\"server\":\"0.7.0.0\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"0.7.0.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"0.7.0.0\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"87.5.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-14\",\"httpPortOpen\":false,\"ip\":\"87.5.4.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032485562077567,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.088,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2224.210000000194,\"ramUsage\":2.4,\"server\":\"87.5.4.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"87.5.4.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"87.5.4.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"33.9.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-15\",\"httpPortOpen\":false,\"ip\":\"33.9.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032485562077567,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.089,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2224.210000000194,\"ramUsage\":2.4,\"server\":\"33.9.5.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"33.9.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"33.9.5.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"23.5.8.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-16\",\"httpPortOpen\":false,\"ip\":\"23.5.8.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032485562077567,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08999999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2221.2100000001974,\"ramUsage\":2.4,\"server\":\"23.5.8.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"23.5.8.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"23.5.8.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"8.2.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-17\",\"httpPortOpen\":false,\"ip\":\"8.2.2.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032485562077567,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08999999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2143.210000000268,\"ramUsage\":2.4,\"server\":\"8.2.2.9\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"8.2.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"8.2.2.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"59.1.5.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-18\",\"httpPortOpen\":false,\"ip\":\"59.1.5.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032485562077567,\"offlineMoneyMade\":0,\"offlineRunningTime\":107.08999999999999,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":2062.0100000003094,\"ramUsage\":2.4,\"server\":\"59.1.5.8\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"59.1.5.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"59.1.5.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"69.7.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-19\",\"httpPortOpen\":false,\"ip\":\"69.7.2.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032545004803141,\"offlineMoneyMade\":0,\"offlineRunningTime\":101.495,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":1916.2100000002924,\"ramUsage\":2.4,\"server\":\"69.7.2.8\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"69.7.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"69.7.2.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"39.6.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-20\",\"httpPortOpen\":false,\"ip\":\"39.6.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6.032545004803141,\"offlineMoneyMade\":0,\"offlineRunningTime\":101.495,\"onlineExpGained\":1711.950496510129,\"onlineMoneyMade\":0,\"onlineRunningTime\":1844.210000000276,\"ramUsage\":2.4,\"server\":\"39.6.0.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"39.6.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"39.6.0.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"83.8.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-21\",\"httpPortOpen\":false,\"ip\":\"83.8.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,33,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5.601704129848091,\"offlineMoneyMade\":0,\"offlineRunningTime\":101.49600000000001,\"onlineExpGained\":1589.6683181879769,\"onlineMoneyMade\":0,\"onlineRunningTime\":1763.4100000002577,\"ramUsage\":2.4,\"server\":\"83.8.7.2\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"83.8.7.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"83.8.7.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"58.5.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-22\",\"httpPortOpen\":false,\"ip\":\"58.5.5.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,33,6]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5.601704129848091,\"offlineMoneyMade\":0,\"offlineRunningTime\":101.49600000000001,\"onlineExpGained\":1589.6683181879769,\"onlineMoneyMade\":0,\"onlineRunningTime\":1685.21000000024,\"ramUsage\":2.4,\"server\":\"58.5.5.3\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"58.5.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"58.5.5.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"93.3.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8GB-23\",\"httpPortOpen\":false,\"ip\":\"93.3.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"30.2.9.6\":[0,0,36,3]},\"filename\":\"/master/hacking/basic/run-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5.601704129848091,\"offlineMoneyMade\":0,\"offlineRunningTime\":101.49600000000001,\"onlineExpGained\":1589.6683181879769,\"onlineMoneyMade\":0,\"onlineRunningTime\":1604.2100000002215,\"ramUsage\":2.4,\"server\":\"93.3.9.1\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"93.3.9.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"93.3.9.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"75.3.5.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"75.3.5.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":83,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":109,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":112,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":58,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":25,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":78,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":29,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"85.9.3.7\",\"BitRunners Server\":\"75.8.4.9\",\"The Black Hand Server\":\"8.3.1.7\",\"NiteSec Server\":\"70.0.1.9\",\"The Dark Army Server\":\"10.1.8.4\",\"CyberSec Server\":\"8.7.7.2\",\"Daedalus Server\":\"34.9.9.2\",\"w0r1d_d43m0n\":\"69.9.1.1\",\"Darkweb Server\":\"75.3.5.0\"}}","AliasesSave":"{\"dir\":\"ls\",\"nuke\":\"run NUKE.exe\",\"ssh\":\"run BruteSSH.exe\",\"sql\":\"run SQLInject.exe\",\"ftp\":\"run FTPCrack.exe\",\"http\":\"run HTTPWorm.exe\",\"smtp\":\"run relaySMTP.exe\",\"pull\":\"run pull/pull-ns2.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":16975.492530301184,\"lastPrice\":16927.21935644342,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":18.153257793842652,\"cap\":59030718,\"spreadPerc\":0.3,\"priceMovementPerc\":0.19999999999999998,\"shareTxForMovement\":58368,\"shareTxUntilMovementDown\":58368,\"shareTxUntilMovementUp\":58368,\"totalShares\":107900000,\"maxShares\":21600000,\"shareTxUntilMovement\":58368}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":32417.566249748415,\"lastPrice\":32513.94889925848,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":18.19518183973511,\"cap\":652494315,\"spreadPerc\":0.1,\"priceMovementPerc\":0.07142857142857144,\"shareTxForMovement\":50325,\"shareTxUntilMovementDown\":50325,\"shareTxUntilMovementUp\":50325,\"totalShares\":73700000,\"maxShares\":14700000,\"shareTxUntilMovement\":50325}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":26844.00869049798,\"lastPrice\":26715.946762997646,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":12.027174986547942,\"cap\":319763692,\"spreadPerc\":0.4,\"priceMovementPerc\":0.19047619047619047,\"shareTxForMovement\":78280,\"shareTxUntilMovementDown\":78280,\"shareTxUntilMovementUp\":78280,\"totalShares\":73800000,\"maxShares\":14800000,\"shareTxUntilMovement\":78280}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":30649.158290722757,\"lastPrice\":30515.842915105633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":13.84372628479679,\"cap\":209434512,\"spreadPerc\":0.4,\"priceMovementPerc\":0.1739130434782609,\"shareTxForMovement\":47857,\"shareTxUntilMovementDown\":47857,\"shareTxUntilMovementUp\":47857,\"totalShares\":65600000,\"maxShares\":13100000,\"shareTxUntilMovement\":47857}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":28117.858297717903,\"lastPrice\":28223.6365290261,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":13.605045194003974,\"cap\":605526255,\"spreadPerc\":0.6,\"priceMovementPerc\":0.2142857142857143,\"shareTxForMovement\":37899,\"shareTxUntilMovementDown\":37899,\"shareTxUntilMovementUp\":37899,\"totalShares\":49000000,\"maxShares\":9800000,\"shareTxUntilMovement\":37899}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":132127.70797153216,\"lastPrice\":132961.48440208464,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":18.432729884216315,\"cap\":1294594118,\"spreadPerc\":0.2,\"priceMovementPerc\":0.07692307692307693,\"shareTxForMovement\":58626,\"shareTxUntilMovementDown\":58626,\"shareTxUntilMovementUp\":58626,\"totalShares\":30000000,\"maxShares\":6000000,\"shareTxUntilMovement\":58626}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":33546.998648887165,\"lastPrice\":33374.86695504311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":9.102018478717522,\"cap\":137856060,\"spreadPerc\":0.2,\"priceMovementPerc\":0.07407407407407407,\"shareTxForMovement\":66511,\"shareTxUntilMovementDown\":66511,\"shareTxUntilMovementUp\":66511,\"totalShares\":73700000,\"maxShares\":14700000,\"shareTxUntilMovement\":66511}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":39666.622664989845,\"lastPrice\":39972.29161099629,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":14.159725297435637,\"cap\":548491353,\"spreadPerc\":0.6,\"priceMovementPerc\":0.37499999999999994,\"shareTxForMovement\":48145,\"shareTxUntilMovementDown\":48145,\"shareTxUntilMovementUp\":48145,\"totalShares\":62900000,\"maxShares\":12600000,\"shareTxUntilMovement\":48145}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":19078.944120548833,\"lastPrice\":19176.186593702838,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":5.900081866508353,\"cap\":443641221,\"spreadPerc\":0.2,\"priceMovementPerc\":0.08,\"shareTxForMovement\":101348,\"shareTxUntilMovementDown\":101348,\"shareTxUntilMovementUp\":101348,\"totalShares\":51400000,\"maxShares\":10300000,\"shareTxUntilMovement\":101348}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9582.946617710579,\"lastPrice\":9623.067505384266,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":9.59439317438503,\"cap\":124693349,\"spreadPerc\":0.5,\"priceMovementPerc\":0.45454545454545453,\"shareTxForMovement\":93582,\"shareTxUntilMovementDown\":93582,\"shareTxUntilMovementUp\":93582,\"totalShares\":107000000,\"maxShares\":21400000,\"shareTxUntilMovement\":93582}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19500.983698654993,\"lastPrice\":19434.945725901387,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":8.995488119115418,\"cap\":404715627,\"spreadPerc\":0.6,\"priceMovementPerc\":0.4285714285714286,\"shareTxForMovement\":40961,\"shareTxUntilMovementDown\":40961,\"shareTxUntilMovementUp\":40961,\"totalShares\":50800000,\"maxShares\":10200000,\"shareTxUntilMovement\":40961}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11791.182829697673,\"lastPrice\":11735.640540553497,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":9.327143686830722,\"cap\":130631588,\"spreadPerc\":0.5,\"priceMovementPerc\":0.29411764705882354,\"shareTxForMovement\":81685,\"shareTxUntilMovementDown\":81685,\"shareTxUntilMovementUp\":81685,\"totalShares\":99300000,\"maxShares\":19900000,\"shareTxUntilMovement\":81685}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":28085.091955721924,\"lastPrice\":27971.378711625017,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":7.270400626744314,\"cap\":144926485,\"spreadPerc\":0.5,\"priceMovementPerc\":0.2631578947368421,\"shareTxForMovement\":89946,\"shareTxUntilMovementDown\":89946,\"shareTxUntilMovementUp\":89946,\"totalShares\":33800000,\"maxShares\":6800000,\"shareTxUntilMovement\":89946}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":18512.943560876236,\"lastPrice\":18569.10883140161,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":9.830195630661839,\"cap\":70303322,\"spreadPerc\":0.6,\"priceMovementPerc\":0.3,\"shareTxForMovement\":57656,\"shareTxUntilMovementDown\":57656,\"shareTxUntilMovementUp\":57656,\"totalShares\":51900000,\"maxShares\":10400000,\"shareTxUntilMovement\":57656}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":9628.437922661169,\"lastPrice\":9665.8281565898,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.601187841166964,\"cap\":33946989,\"spreadPerc\":0.8,\"priceMovementPerc\":0.27586206896551724,\"shareTxForMovement\":91784,\"shareTxUntilMovementDown\":91784,\"shareTxUntilMovementUp\":91784,\"totalShares\":70700000,\"maxShares\":14100000,\"shareTxUntilMovement\":91784}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":10982.127239364798,\"lastPrice\":11025.440631906029,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":5.296602493942306,\"cap\":85042253,\"spreadPerc\":1,\"priceMovementPerc\":0.3448275862068966,\"shareTxForMovement\":121056,\"shareTxUntilMovementDown\":121056,\"shareTxUntilMovementUp\":121056,\"totalShares\":63200000,\"maxShares\":12600000,\"shareTxUntilMovement\":121056}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":24990.446176739384,\"lastPrice\":24871.226847637492,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.755690652246609,\"cap\":527971100,\"spreadPerc\":0.7,\"priceMovementPerc\":0.5833333333333334,\"shareTxForMovement\":55536,\"shareTxUntilMovementDown\":55536,\"shareTxUntilMovementUp\":55536,\"totalShares\":29700000,\"maxShares\":5900000,\"shareTxUntilMovement\":55536}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":22272.27553558004,\"lastPrice\":22187.460952978807,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":10.764844305922782,\"cap\":364296618,\"spreadPerc\":0.8,\"priceMovementPerc\":0.3478260869565218,\"shareTxForMovement\":86700,\"shareTxUntilMovementDown\":86700,\"shareTxUntilMovementUp\":86700,\"totalShares\":31400000,\"maxShares\":6300000,\"shareTxUntilMovement\":86700}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14063.891583662493,\"lastPrice\":14003.563533567916,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":4.601400541913684,\"cap\":257159034,\"spreadPerc\":0.9,\"priceMovementPerc\":0.6,\"shareTxForMovement\":110661,\"shareTxUntilMovementDown\":110661,\"shareTxUntilMovementUp\":110661,\"totalShares\":38200000,\"maxShares\":7600000,\"shareTxUntilMovement\":110661}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8417.082390126772,\"lastPrice\":8546.294873386481,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":false,\"otlkMag\":2.193555993002129,\"cap\":47164698,\"spreadPerc\":1.1,\"priceMovementPerc\":0.5,\"shareTxForMovement\":30917,\"shareTxUntilMovementDown\":30917,\"shareTxUntilMovementUp\":30917,\"totalShares\":65400000,\"maxShares\":13100000,\"shareTxUntilMovement\":30917}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":10486.645585295988,\"lastPrice\":10567.45513468144,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":5.801540150431579,\"cap\":20951748,\"spreadPerc\":0.8,\"priceMovementPerc\":0.38095238095238093,\"shareTxForMovement\":77343,\"shareTxUntilMovementDown\":77343,\"shareTxUntilMovementUp\":77343,\"totalShares\":45900000,\"maxShares\":9200000,\"shareTxUntilMovement\":77343}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5238.8042720999165,\"lastPrice\":5222.010972995346,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":1.7585211448986517,\"cap\":51609851,\"spreadPerc\":0.7,\"priceMovementPerc\":0.4117647058823529,\"shareTxForMovement\":80097,\"shareTxUntilMovementDown\":80097,\"shareTxUntilMovementUp\":80097,\"totalShares\":37000000,\"maxShares\":7400000,\"shareTxUntilMovement\":80097}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":27991.107702566434,\"lastPrice\":28305.313495158218,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.85,\"b\":true,\"otlkMag\":13.300400524445049,\"cap\":80702904,\"spreadPerc\":0.8,\"priceMovementPerc\":0.3478260869565218,\"shareTxForMovement\":35996,\"shareTxUntilMovementDown\":35996,\"shareTxUntilMovementUp\":35996,\"totalShares\":41900000,\"maxShares\":8400000,\"shareTxUntilMovement\":35996}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6299.906939036661,\"lastPrice\":6240.083706544649,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.58,\"b\":false,\"otlkMag\":4.513792962884919,\"cap\":18008522,\"spreadPerc\":0.9,\"priceMovementPerc\":0.75,\"shareTxForMovement\":40036,\"shareTxUntilMovementDown\":40036,\"shareTxUntilMovementUp\":40036,\"totalShares\":60400000,\"maxShares\":12100000,\"shareTxUntilMovement\":40036}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1283.9982582599928,\"lastPrice\":1276.6393362414412,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.95,\"b\":false,\"otlkMag\":5.120758973357538,\"cap\":19993515,\"spreadPerc\":1.1,\"priceMovementPerc\":0.55,\"shareTxForMovement\":78945,\"shareTxUntilMovementDown\":78945,\"shareTxUntilMovementUp\":78945,\"totalShares\":140900000,\"maxShares\":28200000,\"shareTxUntilMovement\":78945}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1518.016597481816,\"lastPrice\":1480.2924708357605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":4.2,\"b\":true,\"otlkMag\":1.4985068660227328,\"cap\":23639328,\"spreadPerc\":0.7,\"priceMovementPerc\":0.2692307692307692,\"shareTxForMovement\":43455,\"shareTxUntilMovementDown\":43455,\"shareTxUntilMovementUp\":43455,\"totalShares\":48800000,\"maxShares\":9800000,\"shareTxUntilMovement\":43455}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3873.6830077741806,\"lastPrice\":3895.0718779497565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":1.5656795709038107,\"cap\":86744863,\"spreadPerc\":1,\"priceMovementPerc\":0.6666666666666666,\"shareTxForMovement\":47026,\"shareTxUntilMovementDown\":47026,\"shareTxUntilMovementUp\":47026,\"totalShares\":15800000,\"maxShares\":3200000,\"shareTxUntilMovement\":47026}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1692.6469009547632,\"lastPrice\":1700.4524298589506,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":1.2820568281574751,\"cap\":8627387,\"spreadPerc\":0.6,\"priceMovementPerc\":0.2727272727272727,\"shareTxForMovement\":174251,\"shareTxUntilMovementDown\":174251,\"shareTxUntilMovementUp\":174251,\"totalShares\":22200000,\"maxShares\":4400000,\"shareTxUntilMovement\":174251}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":2378.2261673985577,\"lastPrice\":2418.6310229251835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.8,\"b\":false,\"otlkMag\":1.9762899218293821,\"cap\":9827946,\"spreadPerc\":0.8,\"priceMovementPerc\":0.5333333333333333,\"shareTxForMovement\":77389,\"shareTxUntilMovementDown\":77389,\"shareTxUntilMovementUp\":77389,\"totalShares\":19900000,\"maxShares\":4000000,\"shareTxUntilMovement\":77389}},\"Joes Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joes Guns\",\"symbol\":\"JGN\",\"price\":997.1454107700276,\"lastPrice\":975.3085221587102,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.69,\"b\":false,\"otlkMag\":1.728512537625352,\"cap\":28552558,\"spreadPerc\":1.4,\"priceMovementPerc\":0.48275862068965514,\"shareTxForMovement\":28436,\"shareTxUntilMovementDown\":28436,\"shareTxUntilMovementUp\":28436,\"totalShares\":36700000,\"maxShares\":7300000,\"shareTxUntilMovement\":28436}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1408.9291289213677,\"lastPrice\":1397.313657392927,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.37,\"b\":false,\"otlkMag\":13.836064506268224,\"cap\":15896841,\"spreadPerc\":0.8,\"priceMovementPerc\":0.4705882352941177,\"shareTxForMovement\":66117,\"shareTxUntilMovementDown\":66117,\"shareTxUntilMovementUp\":66117,\"totalShares\":142700000,\"maxShares\":28500000,\"shareTxUntilMovement\":66117}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":20304.261620748646,\"lastPrice\":20212.280445892906,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":8.834403261649173,\"cap\":79709815,\"spreadPerc\":0.7,\"priceMovementPerc\":0.7,\"shareTxForMovement\":198190,\"shareTxUntilMovementDown\":198190,\"shareTxUntilMovementUp\":198190,\"totalShares\":23300000,\"maxShares\":4700000,\"shareTxUntilMovement\":198190}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":17266.977517126412,\"lastPrice\":17205.383469891087,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":12.721910676642441,\"cap\":360198828,\"spreadPerc\":0.7,\"priceMovementPerc\":0.2916666666666667,\"shareTxForMovement\":212168,\"shareTxUntilMovementDown\":212168,\"shareTxUntilMovementUp\":212168,\"totalShares\":24800000,\"maxShares\":5000000,\"shareTxUntilMovement\":212168}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":4182,\"lastUpdate\":1558662201169}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableHotkeys\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.47.0\"","AllGangsSave":""}}