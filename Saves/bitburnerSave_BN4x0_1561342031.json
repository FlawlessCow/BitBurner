{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":491,\"hp\":28,\"max_hp\":28,\"strength\":185,\"defense\":185,\"dexterity\":185,\"agility\":185,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.28,\"hacking_speed_mult\":1.28,\"hacking_money_mult\":1.28,\"hacking_grow_mult\":1.28,\"hacking_exp\":84037132.43640228,\"strength_exp\":47496.95999999397,\"defense_exp\":47496.95999999397,\"dexterity_exp\":47496.95999999397,\"agility_exp\":47496.95999999397,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.28,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.7141760000000001,\"hacking_exp_mult\":1.28,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":\"1108962188664.2438734\",\"homeComputer\":\"60.8.2.2\",\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"60.8.2.2\",\"purchasedServers\":[\"95.1.3.8\",\"12.3.4.6\",\"75.8.1.9\",\"39.8.6.4\",\"49.2.3.4\",\"50.7.7.6\",\"89.7.8.1\",\"64.3.1.9\",\"20.9.0.4\",\"19.9.2.9\",\"42.3.0.3\",\"20.3.1.8\",\"82.3.4.1\",\"46.3.6.6\",\"10.8.9.3\",\"53.7.4.1\",\"60.0.4.6\",\"70.8.5.3\",\"20.0.2.9\",\"3.9.3.3\",\"97.4.1.3\",\"68.7.0.6\",\"79.5.6.7\",\"23.8.5.3\",\"4.0.0.9\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":419808.40000462864,\"ram\":64,\"totalMoneyGenerated\":24456814.272606574,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":418716.4000046246,\"ram\":64,\"totalMoneyGenerated\":24454762.463110138,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":418621.40000462433,\"ram\":64,\"totalMoneyGenerated\":24454613.983110137,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":418425.4000046236,\"ram\":64,\"totalMoneyGenerated\":24454252.61351013,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":418249.40000462293,\"ram\":64,\"totalMoneyGenerated\":24453792.939910125,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":417921.40000462177,\"ram\":64,\"totalMoneyGenerated\":24452896.91943011,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":417703.20000462094,\"ram\":64,\"totalMoneyGenerated\":24451914.678150095,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":417244.2000046193,\"ram\":64,\"totalMoneyGenerated\":24450117.76295007,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259738.80000391538,\"ram\":64,\"totalMoneyGenerated\":23692018.532228265,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259738.60000391537,\"ram\":64,\"totalMoneyGenerated\":23692018.51174826,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259738.20000391538,\"ram\":64,\"totalMoneyGenerated\":23692018.470788263,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259738.00000391537,\"ram\":64,\"totalMoneyGenerated\":23692018.450308263,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259737.00000391537,\"ram\":64,\"totalMoneyGenerated\":23692018.347908262,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":259736.80000391538,\"ram\":64,\"totalMoneyGenerated\":23692018.327428263,\"name\":\"hacknet-node-13\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":2},{\"lvl\":1,\"n\":3}],\"numPeopleKilled\":18054,\"karma\":-54162,\"crime_money_mult\":1.5872,\"crime_success_mult\":1.5872,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3824,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561272643510\",\"task\":\"Territory Warfare\",\"earnedRespect\":14.57435602481755,\"hack\":84,\"str\":329,\"def\":341,\"dex\":139,\"agi\":247,\"cha\":80,\"hack_exp\":6826.69326840592,\"str_exp\":9212.58546898459,\"def_exp\":9212.58546898459,\"dex_exp\":9212.58546898459,\"agi_exp\":9146.335468984546,\"cha_exp\":2341.7255339128315,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.633856270387201,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.639730981888001,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561272643613\",\"task\":\"Territory Warfare\",\"earnedRespect\":14.308846277236393,\"hack\":84,\"str\":329,\"def\":341,\"dex\":139,\"agi\":247,\"cha\":80,\"hack_exp\":6821.851895537461,\"str_exp\":9205.374749604418,\"def_exp\":9205.374749604418,\"dex_exp\":9205.374749604418,\"agi_exp\":9139.524749604376,\"cha_exp\":2339.622854067789,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.633856270387201,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.639730981888001,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561272643714\",\"task\":\"Mug People\",\"earnedRespect\":1264.4449380763651,\"hack\":13,\"str\":212,\"def\":220,\"dex\":90,\"agi\":109,\"cha\":66,\"hack_exp\":253.6522815969568,\"str_exp\":2914.8308199066905,\"def_exp\":2914.8308199066905,\"dex_exp\":2914.8308199066905,\"agi_exp\":1351.2408199070817,\"cha_exp\":1618.785204976342,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.633856270387201,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.639730981888001,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561273588967\",\"task\":\"Mug People\",\"earnedRespect\":1075.7021804508092,\"hack\":1,\"str\":202,\"def\":209,\"dex\":85,\"agi\":94,\"cha\":65,\"hack_exp\":2.2666666666666666,\"str_exp\":2606.749999999889,\"def_exp\":2606.749999999889,\"dex_exp\":2606.749999999889,\"agi_exp\":1044.0600000003815,\"cha_exp\":1562.6899999996433,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561274293062\",\"task\":\"Vigilante Justice\",\"earnedRespect\":0,\"hack\":51,\"str\":181,\"def\":188,\"dex\":77,\"agi\":136,\"cha\":1,\"hack_exp\":2085.5866666674315,\"str_exp\":2085.5866666674315,\"def_exp\":2085.5866666674315,\"dex_exp\":2085.5866666674315,\"agi_exp\":2085.5866666674315,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561275042461\",\"task\":\"Vigilante Justice\",\"earnedRespect\":0,\"hack\":51,\"str\":180,\"def\":186,\"dex\":76,\"agi\":135,\"cha\":1,\"hack_exp\":2044.520000000775,\"str_exp\":2044.520000000775,\"def_exp\":2044.520000000775,\"dex_exp\":2044.520000000775,\"agi_exp\":2044.520000000775,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561282026229\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":23,\"def\":24,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":80.02595271695367,\"str_exp\":106.70127028927176,\"def_exp\":106.70127028927176,\"dex_exp\":106.70127028927176,\"agi_exp\":106.70127028927176,\"cha_exp\":26.67531757231794,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561282114960\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":24,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":80.45162267821405,\"str_exp\":107.26883023761896,\"def_exp\":107.26883023761896,\"dex_exp\":107.26883023761896,\"agi_exp\":107.26883023761896,\"cha_exp\":26.81720755940474,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561283856403\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":25,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":81.30296260073484,\"str_exp\":108.40395013431335,\"def_exp\":108.40395013431335,\"dex_exp\":108.40395013431335,\"agi_exp\":108.40395013431335,\"cha_exp\":27.100987533578337,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561283952362\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":25,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":82.15430252325562,\"str_exp\":109.53907003100774,\"def_exp\":109.53907003100774,\"dex_exp\":109.53907003100774,\"agi_exp\":109.53907003100774,\"cha_exp\":27.384767507751935,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561286132384\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":25,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":83.0056424457764,\"str_exp\":110.67418992770213,\"def_exp\":110.67418992770213,\"dex_exp\":110.67418992770213,\"agi_exp\":110.67418992770213,\"cha_exp\":27.668547481925533,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561289080404\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":25,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":83.8569823682972,\"str_exp\":111.80930982439652,\"def_exp\":111.80930982439652,\"dex_exp\":111.80930982439652,\"agi_exp\":111.80930982439652,\"cha_exp\":27.95232745609913,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561292338422\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":24,\"def\":25,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":84.28265232955759,\"str_exp\":112.37686977274372,\"def_exp\":112.37686977274372,\"dex_exp\":112.37686977274372,\"agi_exp\":112.37686977274372,\"cha_exp\":28.09421744318593,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561295912366\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":25,\"def\":26,\"dex\":10,\"agi\":18,\"cha\":3,\"hack_exp\":85.13399225207839,\"str_exp\":113.51198966943811,\"def_exp\":113.51198966943811,\"dex_exp\":113.51198966943811,\"agi_exp\":113.51198966943811,\"cha_exp\":28.377997417359527,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561299814395\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":25,\"def\":26,\"dex\":10,\"agi\":19,\"cha\":3,\"hack_exp\":85.98533217459918,\"str_exp\":114.6471095661325,\"def_exp\":114.6471095661325,\"dex_exp\":114.6471095661325,\"agi_exp\":114.6471095661325,\"cha_exp\":28.661777391533125,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Android-1561304062426\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":5,\"str\":25,\"def\":26,\"dex\":10,\"agi\":19,\"cha\":3,\"hack_exp\":86.41100213585958,\"str_exp\":115.2146695144797,\"def_exp\":115.2146695144797,\"dex_exp\":115.2146695144797,\"agi_exp\":115.2146695144797,\"cha_exp\":28.803667378619924,\"hack_mult\":1,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\"],\"augmentations\":[]}}],\"wanted\":1,\"respect\":2369.9996423831135,\"isHackingGang\":false,\"respectGainRate\":0.02293823778903873,\"wantedGainRate\":-0.010903441024479633,\"moneyGainRate\":251.63304000885853,\"storedCycles\":179760,\"storedTerritoryAndPowerCycles\":34,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Fluffy Bunny Inc.\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"eD3BD5K\",\"mor\":100,\"hap\":80.08431151106096,\"ene\":80.09694033415532,\"int\":73.92,\"cha\":72.38,\"exp\":109.20200000000209,\"cre\":66.99,\"eff\":58.52,\"sal\":977.13,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"cquu7hD\",\"mor\":100,\"hap\":79.91382319673166,\"ene\":79.92157875353088,\"int\":85.44,\"cha\":94.08,\"exp\":142.66199999993265,\"cre\":69.12,\"eff\":72.96,\"sal\":1226.8799999999999,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hc2d0nD\",\"mor\":100,\"hap\":79.8388856957683,\"ene\":79.85223137266048,\"int\":43.120000000000005,\"cha\":73.15,\"exp\":96.8820000000021,\"cre\":62.370000000000005,\"eff\":73.15,\"sal\":880.11,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hNJVNhu\",\"mor\":100,\"hap\":79.94217302089282,\"ene\":79.9514355230757,\"int\":77,\"cha\":81,\"exp\":144.30199999992487,\"cre\":74,\"eff\":62,\"sal\":1149,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZizUESz\",\"mor\":100,\"hap\":79.79353113163616,\"ene\":79.80253353757978,\"int\":47.85,\"cha\":57.42,\"exp\":107.5020000000021,\"cre\":59.16,\"eff\":62.64,\"sal\":837.81,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Q2SJWG5\",\"mor\":100,\"hap\":79.91119161432566,\"ene\":79.92027296076738,\"int\":45.39,\"cha\":60.52,\"exp\":108.70200000000209,\"cre\":73.87,\"eff\":56.07,\"sal\":867.75,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9snnzVE\",\"mor\":100,\"hap\":79.85611571857658,\"ene\":79.86355704491552,\"int\":82.56,\"cha\":52.46,\"exp\":112.8980000000019,\"cre\":64.5,\"eff\":73.1,\"sal\":1006.1999999999999,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9zcjk2t\",\"mor\":100,\"hap\":80.0336039185342,\"ene\":80.04132503965633,\"int\":52.44,\"cha\":50.92,\"exp\":89.6380000000019,\"cre\":54.72,\"eff\":59.28,\"sal\":770.64,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZP24zCQ\",\"mor\":100,\"hap\":79.88886765757185,\"ene\":79.90176408134484,\"int\":46.36,\"cha\":64.6,\"exp\":120.0380000000019,\"cre\":45.6,\"eff\":69.16,\"sal\":886.92,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DIpmQtg\",\"mor\":100,\"hap\":80.09656825851778,\"ene\":80.10735417119814,\"int\":58.46,\"cha\":51.35,\"exp\":100.6780000000019,\"cre\":68.73,\"eff\":54.510000000000005,\"sal\":850.83,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"55rJ9zY\",\"mor\":100,\"hap\":80.03831464425595,\"ene\":80.04548299675375,\"int\":72.97999999999999,\"cha\":41.82,\"exp\":131.29799999998627,\"cre\":56.58,\"eff\":69.7,\"sal\":966.78,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pdl8y5L\",\"mor\":100,\"hap\":79.85935229197504,\"ene\":79.86795316211804,\"int\":89,\"cha\":97,\"exp\":126.1180000000019,\"cre\":84,\"eff\":90,\"sal\":1308,\"pro\":0,\"cyclesUntilRaise\":94,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ABtYHLE\",\"mor\":100,\"hap\":80.07554010326824,\"ene\":80.08889744347324,\"int\":51.839999999999996,\"cha\":78.72,\"exp\":122.83200000000153,\"cre\":88.32,\"eff\":87.36,\"sal\":1166.3999999999999,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"mEPKoAv\",\"mor\":100,\"hap\":79.93972930107661,\"ene\":79.95155112335172,\"int\":61.56,\"cha\":57,\"exp\":102.59200000000152,\"cre\":54.72,\"eff\":67.64,\"sal\":909.72,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"S0zRGZ3\",\"mor\":100,\"hap\":80.03945511558385,\"ene\":80.04816154568445,\"int\":50.74,\"cha\":57.62,\"exp\":84.99200000000152,\"cre\":85.14,\"eff\":49.88,\"sal\":864.3,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"MppWFpZ\",\"mor\":100,\"hap\":80.02709590542744,\"ene\":80.0400915218833,\"int\":54.72,\"cha\":65.28,\"exp\":102.67200000000152,\"cre\":55.68,\"eff\":76.8,\"sal\":944.64,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"GvksqsI\",\"mor\":100,\"hap\":80.02575891750746,\"ene\":80.0363350937553,\"int\":72.2,\"cha\":61.56,\"exp\":102.59200000000152,\"cre\":60.8,\"eff\":67.64,\"sal\":973.5600000000001,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YrnNtUA\",\"mor\":100,\"hap\":80.0016144743638,\"ene\":80.01185031102239,\"int\":74.7,\"cha\":42.33,\"exp\":104.18200000000152,\"cre\":67.22999999999999,\"eff\":81.33999999999999,\"sal\":988.53,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bgf9h02\",\"mor\":100,\"hap\":79.9141510518563,\"ene\":79.92809125101648,\"int\":82.17,\"cha\":64.74,\"exp\":84.26200000000152,\"cre\":53.12,\"eff\":62.25,\"sal\":918.81,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sV2fXLp\",\"mor\":100,\"hap\":71.62572347413887,\"ene\":79.9317502680772,\"int\":79,\"cha\":51.35,\"exp\":99.52200000000153,\"cre\":71.10000000000001,\"eff\":54.510000000000005,\"sal\":945.63,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rzujDM8\",\"mor\":97.2,\"hap\":79.81443162806704,\"ene\":79.82358679203084,\"int\":56.05,\"cha\":59.849999999999994,\"exp\":98.22200000000151,\"cre\":54.15,\"eff\":48.449999999999996,\"sal\":829.3499999999999,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rRkWzQG\",\"mor\":100,\"hap\":79.79426955484755,\"ene\":71.28104480814028,\"int\":56.09,\"cha\":75.84,\"exp\":118.48200000000153,\"cre\":75.84,\"eff\":40.29,\"sal\":978.8100000000001,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bX8wPeW\",\"mor\":100,\"hap\":79.81378230861297,\"ene\":79.8207281248262,\"int\":49.559999999999995,\"cha\":50.4,\"exp\":115.03200000000152,\"cre\":57.96,\"eff\":44.519999999999996,\"sal\":831.6,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tEW4KsO\",\"mor\":100,\"hap\":79.79149965699804,\"ene\":79.79927482095678,\"int\":51.699999999999996,\"cha\":60.16,\"exp\":115.47200000000151,\"cre\":63.919999999999995,\"eff\":85.53999999999999,\"sal\":1009.56,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fswGg5y\",\"mor\":100,\"hap\":79.72931939648977,\"ene\":79.74162225650132,\"int\":65.28,\"cha\":91.2,\"exp\":131.4719999999851,\"cre\":77.75999999999999,\"eff\":89.28,\"sal\":1244.1599999999999,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Wj0XC1X\",\"mor\":100,\"hap\":79.82974761724371,\"ene\":79.8408702435362,\"int\":61.56,\"cha\":54.27,\"exp\":114.79200000000154,\"cre\":77.76,\"eff\":54.27,\"sal\":967.1400000000001,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IQ3dqIx\",\"mor\":100,\"hap\":73.246226073511,\"ene\":79.74322888032862,\"int\":83.42,\"cha\":85.14,\"exp\":83.27200000000153,\"cre\":73.96,\"eff\":84.28,\"sal\":1109.4,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"V1ZK6UD\",\"mor\":100,\"hap\":80.03414763129148,\"ene\":80.04945567949302,\"int\":91.08,\"cha\":57.96,\"exp\":130.43199999999,\"cre\":79.12,\"eff\":58.88,\"sal\":1131.6000000000001,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"XDTpuWz\",\"mor\":100,\"hap\":79.84328560890896,\"ene\":79.85344560625259,\"int\":79.17,\"cha\":80.04,\"exp\":106.39200000000153,\"cre\":77.42999999999999,\"eff\":82.65,\"sal\":1156.23,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gg691QR\",\"mor\":99,\"hap\":79.91090382434554,\"ene\":79.92588255575846,\"int\":91,\"cha\":73,\"exp\":111.27200000000153,\"cre\":78,\"eff\":91,\"sal\":1212,\"pro\":0,\"cyclesUntilRaise\":176,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}}],\"employeeProd\":{\"Operations\":2850.599684098377,\"Engineer\":436.48179246124005,\"Business\":139.00918760546813,\"Management\":1554.2365086031666,\"Research & Development\":1117.9661522044328,\"total\":6098.293324972686,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Chongqing\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZMs4bqM\",\"mor\":100,\"hap\":79.86073315301257,\"ene\":79.86444582427225,\"int\":73.08,\"cha\":69.6,\"exp\":124.89000000000209,\"cre\":74.82,\"eff\":43.5,\"sal\":991.8,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"P9vPuHh\",\"mor\":100,\"hap\":80.08985289062801,\"ene\":80.09328775855494,\"int\":62.9,\"cha\":55.25,\"exp\":110.5400000000021,\"cre\":46.75,\"eff\":77.35,\"sal\":892.5,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Xr0BWdY\",\"mor\":100,\"hap\":79.87303764617258,\"ene\":79.87488417070271,\"int\":90.21,\"cha\":56.26,\"exp\":140.64999999994217,\"cre\":62.08,\"eff\":96.03,\"sal\":1169.82,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"p4GVYPK\",\"mor\":100,\"hap\":79.98377669152364,\"ene\":79.98776041879228,\"int\":94.05,\"cha\":67.32,\"exp\":127.56000000000209,\"cre\":57.42,\"eff\":91.08,\"sal\":1146.42,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EfsZgHx\",\"mor\":100,\"hap\":79.96065315590849,\"ene\":79.96463080058311,\"int\":47.32,\"cha\":60.06,\"exp\":126.2700000000021,\"cre\":83.72,\"eff\":52.78,\"sal\":944.58,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oBNNGPW\",\"mor\":100,\"hap\":79.99645914465404,\"ene\":79.99972140863153,\"int\":82.81,\"cha\":65.52,\"exp\":142.6499999999327,\"cre\":52.78,\"eff\":60.97,\"sal\":1048.32,\"pro\":0,\"cyclesUntilRaise\":370,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"nqHpx3k\",\"mor\":100,\"hap\":79.96984691734512,\"ene\":79.97406813809688,\"int\":65.60000000000001,\"cha\":40,\"exp\":121.3150000000019,\"cre\":57.6,\"eff\":71.2,\"sal\":916.8000000000001,\"pro\":0,\"cyclesUntilRaise\":95,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Xj4N8pG\",\"mor\":100,\"hap\":79.98386750969597,\"ene\":79.98677533602326,\"int\":51.94,\"cha\":49,\"exp\":139.29499999994837,\"cre\":49,\"eff\":88.2,\"sal\":981.96,\"pro\":0,\"cyclesUntilRaise\":95,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VTFQJKf\",\"mor\":100,\"hap\":79.82233514176706,\"ene\":79.826195647409,\"int\":52.64,\"cha\":86.47999999999999,\"exp\":132.834999999979,\"cre\":77.08,\"eff\":58.279999999999994,\"sal\":1071.6,\"pro\":0,\"cyclesUntilRaise\":95,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"1KvrEl9\",\"mor\":100,\"hap\":79.93175378637359,\"ene\":79.93503222389363,\"int\":47,\"cha\":72.38,\"exp\":107.45200000000189,\"cre\":82.72,\"eff\":79.89999999999999,\"sal\":1018.02,\"pro\":0,\"cyclesUntilRaise\":96,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Mh3ek9n\",\"mor\":100,\"hap\":79.7235589466097,\"ene\":79.72585977703844,\"int\":78.85,\"cha\":50.629999999999995,\"exp\":118.1720000000019,\"cre\":78.85,\"eff\":69.72,\"sal\":1038.33,\"pro\":0,\"cyclesUntilRaise\":96,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"OlMaguf\",\"mor\":100,\"hap\":79.99653122954518,\"ene\":79.9999901861604,\"int\":80.99000000000001,\"cha\":80.99000000000001,\"exp\":133.83199999997427,\"cre\":79.17,\"eff\":50.050000000000004,\"sal\":1124.76,\"pro\":0,\"cyclesUntilRaise\":96,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"SjNcyhi\",\"mor\":100,\"hap\":80.05638940131149,\"ene\":64.42609056881953,\"int\":68.8,\"cha\":70.52,\"exp\":118.47500000000153,\"cre\":67.94,\"eff\":67.08,\"sal\":1057.8,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ir5trUH\",\"mor\":100,\"hap\":79.72969053377913,\"ene\":54.26375066409493,\"int\":48.980000000000004,\"cha\":52.14,\"exp\":81.29500000000152,\"cre\":68.73,\"eff\":71.89,\"sal\":848.46,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yBFoEfw\",\"mor\":100,\"hap\":80.01476843504902,\"ene\":61.58255668851945,\"int\":60.040000000000006,\"cha\":58.46,\"exp\":118.42500000000153,\"cre\":77.42,\"eff\":55.300000000000004,\"sal\":988.2900000000001,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Niud6rK\",\"mor\":100,\"hap\":80.01015352556394,\"ene\":80.0145137992422,\"int\":51.85,\"cha\":43.35,\"exp\":101.41500000000151,\"cre\":43.35,\"eff\":77.35,\"sal\":831.3,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"uS3OsQs\",\"mor\":90,\"hap\":80.02511081210484,\"ene\":67.22029535729062,\"int\":62.9,\"cha\":83.3,\"exp\":95.46500000000152,\"cre\":82.45,\"eff\":50.15,\"sal\":1002.15,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"QI5GRgh\",\"mor\":100,\"hap\":79.82900429870297,\"ene\":79.83390160260839,\"int\":62.98,\"cha\":62.04,\"exp\":121.05500000000151,\"cre\":77.08,\"eff\":65.8,\"sal\":1046.22,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tT6z4x2\",\"mor\":100,\"hap\":80.03789396242679,\"ene\":80.04164138409404,\"int\":83.7,\"cha\":93,\"exp\":120.19500000000153,\"cre\":83.7,\"eff\":80.91000000000001,\"sal\":1263.8700000000001,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bt64jj4\",\"mor\":100,\"hap\":79.76788180589453,\"ene\":79.77075613518967,\"int\":57.75,\"cha\":50.050000000000004,\"exp\":104.89500000000153,\"cre\":66.22,\"eff\":45.43,\"sal\":852.39,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZIjuxya\",\"mor\":100,\"hap\":79.98392993519386,\"ene\":68.58860239231588,\"int\":51.839999999999996,\"cha\":78.72,\"exp\":112.21500000000152,\"cre\":92.16,\"eff\":59.519999999999996,\"sal\":1062.72,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"KtD9FUO\",\"mor\":100,\"hap\":79.9290845302877,\"ene\":79.9323874987399,\"int\":67.64,\"cha\":69.16,\"exp\":86.57500000000152,\"cre\":39.52,\"eff\":53.96,\"sal\":829.92,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lmtkynk\",\"mor\":100,\"hap\":79.90465561841852,\"ene\":62.873472431659124,\"int\":90.21,\"cha\":53.35,\"exp\":132.36499999998082,\"cre\":84.39,\"eff\":60.14,\"sal\":1140.72,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tc6oKC0\",\"mor\":100,\"hap\":80.02355507898011,\"ene\":80.0284494507955,\"int\":73.86999999999999,\"cha\":68.06,\"exp\":83.37500000000152,\"cre\":45.65,\"eff\":73.86999999999999,\"sal\":913.8299999999999,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"qiTj4sY\",\"mor\":100,\"hap\":80.06453905622966,\"ene\":80.06697093437344,\"int\":86.33,\"cha\":90.21,\"exp\":102.29500000000152,\"cre\":69.84,\"eff\":50.44,\"sal\":1076.7,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ig7jOZy\",\"mor\":99,\"hap\":80.02183671053936,\"ene\":77.06352127153077,\"int\":59.86,\"cha\":53.3,\"exp\":93.51500000000152,\"cre\":46.739999999999995,\"eff\":45.099999999999994,\"sal\":774.9,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"dZ7qeaV\",\"mor\":100,\"hap\":79.9772739512618,\"ene\":79.9804798850992,\"int\":48.379999999999995,\"cha\":68.88,\"exp\":107.45500000000152,\"cre\":74.61999999999999,\"eff\":41,\"sal\":900.3599999999999,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iRt7X68\",\"mor\":100,\"hap\":80.01187260166247,\"ene\":80.0124775394857,\"int\":72.16,\"cha\":73.04,\"exp\":124.69500000000153,\"cre\":80.08,\"eff\":66,\"sal\":1127.28,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iTNpSiI\",\"mor\":100,\"hap\":79.89882933796157,\"ene\":72.73496799609477,\"int\":46.36,\"cha\":63.08,\"exp\":85.81500000000152,\"cre\":65.36,\"eff\":50.92,\"sal\":813.96,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YFaXCa3\",\"mor\":100,\"hap\":79.8690075252319,\"ene\":71.29347663837385,\"int\":77.60000000000001,\"cha\":42.400000000000006,\"exp\":104.21500000000152,\"cre\":64,\"eff\":72,\"sal\":960,\"pro\":0,\"cyclesUntilRaise\":195,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}}],\"employeeProd\":{\"Operations\":2632.291040694573,\"Engineer\":495.1553540972715,\"Business\":128.0836973558175,\"Management\":1554.5482918348616,\"Research & Development\":1118.6898912090228,\"total\":5928.768275191546,\"Unassigned\":0}}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"RAp2huM\",\"mor\":100,\"hap\":79.85443065350597,\"ene\":79.8571697062209,\"int\":41.82,\"cha\":72.97999999999999,\"exp\":99.60300000000208,\"cre\":61.49999999999999,\"eff\":45.099999999999994,\"sal\":797.04,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZZ2w61Y\",\"mor\":100,\"hap\":79.76587435716031,\"ene\":79.76997646548726,\"int\":48.14,\"cha\":55.61,\"exp\":119.2330000000021,\"cre\":82.17,\"eff\":82.17,\"sal\":996,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"t2DM3jd\",\"mor\":100,\"hap\":79.82339143870276,\"ene\":79.8255813811017,\"int\":76.63,\"cha\":95.06,\"exp\":109.64300000000209,\"cre\":67.89999999999999,\"eff\":85.36,\"sal\":1137.81,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gZpWyv0\",\"mor\":100,\"hap\":79.74749927963055,\"ene\":79.75013177837194,\"int\":50.160000000000004,\"cha\":72.16,\"exp\":131.8799999999837,\"cre\":48.4,\"eff\":86.24,\"sal\":1000.5600000000001,\"pro\":0,\"cyclesUntilRaise\":360,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ws5MAaG\",\"mor\":100,\"hap\":79.85346287889259,\"ene\":79.85743588821624,\"int\":71.61,\"cha\":59.52,\"exp\":110.1900000000021,\"cre\":73.47,\"eff\":87.42,\"sal\":1040.67,\"pro\":0,\"cyclesUntilRaise\":360,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FiGPM06\",\"mor\":100,\"hap\":79.75253618530274,\"ene\":79.75393677590127,\"int\":72.97999999999999,\"cha\":75.44,\"exp\":102.88000000000208,\"cre\":59.04,\"eff\":61.49999999999999,\"sal\":949.56,\"pro\":0,\"cyclesUntilRaise\":360,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"buOYLey\",\"mor\":100,\"hap\":79.89341727506985,\"ene\":79.89609708228429,\"int\":84.6,\"cha\":71.44,\"exp\":139.4389999999477,\"cre\":87.42,\"eff\":49.82,\"sal\":1147.74,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ql5U1Ib\",\"mor\":100,\"hap\":79.78913735430075,\"ene\":79.79120701241571,\"int\":63.9,\"cha\":81.9,\"exp\":110.4390000000019,\"cre\":85.5,\"eff\":61.2,\"sal\":1058.4,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ldkDqhR\",\"mor\":100,\"hap\":80.02796210082043,\"ene\":80.03069914957493,\"int\":70.81,\"cha\":72.75,\"exp\":145.19899999992043,\"cre\":54.32,\"eff\":65.96,\"sal\":1076.7,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"K5hbxhM\",\"mor\":100,\"hap\":79.79937814043082,\"ene\":79.80430609374143,\"int\":46.5,\"cha\":57.660000000000004,\"exp\":100.3590000000019,\"cre\":82.77000000000001,\"eff\":71.61,\"sal\":926.2800000000001,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vPWaLIB\",\"mor\":100,\"hap\":79.86674161982899,\"ene\":79.87164155332584,\"int\":69.52,\"cha\":48.4,\"exp\":98.53900000000189,\"cre\":61.6,\"eff\":46.64,\"sal\":823.68,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FIJThJ5\",\"mor\":100,\"hap\":79.9741910001426,\"ene\":79.97716799163081,\"int\":83.7,\"cha\":69.3,\"exp\":123.9390000000019,\"cre\":80.10000000000001,\"eff\":83.7,\"sal\":1171.8,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YzSbowg\",\"mor\":100,\"hap\":69.95128377633708,\"ene\":79.98211420766043,\"int\":65.36,\"cha\":62.78,\"exp\":96.94800000000151,\"cre\":83.42,\"eff\":48.16,\"sal\":949.4399999999999,\"pro\":0,\"cyclesUntilRaise\":204,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"L7krxaf\",\"mor\":100,\"hap\":77.16617241137219,\"ene\":73.04650907447386,\"int\":50.220000000000006,\"cha\":65.10000000000001,\"exp\":103.42800000000152,\"cre\":48.36,\"eff\":50.220000000000006,\"sal\":831.4200000000001,\"pro\":0,\"cyclesUntilRaise\":204,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"plenzpY\",\"mor\":100,\"hap\":79.83691331442577,\"ene\":79.83910536732728,\"int\":76.44,\"cha\":96.03999999999999,\"exp\":138.18799999995326,\"cre\":93.1,\"eff\":60.76,\"sal\":1273.02,\"pro\":0,\"cyclesUntilRaise\":204,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vDuOvvj\",\"mor\":100,\"hap\":79.84384517905794,\"ene\":79.84631662312619,\"int\":39.78,\"cha\":70.2,\"exp\":88.54800000000152,\"cre\":56.940000000000005,\"eff\":42.120000000000005,\"sal\":772.2,\"pro\":0,\"cyclesUntilRaise\":204,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tnb1pV0\",\"mor\":100,\"hap\":80.03344967418916,\"ene\":80.03535236439627,\"int\":68.06,\"cha\":81.33999999999999,\"exp\":113.22500000000151,\"cre\":72.21,\"eff\":55.61,\"sal\":1050.78,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"2TsKUPR\",\"mor\":100,\"hap\":79.82547989783033,\"ene\":79.82576155492433,\"int\":57.62,\"cha\":79.12,\"exp\":106.40500000000152,\"cre\":67.94,\"eff\":45.58,\"sal\":949.4399999999999,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"n4ZoObJ\",\"mor\":90,\"hap\":79.90238868259794,\"ene\":79.90638719529773,\"int\":80.04,\"cha\":80.96000000000001,\"exp\":103.66500000000153,\"cre\":68.08,\"eff\":55.2,\"sal\":1043.28,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"teF7FhD\",\"mor\":100,\"hap\":71.60529984641077,\"ene\":79.8352737971622,\"int\":63.64,\"cha\":55.04,\"exp\":95.22500000000151,\"cre\":65.36,\"eff\":71.38,\"sal\":931.38,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fybhUAg\",\"mor\":100,\"hap\":80.02745502667277,\"ene\":69.98594673954577,\"int\":76.44,\"cha\":49.98,\"exp\":124.46500000000152,\"cre\":87.22,\"eff\":94.08,\"sal\":1176,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"WL9FuLU\",\"mor\":100,\"hap\":80.04660487597481,\"ene\":62.2419012095502,\"int\":79.67999999999999,\"cha\":71.03999999999999,\"exp\":105.46500000000152,\"cre\":57.599999999999994,\"eff\":57.599999999999994,\"sal\":993.5999999999999,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6DRFezu\",\"mor\":100,\"hap\":79.94744332695456,\"ene\":79.95001812540318,\"int\":46.5,\"cha\":49.29,\"exp\":103.42500000000152,\"cre\":87.42,\"eff\":69.75,\"sal\":948.6,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vIJ77sF\",\"mor\":100,\"hap\":79.90388502796822,\"ene\":79.90705306501015,\"int\":81.7,\"cha\":53.32,\"exp\":106.40500000000152,\"cre\":62.78,\"eff\":61.06,\"sal\":975.24,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lzkQZjh\",\"mor\":100,\"hap\":79.92442971982183,\"ene\":74.5278394649768,\"int\":56.730000000000004,\"cha\":53.010000000000005,\"exp\":89.47500000000151,\"cre\":53.010000000000005,\"eff\":46.5,\"sal\":775.62,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ecJyKgI\",\"mor\":100,\"hap\":79.85535110488992,\"ene\":79.86040918139504,\"int\":81.7,\"cha\":73.96,\"exp\":113.28500000000152,\"cre\":70.52,\"eff\":66.22,\"sal\":1096.5,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tUcOub7\",\"mor\":100,\"hap\":79.91128817912005,\"ene\":79.91455545822828,\"int\":79.89999999999999,\"cha\":57.8,\"exp\":100.53500000000152,\"cre\":73.95,\"eff\":67.14999999999999,\"sal\":1017.4499999999999,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"PYe4qeq\",\"mor\":100,\"hap\":80.08352387301063,\"ene\":80.08473306618426,\"int\":43.74,\"cha\":48.6,\"exp\":93.64500000000152,\"cre\":70.47,\"eff\":51.84,\"sal\":804.33,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4vnQZMO\",\"mor\":100,\"hap\":75.3037236061255,\"ene\":62.12802042158528,\"int\":66.96000000000001,\"cha\":80.91000000000001,\"exp\":122.95500000000153,\"cre\":84.63000000000001,\"eff\":48.36,\"sal\":1090.89,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"H2xmak5\",\"mor\":100,\"hap\":79.97701507162706,\"ene\":79.97861987028288,\"int\":61.49999999999999,\"cha\":49.199999999999996,\"exp\":90.20500000000152,\"cre\":65.6,\"eff\":82,\"sal\":924.9599999999999,\"pro\":0,\"cyclesUntilRaise\":205,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1550}}],\"employeeProd\":{\"Operations\":2740.3629825847825,\"Engineer\":373.234046470222,\"Business\":118.18629385778125,\"Management\":1490.148092804596,\"Research & Development\":1053.3470953721005,\"total\":5775.278511089483,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"New Tokyo\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"qLpjnEb\",\"mor\":90,\"hap\":72.65616577240824,\"ene\":74.80986684412012,\"int\":85.5,\"cha\":81,\"exp\":143.48399999992876,\"cre\":69.3,\"eff\":75.60000000000001,\"sal\":1198.8,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"a7Bv7IL\",\"mor\":100,\"hap\":74.98163754600047,\"ene\":74.983745257817,\"int\":42.400000000000006,\"cha\":64,\"exp\":116.88400000000209,\"cre\":54.400000000000006,\"eff\":62.400000000000006,\"sal\":854.4000000000001,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Du8oRhm\",\"mor\":100,\"hap\":74.85224213833409,\"ene\":74.85235272586584,\"int\":76.54,\"cha\":80.99,\"exp\":143.39399999992918,\"cre\":65.86,\"eff\":51.62,\"sal\":1089.3600000000001,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iiVEMlQ\",\"mor\":100,\"hap\":74.886609263584,\"ene\":71.3530681132773,\"int\":48.36,\"cha\":81.84,\"exp\":124.1040000000021,\"cre\":57.660000000000004,\"eff\":80.91000000000001,\"sal\":1012.7700000000001,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"arW1jPD\",\"mor\":100,\"hap\":74.77648898952903,\"ene\":74.77907343993071,\"int\":78.57,\"cha\":81.48,\"exp\":144.5239999999238,\"cre\":68.87,\"eff\":76.63,\"sal\":1184.37,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"51DyYvt\",\"mor\":100,\"hap\":75.16763603897529,\"ene\":75.17057253681513,\"int\":72.16,\"cha\":44,\"exp\":99.2840000000021,\"cre\":46.64,\"eff\":51.92,\"sal\":776.16,\"pro\":0,\"cyclesUntilRaise\":372,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8K0cnbg\",\"mor\":100,\"hap\":75.00040187430413,\"ene\":75.00339945936493,\"int\":63,\"cha\":91,\"exp\":144.1089999999256,\"cre\":96,\"eff\":61,\"sal\":1215,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NlLdaom\",\"mor\":100,\"hap\":74.97630187664696,\"ene\":74.9790850683005,\"int\":46.61,\"cha\":78.21000000000001,\"exp\":96.7190000000019,\"cre\":71.10000000000001,\"eff\":61.620000000000005,\"sal\":912.45,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RXM6I5B\",\"mor\":100,\"hap\":74.94105238328197,\"ene\":74.94205552139056,\"int\":44.46,\"cha\":41.34,\"exp\":121.8690000000019,\"cre\":51.480000000000004,\"eff\":54.6,\"sal\":790.9200000000001,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IZUL77V\",\"mor\":100,\"hap\":75.07092542608339,\"ene\":75.0727101115744,\"int\":53.58,\"cha\":68.61999999999999,\"exp\":126.2490000000019,\"cre\":56.4,\"eff\":52.64,\"sal\":922.14,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"opmOghB\",\"mor\":100,\"hap\":74.85669876049846,\"ene\":74.85963802745736,\"int\":73.92,\"cha\":67.76,\"exp\":102.0290000000019,\"cre\":57.2,\"eff\":47.52,\"sal\":894.96,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1650}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sPOmKhl\",\"mor\":100,\"hap\":75.02098876200857,\"ene\":75.02315561182361,\"int\":68.8,\"cha\":48.800000000000004,\"exp\":111.7090000000019,\"cre\":72.8,\"eff\":67.2,\"sal\":957.6,\"pro\":0,\"cyclesUntilRaise\":97,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1650}}],\"employeeProd\":{\"Operations\":828.7652095106214,\"Engineer\":219.75994135830283,\"Business\":103.44331527633024,\"Management\":643.7051259459554,\"Research & Development\":381.3746164912192,\"total\":2177.0482085824287,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Ishima\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"JusZsxk\",\"mor\":95.4,\"hap\":75.14120503296611,\"ene\":75.14120503296611,\"int\":67.16,\"cha\":50.6,\"exp\":104.0350000000021,\"cre\":56.120000000000005,\"eff\":77.28,\"sal\":899.76,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RrvbkSw\",\"mor\":100,\"hap\":75.00634310657028,\"ene\":75.00634310657028,\"int\":52.93,\"cha\":46.61,\"exp\":132.69499999997984,\"cre\":50.56,\"eff\":51.35,\"sal\":836.61,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xhWOiPv\",\"mor\":90,\"hap\":74.94943945432958,\"ene\":74.94943945432958,\"int\":51.84,\"cha\":58.32000000000001,\"exp\":115.21500000000209,\"cre\":61.56,\"eff\":60.75000000000001,\"sal\":877.23,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ULm8not\",\"mor\":100,\"hap\":74.8141395137607,\"ene\":74.8141395137607,\"int\":46.02,\"cha\":39.78,\"exp\":115.3350000000021,\"cre\":73.32000000000001,\"eff\":50.7,\"sal\":809.64,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iPTKwJn\",\"mor\":100,\"hap\":60.24622146450362,\"ene\":75.01985343626095,\"int\":66.88,\"cha\":54.56,\"exp\":118.6350000000021,\"cre\":80.08,\"eff\":48.4,\"sal\":939.84,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"BjSO5Dx\",\"mor\":100,\"hap\":75.01563259991158,\"ene\":75.01563259991158,\"int\":47.6,\"cha\":79.05,\"exp\":136.02499999996408,\"cre\":56.1,\"eff\":48.449999999999996,\"sal\":935.85,\"pro\":0,\"cyclesUntilRaise\":375,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Y1URFmI\",\"mor\":79,\"hap\":34.9600175767495,\"ene\":31.960017576749472,\"int\":46.02,\"cha\":70.2,\"exp\":116.74800000000182,\"cre\":39.78,\"eff\":48.36,\"sal\":819,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TAdpmJw\",\"mor\":72,\"hap\":61.98813102991851,\"ene\":45.98813102991901,\"int\":57.339999999999996,\"cha\":56.4,\"exp\":95.10800000000182,\"cre\":91.17999999999999,\"eff\":67.67999999999999,\"sal\":958.8,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ex5WU0W\",\"mor\":61,\"hap\":66.78410381503132,\"ene\":74.78410381503132,\"int\":76,\"cha\":55.099999999999994,\"exp\":96.55800000000181,\"cre\":75.05,\"eff\":79.8,\"sal\":1003.1999999999999,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9qxu0i4\",\"mor\":63,\"hap\":45.84613984158988,\"ene\":45.84613984158988,\"int\":92.14999999999999,\"cha\":76.63,\"exp\":133.46799999997592,\"cre\":77.6,\"eff\":48.5,\"sal\":1140.72,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xbvqC4R\",\"mor\":98,\"hap\":44.95468395352465,\"ene\":73.9546839535241,\"int\":57,\"cha\":90.25,\"exp\":138.35799999995277,\"cre\":50.349999999999994,\"eff\":70.3,\"sal\":1074.45,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"doPoAqs\",\"mor\":76,\"hap\":61.06413960875103,\"ene\":53.06413960875059,\"int\":47.94,\"cha\":47.94,\"exp\":141.16799999993944,\"cre\":67.67999999999999,\"eff\":55.459999999999994,\"sal\":936.2399999999999,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1700}}],\"employeeProd\":{\"Operations\":497.563358474345,\"Engineer\":165.20490126707912,\"Business\":74.61674304590001,\"Management\":346.2606675302831,\"Research & Development\":253.60997534695508,\"total\":1337.2556456645623,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Volhaven\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"F2yJCFe\",\"mor\":100,\"hap\":65.62996271901523,\"ene\":75.0318393013227,\"int\":91,\"cha\":81,\"exp\":127.2660000000021,\"cre\":55,\"eff\":82,\"sal\":1143,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"1oRzZny\",\"mor\":100,\"hap\":67.42017163725518,\"ene\":75.02426166443298,\"int\":80.64,\"cha\":96,\"exp\":127.2660000000021,\"cre\":96,\"eff\":72,\"sal\":1249.9199999999998,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ixioIaT\",\"mor\":100,\"hap\":74.92242639423961,\"ene\":74.92289041462763,\"int\":51.35,\"cha\":60.830000000000005,\"exp\":131.89599999998364,\"cre\":63.2,\"eff\":67.15,\"sal\":957.48,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"t7BF5Yz\",\"mor\":100,\"hap\":75.07434048143101,\"ene\":75.07502734964584,\"int\":78.85,\"cha\":71.38,\"exp\":105.89600000000209,\"cre\":71.38,\"eff\":76.36,\"sal\":1045.8,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZRIen1U\",\"mor\":100,\"hap\":74.8238869707323,\"ene\":74.82415092979865,\"int\":70.2,\"cha\":71.76,\"exp\":106.7460000000021,\"cre\":46.800000000000004,\"eff\":61.620000000000005,\"sal\":905.58,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZvYwys8\",\"mor\":90,\"hap\":74.88665873309597,\"ene\":65.39024012013205,\"int\":63.7,\"cha\":76.44,\"exp\":146.26599999991558,\"cre\":51.870000000000005,\"eff\":68.25,\"sal\":1053.78,\"pro\":0,\"cyclesUntilRaise\":378,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fNEViSK\",\"mor\":56,\"hap\":65.98881915699015,\"ene\":51.988819156990324,\"int\":55.61,\"cha\":64.74,\"exp\":102.87300000000181,\"cre\":73.86999999999999,\"eff\":78.85,\"sal\":983.55,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DrYWCoA\",\"mor\":84,\"hap\":72.88849578653357,\"ene\":40.888495786533696,\"int\":72.75,\"cha\":84.39,\"exp\":138.30299999995302,\"cre\":88.27,\"eff\":54.32,\"sal\":1169.82,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tETcsYR\",\"mor\":97,\"hap\":48.804448387185914,\"ene\":60.80444838718586,\"int\":56.96,\"cha\":61.410000000000004,\"exp\":125.52300000000183,\"cre\":75.65,\"eff\":79.21000000000001,\"sal\":1051.98,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VX1Gm7G\",\"mor\":63,\"hap\":75.85123253427277,\"ene\":63.85123253427285,\"int\":48.980000000000004,\"cha\":40.29,\"exp\":112.87300000000182,\"cre\":72.68,\"eff\":60.040000000000006,\"sal\":860.3100000000001,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"wHfyjeo\",\"mor\":53,\"hap\":32.81007353510384,\"ene\":73.81007353510363,\"int\":55.29,\"cha\":75.66,\"exp\":126.66300000000182,\"cre\":67.89999999999999,\"eff\":72.75,\"sal\":1050.51,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1700}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5p4KjmA\",\"mor\":55,\"hap\":59.82426844753938,\"ene\":73.82426844753941,\"int\":58.279999999999994,\"cha\":74.25999999999999,\"exp\":122.35300000000181,\"cre\":78.02,\"eff\":79.89999999999999,\"sal\":1094.1599999999999,\"pro\":0,\"cyclesUntilRaise\":369,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1700}}],\"employeeProd\":{\"Operations\":591.5776412583072,\"Engineer\":201.97136917605087,\"Business\":105.25280575461022,\"Management\":343.53474217202694,\"Research & Development\":244.2165491599481,\"total\":1486.5531075209428,\"Unassigned\":0}}}},\"name\":\"Agro Co.\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":42639.37863603168,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":384.91751443776786,\"popularity\":100.462342133429,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":124.70258284206803,\"lastCycleRevenue\":\"12033197.688790193\",\"lastCycleExpenses\":\"2116138.16163014367\",\"thisCycleRevenue\":\"120393672.10485679\",\"thisCycleExpenses\":\"21162981.6371873547\",\"upgrades\":[102,16],\"state\":\"EXPORT\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":4,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":246.58545591797224,\"loc\":\"Aevum\",\"size\":800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":72.5004219894102,\"dmdR\":[65,85],\"cmp\":45.3420141385748,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":123.29403416554041,\"sll\":0.001306206554295386,\"prd\":-123.29272795898612,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1384.4916071779226,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":98.33087013665549,\"dmdR\":[80,99],\"cmp\":87.74839146220292,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":123.29403416554041,\"sll\":0.001306206554295386,\"prd\":-123.29272795898612,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1920.953831996949,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":211.3380373069796,\"dmd\":70.56428454415489,\"dmdR\":[70,90],\"cmp\":40.25478690849158,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":246.58545591797224,\"prd\":246.58545591797224,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7335.696202130002,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":211.3380373069796,\"dmd\":83.66966919728955,\"dmdR\":[20,90],\"cmp\":45.50499347457288,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":246.58545591797224,\"prd\":246.58545591797224,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3799.532920218174,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":86.95506531248188,\"dmdR\":[80,90],\"cmp\":67.58183175206672,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7499.371168787558,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55733.29127733109,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":86.65839223311825,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12855.254701903857,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160520,\"qlt\":0,\"dmd\":78.90091752373549,\"dmdR\":[5,99],\"cmp\":35.9902709498618,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":98579.5822022603,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":5,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":241.62149059538606,\"loc\":\"Sector-12\",\"size\":1000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.08241462622169,\"dmdR\":[65,85],\"cmp\":54.063839642683234,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":120.8119087218397,\"sll\":0.0011634241466708772,\"prd\":-120.81074529769303,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1501.6572613812987,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":83.94241518072756,\"dmdR\":[80,99],\"cmp\":82.74203682911637,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":120.8119087218397,\"sll\":0.0011634241466708772,\"prd\":-120.81074529769303,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1889.4972132409655,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":210.635997166174,\"dmd\":70.29849497297626,\"dmdR\":[70,90],\"cmp\":54.06274163053752,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":241.62149059538606,\"prd\":241.62149059538606,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3333.55465777213,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":210.635997166174,\"dmd\":74.47439881401864,\"dmdR\":[20,90],\"cmp\":58.018226757688026,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":241.62149059538606,\"prd\":241.62149059538606,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2987.922940473931,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":82.75643704446853,\"dmdR\":[80,90],\"cmp\":66.57569892354044,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9355.903179831012,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75200.96353189128,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":87.74748752330036,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15939.348999266922,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":159540,\"qlt\":0,\"dmd\":27.017619795426363,\"dmdR\":[5,99],\"cmp\":25.821977027146712,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":98198.15648796046,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":166.9909583396681,\"loc\":\"New Tokyo\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":80.35241479364619,\"dmdR\":[65,85],\"cmp\":58.91017711712292,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":83.4966450244488,\"sll\":0.0011658546147373273,\"prd\":-83.49547916983406,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1605.3997793305539,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":88.0329935863521,\"dmdR\":[80,99],\"cmp\":82.4809730186101,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":83.4966450244488,\"sll\":0.0011658546147373273,\"prd\":-83.49547916983406,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2007.4408359025406,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":208.93107512065603,\"dmd\":82.194812964737,\"dmdR\":[70,90],\"cmp\":43.67886369589365,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":166.9909583396681,\"prd\":166.9909583396681,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3632.05878797817,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":208.93107512065603,\"dmd\":88.98287701380539,\"dmdR\":[20,90],\"cmp\":69.16707366325278,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":166.9909583396681,\"prd\":166.9909583396681,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3477.914171738527,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.67590770649524,\"dmdR\":[80,90],\"cmp\":73.34313275073907,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8824.073986285393,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75427.13972350389,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":80.04387838074612,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13801.408724319728,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160530,\"qlt\":0,\"dmd\":30.017533864304458,\"dmdR\":[5,99],\"cmp\":34.40294597485758,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72535.41638044684,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":137.22649138360396,\"loc\":\"Ishima\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":69.57153836508769,\"dmdR\":[65,85],\"cmp\":55.197444135837436,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":68.61391272962419,\"sll\":0.000667037822211114,\"prd\":-68.61324569180198,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1452.2959032930955,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":83.28065079339808,\"dmdR\":[80,99],\"cmp\":77.05687539610554,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":68.61391272962419,\"sll\":0.000667037822211114,\"prd\":-68.61324569180198,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1706.7909873733415,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":208.32511607438192,\"dmd\":88.47066663248611,\"dmdR\":[70,90],\"cmp\":59.494313475587106,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":137.22649138360396,\"prd\":137.22649138360396,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6536.773661684691,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":208.32511607438192,\"dmd\":74.06822237318482,\"dmdR\":[20,90],\"cmp\":54.40972402907962,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":137.22649138360396,\"prd\":137.22649138360396,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4273.198551139119,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":80.81975441026457,\"dmdR\":[80,90],\"cmp\":87.73693742398353,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6925.971740581177,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75737.02271253287,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":94.60932858503321,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15199.009897150492,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160530,\"qlt\":0,\"dmd\":77.67173746843072,\"dmdR\":[5,99],\"cmp\":61.44159161431396,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":81938.61522673831,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":142.7964380764228,\"loc\":\"Volhaven\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":77.96410861044306,\"dmdR\":[65,85],\"cmp\":56.41117560391069,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":71.39907264174553,\"sll\":0.0008536035341421666,\"prd\":-71.3982190382114,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1541.9608241194724,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":86.83452429922589,\"dmdR\":[80,99],\"cmp\":80.34753952967762,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":71.39907264174553,\"sll\":0.0008536035341421666,\"prd\":-71.3982190382114,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1980.14926586843,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":208.73380205550637,\"dmd\":74.76992465771973,\"dmdR\":[70,90],\"cmp\":58.75886520455242,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":142.7964380764228,\"prd\":142.7964380764228,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9566.674245046712,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":208.73380205550637,\"dmd\":53.00829127207775,\"dmdR\":[20,90],\"cmp\":38.48983455432233,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":142.7964380764228,\"prd\":142.7964380764228,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4140.483315726977,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,90],\"cmp\":65.89039339150678,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8365.22053339151,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":100069.28046171847,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":97.00621988071266,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14507.869997422195,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160540,\"qlt\":0,\"dmd\":31.468165670161536,\"dmdR\":[5,99],\"cmp\":31.20881370487176,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":96141.74198117816,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":4,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":244.1282235923064,\"loc\":\"Chongqing\",\"size\":800,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":68.24681021971816,\"dmdR\":[65,85],\"cmp\":49.26419937634781,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":122.06512361445864,\"sll\":0.0010118183054373731,\"prd\":-122.0641117961532,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1452.4626179614809,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.33351034950992,\"dmdR\":[80,99],\"cmp\":87.27379170135924,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":122.06512361445864,\"sll\":0.0010118183054373731,\"prd\":-122.0641117961532,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1857.9835375397658,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":211.99032200847824,\"dmd\":73.34098750394953,\"dmdR\":[70,90],\"cmp\":37.77505023899634,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":244.1282235923064,\"prd\":244.1282235923064,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9453.275026109108,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":211.99032200847824,\"dmd\":66.02688633058632,\"dmdR\":[20,90],\"cmp\":39.17155471246523,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":244.1282235923064,\"prd\":244.1282235923064,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3401.1407709621926,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.37287968249902,\"dmdR\":[80,90],\"cmp\":66.5618317711412,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9112.041094132835,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73675.72350769481,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":90.41075865018074,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15436.226880109238,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":159630,\"qlt\":0,\"dmd\":29.6824402136987,\"dmdR\":[5,99],\"cmp\":50.25719515389755,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":157723.04011521576,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"Y885hxl\",\"mor\":100,\"hap\":90.18718228423246,\"ene\":90.18447069230179,\"int\":84.14999999999999,\"cha\":49.3,\"exp\":67.94400000000073,\"cre\":58.65,\"eff\":49.3,\"sal\":869.55,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xtZfWg3\",\"mor\":100,\"hap\":90.24503514369809,\"ene\":88.99083684476223,\"int\":70.07000000000001,\"cha\":73.71000000000001,\"exp\":67.72400000000074,\"cre\":46.410000000000004,\"eff\":79.17,\"sal\":952.77,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"p0BoqDm\",\"mor\":100,\"hap\":85.71115163925488,\"ene\":90.33064685176618,\"int\":64.6,\"cha\":76,\"exp\":72.69400000000074,\"cre\":63.84,\"eff\":44.08,\"sal\":905.16,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TNRO9DS\",\"mor\":100,\"hap\":90.26255594341237,\"ene\":90.26124725250034,\"int\":56.949999999999996,\"cha\":58.65,\"exp\":73.04400000000074,\"cre\":54.4,\"eff\":62.05,\"sal\":856.8,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"kELvlxI\",\"mor\":100,\"hap\":90.21880334023946,\"ene\":90.21596170590935,\"int\":41.870000000000005,\"cha\":57.67,\"exp\":81.90400000000074,\"cre\":51.35,\"eff\":76.63000000000001,\"sal\":869.7900000000001,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"54umt0I\",\"mor\":100,\"hap\":90.18997505704546,\"ene\":90.18870619973673,\"int\":57.96,\"cha\":45.36,\"exp\":68.21400000000074,\"cre\":55.44,\"eff\":47.04,\"sal\":763.56,\"pro\":0,\"cyclesUntilRaise\":302,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}}],\"employeeProd\":{\"Operations\":409.854870546942,\"Engineer\":201.45965606686198,\"Business\":116.00080322555903,\"Management\":256.32731732235703,\"Research & Development\":219.8173582956613,\"total\":1203.4600054573814,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Chongqing\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"DX6b4CA\",\"mor\":95.4,\"hap\":90.35876140408533,\"ene\":85.49657492154253,\"int\":67.23,\"cha\":44.550000000000004,\"exp\":68.85900000000073,\"cre\":63.99,\"eff\":65.61,\"sal\":872.37,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DGVLwKc\",\"mor\":100,\"hap\":90.31919420805042,\"ene\":90.31724495513129,\"int\":89.24000000000001,\"cha\":75.44,\"exp\":93.04900000000075,\"cre\":60.720000000000006,\"eff\":88.32000000000001,\"sal\":1161.96,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4YP8va2\",\"mor\":100,\"hap\":90.27427198446456,\"ene\":90.27140508669505,\"int\":68.64,\"cha\":57.72,\"exp\":89.64900000000074,\"cre\":59.28,\"eff\":49.92,\"sal\":917.2800000000001,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZptnScN\",\"mor\":100,\"hap\":90.3673756744856,\"ene\":90.36617102113351,\"int\":68.88,\"cha\":58.22,\"exp\":78.48900000000073,\"cre\":50.019999999999996,\"eff\":41.82,\"sal\":833.9399999999999,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vDWCdeK\",\"mor\":100,\"hap\":90.44028763944695,\"ene\":90.43852010817146,\"int\":87.36,\"cha\":80.08,\"exp\":93.15900000000074,\"cre\":91,\"eff\":70.98,\"sal\":1209.39,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3JEXmdV\",\"mor\":100,\"hap\":90.28579043504229,\"ene\":90.28347126323641,\"int\":70.98,\"cha\":78,\"exp\":90.42900000000074,\"cre\":41.34,\"eff\":75.66,\"sal\":1010.88,\"pro\":0,\"cyclesUntilRaise\":317,\"loc\":\"\",\"pos\":\"Unassigned\",\"salary\":550}}],\"employeeProd\":{\"Operations\":453.72084830114574,\"Engineer\":241.30153504469058,\"Business\":0,\"Management\":229.40555031767266,\"Research & Development\":334.79141710191897,\"total\":1259.2193507654279,\"Unassigned\":0}}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"6SsYxTE\",\"mor\":100,\"hap\":88.77085609316717,\"ene\":88.76728472711633,\"int\":83.7,\"cha\":49.5,\"exp\":100.63800000000084,\"cre\":90,\"eff\":70.2,\"sal\":1115.1000000000001,\"pro\":0,\"cyclesUntilRaise\":154,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bu1LIb4\",\"mor\":90,\"hap\":88.80124412978942,\"ene\":88.79577855130883,\"int\":47.94,\"cha\":53.58,\"exp\":84.37800000000084,\"cre\":93.05999999999999,\"eff\":86.47999999999999,\"sal\":1029.3,\"pro\":0,\"cyclesUntilRaise\":154,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NRQyERc\",\"mor\":100,\"hap\":88.73509954390748,\"ene\":88.73276313224575,\"int\":46.980000000000004,\"cha\":45.36,\"exp\":77.41800000000084,\"cre\":59.13,\"eff\":75.33,\"sal\":845.6400000000001,\"pro\":0,\"cyclesUntilRaise\":154,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ilv7bGu\",\"mor\":100,\"hap\":88.79499519839793,\"ene\":88.79115931859998,\"int\":64.78,\"cha\":46.61,\"exp\":97.38800000000084,\"cre\":41.08,\"eff\":77.42,\"sal\":914.82,\"pro\":0,\"cyclesUntilRaise\":154,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZpDIqIP\",\"mor\":100,\"hap\":88.88622418271703,\"ene\":76.0950296354792,\"int\":73.32000000000001,\"cha\":47.58,\"exp\":73.03500000000085,\"cre\":67.86,\"eff\":54.6,\"sal\":882.1800000000001,\"pro\":0,\"cyclesUntilRaise\":155,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"MUSeyol\",\"mor\":91.8,\"hap\":88.98935300410835,\"ene\":88.98648711408093,\"int\":60.16,\"cha\":94,\"exp\":74.03500000000084,\"cre\":61.099999999999994,\"eff\":62.04,\"sal\":987,\"pro\":0,\"cyclesUntilRaise\":155,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}}],\"employeeProd\":{\"Operations\":467.8984985665042,\"Engineer\":221.27236854294347,\"Business\":112.72260834763162,\"Management\":178.61342157996867,\"Research & Development\":215.39250227870406,\"total\":1195.8993993157521,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"New Tokyo\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"5TOezjB\",\"mor\":100,\"hap\":90.26892831143374,\"ene\":90.26892831143374,\"int\":88.2,\"cha\":81.34,\"exp\":110.56200000000074,\"cre\":83.3,\"eff\":90.16,\"sal\":1302.42,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"e6N34dS\",\"mor\":100,\"hap\":80.29216965570566,\"ene\":90.30778386149439,\"int\":57.67,\"cha\":55.300000000000004,\"exp\":64.45200000000074,\"cre\":45.82,\"eff\":41.08,\"sal\":734.7,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"jClR0RS\",\"mor\":100,\"hap\":90.32954306333048,\"ene\":90.32954306333048,\"int\":87.22,\"cha\":54.29,\"exp\":96.85200000000074,\"cre\":54.29,\"eff\":87.22,\"sal\":1081.35,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IKTBbCE\",\"mor\":100,\"hap\":90.18580361622107,\"ene\":90.18580361622107,\"int\":88.27,\"cha\":56.26,\"exp\":114.48200000000074,\"cre\":68.87,\"eff\":49.47,\"sal\":1073.79,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"GxuXr3F\",\"mor\":100,\"hap\":90.30416179703445,\"ene\":90.30416179703445,\"int\":84.28,\"cha\":49.019999999999996,\"exp\":63.282000000000735,\"cre\":59.339999999999996,\"eff\":82.56,\"sal\":957.18,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IczrLfO\",\"mor\":100,\"hap\":83.92582578712683,\"ene\":90.35420463036276,\"int\":60.48,\"cha\":67.2,\"exp\":63.102000000000736,\"cre\":84,\"eff\":69.72,\"sal\":975.24,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}}],\"employeeProd\":{\"Operations\":439.2753256117521,\"Engineer\":309.3301356879305,\"Business\":143.37648286882242,\"Management\":229.38917139983207,\"Research & Development\":244.88372010326867,\"total\":1366.2548356716059,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Ishima\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"HuTESCc\",\"mor\":100,\"hap\":90.3115133272323,\"ene\":90.30897674363734,\"int\":71.03999999999999,\"cha\":65.28,\"exp\":112.48800000000072,\"cre\":51.839999999999996,\"eff\":71.03999999999999,\"sal\":1056.96,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gjPBZ04\",\"mor\":90,\"hap\":87.37584040876553,\"ene\":85.3579847009112,\"int\":66,\"cha\":75.68,\"exp\":67.76800000000073,\"cre\":51.92,\"eff\":69.52,\"sal\":934.5600000000001,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sHuVWC6\",\"mor\":100,\"hap\":90.391368204085,\"ene\":90.39128130306793,\"int\":42.400000000000006,\"cha\":60,\"exp\":96.96800000000074,\"cre\":67.2,\"eff\":56,\"sal\":909.6,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Qe0njed\",\"mor\":100,\"hap\":90.40442009417865,\"ene\":90.40144967797958,\"int\":95.06,\"cha\":81.34,\"exp\":93.84800000000074,\"cre\":71.53999999999999,\"eff\":93.1,\"sal\":1246.56,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hk6yuid\",\"mor\":100,\"hap\":90.33849931210221,\"ene\":90.33606631225163,\"int\":84.63000000000001,\"cha\":80.99000000000001,\"exp\":110.36800000000073,\"cre\":62.79,\"eff\":67.34,\"sal\":1160.25,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8kYANMx\",\"mor\":100,\"hap\":90.43902281427968,\"ene\":90.43629810288135,\"int\":58.96,\"cha\":45.76,\"exp\":98.56800000000074,\"cre\":73.04,\"eff\":62.48,\"sal\":958.32,\"pro\":0,\"cyclesUntilRaise\":344,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}}],\"employeeProd\":{\"Operations\":416.62806733276,\"Engineer\":229.73415787416127,\"Business\":165.16778935593945,\"Management\":325.2470555360635,\"Research & Development\":269.4074340658093,\"total\":1406.1845041647334,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Volhaven\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"oXT5WQA\",\"mor\":100,\"hap\":90.28547204995694,\"ene\":90.286228017538,\"int\":52.8,\"cha\":74.8,\"exp\":81.31000000000074,\"cre\":51.04,\"eff\":83.6,\"sal\":971.52,\"pro\":0,\"cyclesUntilRaise\":230,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TXg1l1y\",\"mor\":90,\"hap\":90.25265082374803,\"ene\":90.25536271898977,\"int\":84.28,\"cha\":43.86,\"exp\":93.67000000000074,\"cre\":44.72,\"eff\":56.76,\"sal\":910.74,\"pro\":0,\"cyclesUntilRaise\":230,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"2xZUuuO\",\"mor\":100,\"hap\":80.04673199689513,\"ene\":90.40131471104444,\"int\":77.35000000000001,\"cha\":69.16,\"exp\":73.40000000000074,\"cre\":71.89,\"eff\":67.34,\"sal\":1018.2900000000001,\"pro\":0,\"cyclesUntilRaise\":230,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9aHK1OZ\",\"mor\":100,\"hap\":90.33207652159672,\"ene\":90.33262703805997,\"int\":70.2,\"cha\":61.2,\"exp\":80.00700000000074,\"cre\":68.4,\"eff\":79.2,\"sal\":1017.9,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fF2BBHJ\",\"mor\":100,\"hap\":90.30546364630844,\"ene\":90.30678275601723,\"int\":49.4,\"cha\":66.88,\"exp\":82.02700000000074,\"cre\":49.4,\"eff\":51.68,\"sal\":839.04,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VdxFCnL\",\"mor\":100,\"hap\":90.39237072483989,\"ene\":90.39386964163982,\"int\":95,\"cha\":56.05,\"exp\":82.40700000000074,\"cre\":83.6,\"eff\":84.55,\"sal\":1145.7,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}}],\"employeeProd\":{\"Operations\":491.4580520930256,\"Engineer\":241.6063835124749,\"Business\":120.72369023427648,\"Management\":268.44794940874147,\"Research & Development\":211.84230423613064,\"total\":1334.078379484649,\"Unassigned\":0}}}},\"name\":\"Health Co.\",\"type\":\"Healthcare\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":10436.915881556939,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Robots\":10,\"AICores\":5,\"Energy\":5,\"Water\":5},\"prodMats\":[],\"products\":{\"Hospital 1\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Hospital 1\",\"dmd\":33.07246855705177,\"cmp\":41.96999999999075,\"mku\":19.725552646810403,\"pCost\":4741327.030315884,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":94.95857061996877,\"qlt\":91.22769167433081,\"per\":88.96060989621294,\"dur\":105.04988997047015,\"rel\":95.95082558196883,\"aes\":79.40579386529082,\"fea\":102.81196288977485,\"data\":{\"Aevum\":[0,3.5355364180402225,3.5355364180402225],\"Chongqing\":[0,3.5807360069003793,3.5807360069003793],\"Ishima\":[0,3.6897943813799907,3.6897943813799907],\"New Tokyo\":[0,3.6006006548066667,3.6006006548066667],\"Sector-12\":[0,3.478144715754317,3.478144715754317],\"Volhaven\":[0,3.711687011451919,3.711687011451919]},\"loc\":\"\",\"siz\":5.8,\"reqMats\":{\"Robots\":10,\"AICores\":5,\"Energy\":5,\"Water\":5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Hospital 2\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Hospital 2\",\"dmd\":35.1332691945402,\"cmp\":27.429600000002143,\"mku\":17.614637740689343,\"pCost\":4741327.030315884,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":113.00835040508551,\"qlt\":108.63954282274322,\"per\":106.09744877322086,\"dur\":124.89692135626409,\"rel\":114.05587897284205,\"aes\":94.33560646518646,\"fea\":122.36332571187118,\"data\":{\"Aevum\":[0,3.5355364180402225,3.5355364180402225],\"Chongqing\":[0,3.5807360069003793,3.5807360069003793],\"Ishima\":[0,3.6897943813799907,3.6897943813799907],\"New Tokyo\":[0,3.6006006548066667,3.6006006548066667],\"Sector-12\":[0,3.478144715754317,3.478144715754317],\"Volhaven\":[0,3.711687011451919,3.711687011451919]},\"loc\":\"\",\"siz\":5.8,\"reqMats\":{\"Robots\":10,\"AICores\":5,\"Energy\":5,\"Water\":5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Hospital 3\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Hospital 3\",\"dmd\":33.08310447297997,\"cmp\":51.9187999999932,\"mku\":16.298683488784924,\"pCost\":4741327.030315884,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":127.4890750153485,\"qlt\":122.66084472728704,\"per\":119.98392799594134,\"dur\":140.79638939670414,\"rel\":128.47488757802174,\"aes\":106.21104321514143,\"fea\":138.04239111762615,\"data\":{\"Aevum\":[0,3.5355364180402225,3.5355364180402225],\"Chongqing\":[0,3.5807360069003793,3.5807360069003793],\"Ishima\":[0,3.6897943813799907,3.6897943813799907],\"New Tokyo\":[0,3.6006006548066667,3.6006006548066667],\"Sector-12\":[0,3.478144715754317,3.478144715754317],\"Volhaven\":[0,3.711687011451919,3.711687011451919]},\"loc\":\"\",\"siz\":5.8,\"reqMats\":{\"Robots\":10,\"AICores\":5,\"Energy\":5,\"Water\":5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":381.18588945558776,\"popularity\":107.66762620538631,\"startingCost\":750000000000,\"reFac\":0.1,\"sciFac\":0.75,\"hwFac\":0.1,\"robFac\":0.1,\"aiFac\":0.1,\"advFac\":0.11,\"prodMult\":6,\"lastCycleRevenue\":\"262898088.6677823\",\"lastCycleExpenses\":\"52615305.358318740003\",\"thisCycleRevenue\":\"2627705132.7232094\",\"thisCycleExpenses\":\"525898312.96331310003\",\"upgrades\":[67,27],\"state\":\"EXPORT\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":10.606609254120666,\"loc\":\"Aevum\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.29390380133594,\"dmdR\":[65,85],\"cmp\":47.281084778155915,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":53.033838937532956,\"sll\":0.0007926669296182354,\"prd\":-53.033046270603336,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1567.8763462038994,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":91.87318631193756,\"dmdR\":[80,99],\"cmp\":84.41925927492484,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":53.033838937532956,\"sll\":0.0007926669296182354,\"prd\":-53.033046270603336,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2009.2277349228414,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":86.54081644264036,\"dmdR\":[80,90],\"cmp\":80.61829397449044,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7758.650137439755,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":106.06767787506591,\"sll\":0.0015853338592364708,\"prd\":-106.06609254120667,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72005.5253960408,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":89.99976088752665,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":53.033838937532956,\"sll\":0.0007926669296182354,\"prd\":-53.033046270603336,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13848.80505048239,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":37.22204279600911,\"dmdR\":[5,99],\"cmp\":25.922325666994492,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":99798.9486826774,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":10.434434147262952,\"loc\":\"Sector-12\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75.46825427867027,\"dmdR\":[65,85],\"cmp\":54.91811838613042,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":52.17265661946661,\"sll\":0.000485883151844746,\"prd\":-52.172170736314754,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1388.8964079133723,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":89.74240564529957,\"dmdR\":[80,99],\"cmp\":85.1397702389931,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":52.17265661946661,\"sll\":0.000485883151844746,\"prd\":-52.172170736314754,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1947.6661572409669,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.22634378781284,\"dmdR\":[80,90],\"cmp\":73.12789737945626,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8319.516657253253,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":104.34531323893322,\"sll\":0.000971766303689492,\"prd\":-104.34434147262951,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72489.61988825057,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":96.52019925689484,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":52.17265661946661,\"sll\":0.000485883151844746,\"prd\":-52.172170736314754,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":18982.117478857155,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":46.520700924202124,\"dmdR\":[5,99],\"cmp\":30.381776024655238,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":81188.32969094533,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":10.801801964420001,\"loc\":\"New Tokyo\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":74.36317220614967,\"dmdR\":[65,85],\"cmp\":50.52765824260004,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":54.00957764359467,\"sll\":0.0005678214946613025,\"prd\":-54.0090098221,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1490.6181786512361,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":81.87089478739719,\"dmdR\":[80,99],\"cmp\":79.81571972825427,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":54.00957764359467,\"sll\":0.0005678214946613025,\"prd\":-54.0090098221,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1917.8456760228419,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.58072378537683,\"dmdR\":[80,90],\"cmp\":80.45234156325962,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8457.24789388798,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":108.01915528718934,\"sll\":0.001135642989322605,\"prd\":-108.0180196442,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":61744.22350305672,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":81.42721093597177,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":54.00957764359467,\"sll\":0.0005678214946613025,\"prd\":-54.0090098221,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":25060.978113516034,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":51.349810618537326,\"dmdR\":[5,99],\"cmp\":44.916810616433985,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":56138.94842603056,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":11.069383144139973,\"loc\":\"Ishima\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":68.67068502576167,\"dmdR\":[65,85],\"cmp\":49.532588950660944,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":55.347248738980724,\"sll\":0.0003330182808667814,\"prd\":-55.346915720699855,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1435.5324274459822,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":95.9457338636594,\"dmdR\":[80,99],\"cmp\":73.28652862954154,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":55.347248738980724,\"sll\":0.0003330182808667814,\"prd\":-55.346915720699855,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2111.0359384082453,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.19489452955773,\"dmdR\":[80,90],\"cmp\":74.30324405695885,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7446.344633941445,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":110.69449747796145,\"sll\":0.0006660365617335628,\"prd\":-110.69383144139971,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":66567.64572220868,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":83.79546103710838,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":55.347248738980724,\"sll\":0.0003330182808667814,\"prd\":-55.346915720699855,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8925.659797430986,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":83.15254926011085,\"dmdR\":[5,99],\"cmp\":33.86714473706883,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":108875.03150267771,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":11.135061034355758,\"loc\":\"Volhaven\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":70.4359454430718,\"dmdR\":[65,85],\"cmp\":46.99292881868299,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":55.67571554814242,\"sll\":0.0004103763636351232,\"prd\":-55.67530517177878,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1512.6647683984345,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":86.02909901256727,\"dmdR\":[80,99],\"cmp\":84.66627732318324,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":55.67571554814242,\"sll\":0.0004103763636351232,\"prd\":-55.67530517177878,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2057.2505752200623,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.15211807049933,\"dmdR\":[80,90],\"cmp\":92.45263640304313,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8071.482770126921,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":111.35143109628484,\"sll\":0.0008207527272702464,\"prd\":-111.35061034355756,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86869.29416314143,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":82.0470917691221,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":55.67571554814242,\"sll\":0.0004103763636351232,\"prd\":-55.67530517177878,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12344.577542734018,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":32.573352557682874,\"dmdR\":[5,99],\"cmp\":40.83011524546508,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":67787.8319178003,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"\",\"level\":15,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":10.742208020701138,\"loc\":\"Chongqing\",\"size\":3000,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":69.05233070076108,\"dmdR\":[65,85],\"cmp\":57.20677708142386,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":53.71166041242995,\"sll\":0.0006203089242717396,\"prd\":-53.71104010350569,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1435.3520169119342,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90.8908371753288,\"dmdR\":[80,99],\"cmp\":76.78418090009814,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":53.71166041242995,\"sll\":0.0006203089242717396,\"prd\":-53.71104010350569,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2139.47413553076,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.06216722896897,\"dmdR\":[80,90],\"cmp\":85.28041168095537,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7320.6416009023305,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":107.4233208248599,\"sll\":0.0012406178485434793,\"prd\":-107.42208020701138,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69805.65793452499,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":81.92820085682716,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":53.71166041242995,\"sll\":0.0006203089242717396,\"prd\":-53.71104010350569,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13936.407437847634,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":76.5047669692097,\"dmdR\":[5,99],\"cmp\":61.16727267569067,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86046.65487920858,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"f9ycdcV\",\"mor\":100,\"hap\":92.72724427113131,\"ene\":92.67791248018742,\"int\":51.48,\"cha\":49.5,\"exp\":77.05800000000055,\"cre\":56.43,\"eff\":54.45,\"sal\":822.6899999999999,\"pro\":0,\"cyclesUntilRaise\":304,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"WMMSkAA\",\"mor\":100,\"hap\":88.0567860622091,\"ene\":92.7223214977726,\"int\":43.120000000000005,\"cha\":39.27,\"exp\":82.44800000000056,\"cre\":76.23,\"eff\":49.28,\"sal\":826.98,\"pro\":0,\"cyclesUntilRaise\":304,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"84ncht4\",\"mor\":100,\"hap\":92.70924415908989,\"ene\":92.65692036968696,\"int\":46.28,\"cha\":62.300000000000004,\"exp\":93.00800000000056,\"cre\":80.99,\"eff\":69.42,\"sal\":1011.9300000000001,\"pro\":0,\"cyclesUntilRaise\":304,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3PSiIu2\",\"mor\":100,\"hap\":92.71069788945404,\"ene\":92.65460324459659,\"int\":78.26,\"cha\":86,\"exp\":87.78500000000055,\"cre\":58.48,\"eff\":49.019999999999996,\"sal\":1034.58,\"pro\":0,\"cyclesUntilRaise\":305,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Q7w6BFy\",\"mor\":100,\"hap\":92.6602630572212,\"ene\":84.17354568834459,\"int\":84.28,\"cha\":68.8,\"exp\":60.265000000000555,\"cre\":73.96,\"eff\":73.1,\"sal\":1037.16,\"pro\":0,\"cyclesUntilRaise\":305,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"kLy45uG\",\"mor\":100,\"hap\":92.75362325927112,\"ene\":87.85176350114139,\"int\":69,\"cha\":46,\"exp\":62.52500000000056,\"cre\":60.720000000000006,\"eff\":76.36,\"sal\":899.76,\"pro\":0,\"cyclesUntilRaise\":305,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}}],\"employeeProd\":{\"Operations\":390.32255481556865,\"Engineer\":264.8504170725756,\"Business\":130.19201607397687,\"Management\":253.4037165653549,\"Research & Development\":255.1643013914479,\"total\":1293.933005918924,\"Unassigned\":0}}},\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"oeEVrbW\",\"mor\":90,\"hap\":92.68220058117507,\"ene\":92.68181657139797,\"int\":95,\"cha\":84,\"exp\":74.78100000000056,\"cre\":58,\"eff\":100,\"sal\":1191,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tJ1t7SE\",\"mor\":100,\"hap\":92.69559680288317,\"ene\":92.69459846092035,\"int\":54.67,\"cha\":68.53,\"exp\":72.53100000000056,\"cre\":56.21,\"eff\":45.43,\"sal\":847.77,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"aa3VpqZ\",\"mor\":100,\"hap\":92.58486191759006,\"ene\":80.50566806533975,\"int\":84.55,\"cha\":53.199999999999996,\"exp\":78.43100000000055,\"cre\":57,\"eff\":79.8,\"sal\":1014.5999999999999,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"plAh0iX\",\"mor\":100,\"hap\":92.53259775310615,\"ene\":88.58437520750681,\"int\":72.98,\"cha\":60.52,\"exp\":76.19100000000056,\"cre\":82.77,\"eff\":79.21000000000001,\"sal\":1070.67,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Business\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"W6z8kyt\",\"mor\":100,\"hap\":92.6447838502548,\"ene\":92.64433454843409,\"int\":76.5,\"cha\":58.65,\"exp\":87.88100000000055,\"cre\":45.05,\"eff\":60.35,\"sal\":940.9499999999999,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Management\",\"salary\":550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Okt7Qjs\",\"mor\":100,\"hap\":92.61639885385243,\"ene\":92.61459492503872,\"int\":79.2,\"cha\":59.4,\"exp\":101.90100000000056,\"cre\":76.23,\"eff\":81.17999999999999,\"sal\":1149.39,\"pro\":0,\"cyclesUntilRaise\":273,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":550}}],\"employeeProd\":{\"Operations\":441.94539835420636,\"Engineer\":252.09400418976466,\"Business\":126.82399383106771,\"Management\":263.500686273732,\"Research & Development\":332.66348965853666,\"total\":1417.0275723073075,\"Unassigned\":0}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"name\":\"Real Co.\",\"type\":\"RealEstate\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":2768.2882274670724,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Metal\":5,\"Energy\":5,\"Water\":2,\"Hardware\":4},\"prodMats\":[\"RealEstate\"],\"products\":{\"Lot 1\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Lot 1\",\"dmd\":24.757107503073417,\"cmp\":56.49319999999419,\"mku\":16.581110768015037,\"pCost\":269035.95936122583,\"sCost\":0,\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":98.42483030711126,\"qlt\":99.55301319262452,\"per\":91.34349021733858,\"dur\":109.52697573183926,\"rel\":97.30548640780465,\"aes\":89.06262223550983,\"fea\":102.30017312417645,\"data\":{\"Aevum\":[3568.8163745498014,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[3567.0706803514186,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0.89,\"reqMats\":{\"Metal\":5,\"Energy\":5,\"Water\":2,\"Hardware\":4},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Lot 2\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Lot 2\",\"dmd\":25.24975489467063,\"cmp\":56.00039999999534,\"mku\":16.76226235286288,\"pCost\":269035.95936122583,\"sCost\":0,\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":96.77969889981759,\"qlt\":97.9001029586594,\"per\":89.88314705409175,\"dur\":107.67573577015297,\"rel\":95.73619338820487,\"aes\":87.54355721520578,\"fea\":100.66880001404947,\"data\":{\"Aevum\":[1.9413373839423335e-31,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[2.650079603476836e-31,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0.89,\"reqMats\":{\"Metal\":5,\"Energy\":5,\"Water\":2,\"Hardware\":4},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Lot 3\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Lot 3\",\"dmd\":25.712103348490576,\"cmp\":17.538000000000903,\"mku\":16.95380159432909,\"pCost\":269035.95936122583,\"sCost\":0,\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":95.14332046274791,\"qlt\":96.26589840610944,\"per\":88.44797180250224,\"dur\":105.84729032193883,\"rel\":94.16238832230707,\"aes\":86.02085072252315,\"fea\":99.04781615927503,\"data\":{\"Aevum\":[2.1211060739291662e-47,0,0],\"Chongqing\":[0,0,0],\"Ishima\":[0,0,0],\"New Tokyo\":[0,0,0],\"Sector-12\":[2.9421793928694885e-47,0,0],\"Volhaven\":[0,0,0]},\"loc\":\"\",\"siz\":0.89,\"reqMats\":{\"Metal\":5,\"Energy\":5,\"Water\":2,\"Hardware\":4},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":216.96400000001603,\"popularity\":53.747999999997774,\"startingCost\":600000000000,\"reFac\":0,\"sciFac\":0.05,\"hwFac\":0.05,\"robFac\":0.6,\"aiFac\":0.6,\"advFac\":0.25,\"prodMult\":2,\"lastCycleRevenue\":\"2655.5892573304212\",\"lastCycleExpenses\":\"226141.9235971974\",\"thisCycleRevenue\":\"26710.09338781756\",\"thisCycleExpenses\":\"2259511.8682606758\",\"upgrades\":[22,0],\"state\":\"EXPORT\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Lot 1: 3,176<br>Lot 2: 0<br>Lot 3: 0<br>\",\"level\":16,\"sizeUsed\":3176.246573349323,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":5.144594995151972,\"loc\":\"Aevum\",\"size\":3200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":73.06999382681667,\"dmdR\":[65,85],\"cmp\":47.56199420949557,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":10.28925361509462,\"sll\":10.28925361509462,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1527.5814946086323,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":83.8703089361934,\"dmdR\":[80,99],\"cmp\":87.30838424530451,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":25.72313403773655,\"sll\":25.72313403773655,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1923.4107142325097,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":76.36707593127028,\"dmdR\":[75,85],\"cmp\":78.08382831806962,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":25.72313403773655,\"sll\":16,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2730.635559486388,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.84439037429422,\"dmdR\":[80,90],\"cmp\":92.08829002067453,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":20.57850723018924,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7907.0864529369655,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75900.77043914118,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":83.78596420703133,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":17574.700932504362,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":4.451249564413772,\"dmd\":48.54892902166225,\"dmdR\":[5,99],\"cmp\":41.77006746936073,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":57872.227036213175,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Lot 1: 3,175<br>Lot 2: 0<br>Lot 3: 0<br>\",\"level\":16,\"sizeUsed\":3174.6929055127625,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":5.28227651022238,\"loc\":\"Sector-12\",\"size\":3200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":76.53028223963358,\"dmdR\":[65,85],\"cmp\":55.98004277377529,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":10.564648805860031,\"sll\":10.51464880586003,\"prd\":-0.05,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1462.9103237018633,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":96.32163407669306,\"dmdR\":[80,99],\"cmp\":85.8689540418305,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":26.411622014650078,\"sll\":26.286622014650078,\"prd\":-0.125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1950.0077707957364,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":82.12366439638781,\"dmdR\":[75,85],\"cmp\":70.5747748045214,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":26.411622014650078,\"sll\":17.175,\"prd\":-0.125,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2167.8851566331437,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.82151594394242,\"dmdR\":[80,90],\"cmp\":65.83828380219643,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":21.129297611720062,\"sll\":0,\"prd\":-0.1,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7572.9766469242595,\"sCost\":\"MP*0\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74846.81297204371,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":82.8160939478234,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15656.125394233073,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":4.287349173084269,\"dmd\":83.44739281022531,\"dmdR\":[5,99],\"cmp\":69.81951852870681,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0.025,\"prd\":0.025,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":106840.37355127024,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":\"2943764263525.4521846\",\"revenue\":\"274933941.94582982342\",\"expenses\":\"54957585.443546081073\",\"fundingRound\":0,\"public\":true,\"totalShares\":2590000000,\"numShares\":1033645000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":50,\"dividendTaxPercentage\":35,\"issuedShares\":852355000,\"sharePrice\":6244.165217019753,\"storedCycles\":801112,\"unlockUpgrades\":[1,1,1,1,1,1,1],\"upgrades\":[1,10,11,0,3,3,3,3,3,0],\"upgradeMultipliers\":[1.03,2,1.011,1,1.3,1.3,1.3,1.3,1.03,1],\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}}}},\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1561342030373,\"totalPlaytime\":6122676000,\"playtimeSinceLastAug\":419842400,\"playtimeSinceLastBitnode\":419842400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":1118813378350.8933,\"crime\":257897779.20008346,\"gang\":26064830.66407531,\"hacking\":24489385820.92709,\"hacknetnode\":337781276.28704244,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":1143924508084.4868,\"work\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":1118813378350.8933,\"crime\":257897779.20008346,\"gang\":26064830.66407531,\"hacking\":24489385820.92709,\"hacknetnode\":337781276.28704244,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":1143924508084.4868,\"work\":0}},\"scriptProdSinceLastAug\":22600115624,\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0,\"factionWorkType\":\"Faction Hacking Work\"}}","AllServersSave":"{\"60.8.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"60.8.2.2\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\"],\"ramUsed\":33.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/master/hacking/director-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":276561.02799999993,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143249.80999951292,\"ramUsage\":9.75,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[300,\"tprint\"],\"dataMap\":{},\"filename\":\"/master/hacking/monitor-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":276561.03500000003,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":143248.60999951285,\"ramUsage\":3,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/master/world/gang/godfather-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":42284.005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26157.61000006159,\"ramUsage\":20.7,\"server\":\"60.8.2.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var equipment = gang.getTaskNames();\\n\\nfor (i=0; i < equipment.length; i++) {\\n    tprint(equipment[i]);\\n}\\n\\n\\n\\ntprint(\\\"Done!\\\");\",\"filename\":\"/temp/scratch.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"clear(1);\\n\\ni=0;\\nvar success = true;\\n\\nwhile(success)\\n{\\n    success = tryWrite(1, i);\\n    print(\\\"Tried to write \\\" + i + \\\" to port 1. Success: \\\" + success);\\n    i++;\\n}\\n\\nclear(1);\",\"filename\":\"/temp/port_write_script_test.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/scripts/hacking_2_0/helpers/hack_target.script\\\";\\nvar growScript = \\\"/scripts/hacking_2_0/helpers/grow_target.script\\\";\\nvar weakenScript = \\\"/scripts/hacking_2_0/helpers/weaken_target.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/temp/copy_test/scripts/hacking_2_0/run.script\",\"module\":\"\",\"ramUsage\":4.9,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"filename\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"module\":\"\",\"ramUsage\":0,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    \\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/_getScriptList-ns2.js\\\", \\\"/pull/_getScriptList-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/pull_scripts-ns2.js\\\", \\\"/pull/pull_scripts-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/destroy_scripts-ns2.js\\\", \\\"/pull/destroy_scripts-ns2.js\\\");\\n\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait ns.run(\\\"/pull/pull_scripts-ns2.js\\\", 1, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t\\tns.tprint(\\\"===== ALERT ===== Valid values: master, beta\\\");\\n\\t}\\n\\n\\tns.tprint(\\\"Pull complete!\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait pull(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function pull(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\n\\t// gitHub Setup\\n\\tvar gitHubBranchPath = branch;\\n\\tvar gitHubPrjectURL = \\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/\\\";\\n\\tvar gitHubScriptsPath = \\\"/home/scripts\\\";\\n\\t\\n\\t// bitBurner setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar sourcePath = gitHubPrjectURL + gitHubBranchPath + gitHubScriptsPath + scriptPath;\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.wget(sourcePath, destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait destroy(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function destroy(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\tvar deprecatedScripts = getDrecatedScriptList();\\n\\t\\n\\t// bitBurner path setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n\\t\\n\\tfor(var i = 0; i < deprecatedScripts.length; i++) {\\n\\t\\tvar scriptPath = deprecatedScripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/destroy_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"run(\\\"./../path_bravo/test.script\\\");\",\"filename\":\"/temp/rel_dir_test/path_alpha/test.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"tprint(\\\"Test successful\\\");\",\"filename\":\"/temp/rel_dir_test/path_bravo/test.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_getScriptList : true,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getScriptList(){\\n\\tvar scripts = [\\n\\t\\t// buy_server\\n\\t\\t\\\"/buy_server/buy_server-ns1.script\\\",\\n\\t\\t\\\"/buy_server/buy_server-ns2.js\\\",\\n\\t\\t// hacknet\\n\\t\\t\\\"/character/hacknet/hashmanager-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/node_autobuy-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/server_autobuy-ns2.js\\\",\\n\\t\\t// walet\\n\\t\\t\\\"/character/wallet-ns2.js\\\",\\n\\t\\t// deploy\\n\\t\\t\\\"/deploy/kill_all-ns2.js\\\",\\n\\t\\t\\\"/deploy/server_steal_basic-ns2.js\\\",\\n\\t\\t// functions\\n\\t\\t\\\"/functions/buildServerInfoArray-ns2.js\\\",\\n\\t\\t\\\"/functions/enumLib-ns1.script\\\",\\n\\t\\t\\\"/functions/enumLib-ns2.js\\\",\\n\\t\\t\\\"/functions/getNumOpenablePorts-ns2.js\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns2.js\\\",\\n\\t\\t\\\"/functions/getServerRamObj-ns2.js\\\",\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/advanced/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/advanced/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_harakiri-sushi-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_joesguns-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_template-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/deployHackBots-ns2.js\\\",\\n\\t\\t\\\"/hacking/director-ns2.js\\\",\\n\\t\\t\\\"/hacking/monitor-ns2.js\\\",\\n\\t\\t// pserv\\n\\t\\t\\\"/pserv/deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall_and_deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall-ns1.script\\\",\\n\\t\\t// restart_run\\n\\t\\t\\\"/restart_run/restart_run-ns1.script\\\",\\n\\t\\t// templates\\n\\t\\t\\\"/templates/ns1_template.js\\\",\\n\\t\\t\\\"/templates/ns2_template.js\\\",\\n\\t\\t// world\\n\\t\\t\\\"/world/contracts/foreman-ns2.js\\\",\\n\\t\\t\\\"/world/gang/godfather-ns2.js\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\nexport function getDrecatedScriptList(){\\n\\tvar scripts = [\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/director-ns1.script\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_getScriptList)\\n\\t\\ttest_getScriptList(ns);\\n}\\n\\nfunction test_getScriptList(ns) {\\n\\tns.print(\\\"==== TEST: test_getScriptList ====\\\");\\n\\n\\tscripts = getScriptList();\\n\\tfor (var i = 0; i < scripts.length; i++) {\\n\\t\\tns.print(scripts[i]);\\n\\t}\\n}\",\"filename\":\"/pull/_getScriptList-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\thashReserve : 0,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_TotalHacknetProductionEnabled : false,\\n\\ttestEnabled_getTotalHashCapacity : false,\\n\\ttestEnabled_evaluateMinimumHacknetProduction : false,\\n\\ttestEnabled_evaluateImporoveStudying : false,\\n};\\n\\nvar eUpgradeName = {\\n\\tsellForMoney : \\\"Sell for Money\\\",\\n\\tsellForCorporationFunds : \\\"Sell for Corporation Funds\\\",\\n\\treduceMinimumSecurity : \\\"Reduce Minimum Security\\\",\\n\\tincreaseMaximumMoney : \\\"Increase Maximum Money\\\",\\n\\timproveStudying : \\\"Improve Studying\\\",\\n\\timproveGymTraining : \\\"Improve Gym Training\\\",\\n\\texchangeForCorporationResearch : \\\"Exchange for Corporation Research\\\",\\n\\texchangeForBladeburnerRank : \\\"Exchange for Bladeburner Rank\\\",\\n\\texchangeForBladeburnerSkillPpoints : \\\"Exchange for Bladeburner SP\\\",\\n\\tgenerateCodingContract : \\\"Generate Coding Contract\\\",\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\t// Real Logic\\n\\tif (!tests.disableMain) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.print(\\\"Starting main function\\\");\\n\\t\\tvar upgradeToBuy = eUpgradeName.sellForMoney;\\n\\n\\t\\twhile(true) {\\n\\t\\t\\tupgradeToBuy = decideWhatToBuy(ns);\\n\\t\\t\\tns.print(\\\"Decided to buy: \\\" + upgradeToBuy);\\n\\t\\t\\tawait buyUpgrade(ns, upgradeToBuy);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getTotalHashCapacity(ns) {\\n\\tvar hashCapacity = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\thashCapacity += 64 * Math.pow(2, ns.hacknet.getNodeStats(i).cache - 1);\\n\\t}\\n\\t\\n\\t\\n\\t// see how many hacknet nodes we have \\n\\t// see how many cache upgrades we have \\n\\t\\n\\treturn hashCapacity;\\n}\\n\\nfunction getTotalHacknetHashProduction(ns) {\\n\\tvar totalHacknetProduction = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\ttotalHacknetProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\t\\n\\treturn totalHacknetProduction;\\n}\\n\\nfunction decideWhatToBuy(ns) {\\n\\tvar upgradeNameToPurchase = eUpgradeName.sellForMoney; // if nothing else, we'll decide to convert to cash\\n\\t\\n\\t/* Purchase Priority goals - Go down the list, and do the first thing that is true\\n\\t\\t1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\t\\t2) We should then start spending some on University upgrades \\n\\t\\tZ) Convert to cash (which we defaulted to when declaring the return variable)\\n\\t*/\\n\\t\\n\\t// 1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\tif (evaluateMinimumHacknetProduction(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.sellForMoney; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\t// 2) We should then start spending some on University upgrades \\n\\tif (evaluateImporoveStudying(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.improveStudying; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\treturn upgradeNameToPurchase;\\n}\\n\\nasync function buyUpgrade(ns, upgradeToBuy) {\\n\\tvar upgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\tvar desiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\n\\twhile (desiredHashCount < upgradeHashCost){\\n\\t\\tns.print(\\\"Waiting for more hashes (Have: \\\" + ns.nFormat(desiredHashCount, \\\"0,0\\\") + \\\" / Want: \\\" + ns.nFormat(upgradeHashCost, \\\"0,0\\\") + \\\")\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tupgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\t\\tdesiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\t}\\n\\t\\n\\tif ((ns.hacknet.numHashes()-sVars.hashReserve) > ns.hacknet.hashCost(upgradeToBuy)) {\\n\\t\\tns.print(\\\"Spending hashes on: \\\" + upgradeToBuy);\\n\\t\\tns.hacknet.spendHashes(upgradeToBuy);\\n\\t}\\n}\\n\\nfunction evaluateMinimumHacknetProduction(ns) {\\n\\tif (getTotalHacknetHashProduction(ns) < 1) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nfunction evaluateImporoveStudying(ns) {\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tvar hashCapacityPcnt = 0.50;\\n\\n\\tif (imporoveStudyingCost < hashCapacity * hashCapacityPcnt) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_TotalHacknetProductionEnabled)\\n\\t\\ttest_getTotalHacknetHashProduction(ns);\\n\\tif (tests.testEnabled_getTotalHashCapacity)\\n\\t\\ttest_getTotalHashCapacity(ns);\\n\\tif (tests.testEnabled_evaluateMinimumHacknetProduction)\\n\\t\\ttest_evaluateMinimumHacknetProduction(ns);\\n\\tif (tests.testEnabled_evaluateImporoveStudying)\\n\\t\\ttest_evaluateImporoveStudying(ns);\\n}\\n\\nfunction test_getTotalHacknetHashProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHacknetHashProduction ====\\\");\\n\\tvar totalHashProduction = getTotalHacknetHashProduction(ns);\\n\\tns.print(\\\"Total Hash Production: \\\" + totalHashProduction);\\n}\\n\\nfunction test_getTotalHashCapacity(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHashCapacity ====\\\");\\n\\tvar hashCapactiy = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapactiy: \\\" + hashCapactiy);\\n}\\n\\nfunction test_evaluateMinimumHacknetProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateMinimumHacknetProduction ====\\\");\\n\\tvar resultOfEvaluation = evaluateMinimumHacknetProduction(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\nfunction test_evaluateImporoveStudying(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateImporoveStudying ====\\\");\\n\\t\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tns.print(\\\"imporoveStudyingCost: \\\" + imporoveStudyingCost);\\n\\t\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapacity: \\\" + hashCapacity);\\t\\n\\t\\n\\tvar resultOfEvaluation = evaluateImporoveStudying(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\n// ===== REFERENCE ============\\n/* Function Reference\\nnumHashes()\\nhashCost(upgName)\\nspendHashes(upgName, upgTarget)\\n*/\\n\\n/* Hash Upgrade Table\\nSell for Money\\t\\t\\t\\t\\t\\t\\tBase Cost: 4.000\\t\\tSell hashes for $1m\\nSell for Corporation Funds\\t\\t\\t\\tBase Cost: 100.000\\t\\tSell hashes for $1b in Corporation funds\\nReduce Minimum Security\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to decrease the minimum security of a single server by 2%. Note that a server's minimum security cannot go below 1.\\nIncrease Maximum Money\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to increase the maximum amount of money on a single server by 2%\\nImprove Studying\\t\\t\\t\\t\\t\\tBase Cost: 100.000\\t\\tUse hashes to improve the experience earned when studying at a university by 20%. This effect persists until you install Augmentations\\nImprove Gym Training\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to improve the experience earned when training at the gym by 20%. This effect persists until you install Augmentations\\nExchange for Corporation Research\\t\\tBase Cost: 200.000\\t\\tExchange hashes for 1k Scientific Research in all of your Corporation's Industries\\nExchange for Bladeburner Rank\\t\\t\\tBase Cost: 250.000\\t\\tExchange hashes for 100 Bladeburner Rank\\nExchange for Bladeburner SP\\t\\t\\t\\tBase Cost: 250.000\\t\\tExchanges hashes for 10 Bladeburner Skill Points\\nGenerate Coding Contract\\t\\t\\t\\tBase Cost: 200.000\\t\\tGenerate a random Coding Contract somewhere on the network\\n*/\",\"filename\":\"/master/character/hacknet/hashmanager-ns2.js\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 1024,\\n\\tnodeCoresLimit: 16,\\n\\tnodeCacheLimit: 5,\\n\\tmoneySpendLimitPercent: 0.90,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n\\tcache: 4,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cache:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CACHES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCacheAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.001;\\n    var ramModifier = Math.pow(1.07, Math.log2(ram));\\n    var coresModifier = (cores + 4) / 5;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction convertHashProductionToMoney(hashProduction){\\n\\tvar moneyProduction = 1000000/(4/hashProduction);\\n\\treturn moneyProduction;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Improving the cache size doesn't get us more production, but can be nice to have\\n\\t// Because there is no comparitive math here, we just early out by claiming we're going to buy a cache level\\n\\tif (evaluateImprovingCaches(ns)){\\n\\t\\tns.print(\\\"Choosing to buy cache upgrades\\\");\\n\\t\\treturn buy.cache;\\n\\t}\\n\\t\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction evaluateImprovingCaches(ns) {\\n\\tns.print(\\\"Evauluating if we should buy caches\\\");\\n\\tvar shouldBuy = false;\\n\\tvar baseNode = 0;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar levelUpgradeCost = ns.hacknet.getLevelUpgradeCost(baseNode, 1);\\n\\tvar ramUpgradeCost = ns.hacknet.getRamUpgradeCost(baseNode, 1);\\n\\tvar coreUpgradeCost = ns.hacknet.getCoreUpgradeCost(baseNode, 1);\\n\\tvar cacheUpgradeCost = ns.hacknet.getCacheUpgradeCost(baseNode, 1);\\n\\t // Multipliers on cost to be less than, lower means longer time between buying caches\\n\\tvar levelCostModifier = 0.50;\\n\\tvar ramCostModifier = 0.50;\\n\\tvar coreCostModifier = 0.50;\\n\\tvar cacheCostModifier = 0.50;\\n\\t\\n\\tif (cacheUpgradeCost < newNodeCost*levelCostModifier &&\\n\\t\\tcacheUpgradeCost < levelUpgradeCost*ramCostModifier &&\\n\\t\\tcacheUpgradeCost < ramUpgradeCost*coreCostModifier &&\\n\\t\\tcacheUpgradeCost < coreUpgradeCost*cacheCostModifier \\n\\t) {\\n\\t\\tshouldBuy = true;\\n\\t}\\n\\t\\n\\treturn shouldBuy;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/convertHashProductionToMoney(bareNodeProduction);\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/convertHashProductionToMoney(upgradedNodeProduction);\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/convertHashProductionToMoney(nextLevelProductionDelta);\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/convertHashProductionToMoney(nextRamProductionDelta);\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/convertHashProductionToMoney(nextCoreProductionDelta);\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCacheAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCache = ns.hacknet.getNodeStats(0).cache + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCacheAsync(ns, i, desiredCache);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCacheAsync(ns, nodeIndex, desiredCache) {\\n    // Keep going until we hit the desired cache amount\\n    while (ns.hacknet.getNodeStats(nodeIndex).cache < desiredCache) {\\n        var cost = ns.hacknet.getCacheUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cache\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a cache upgrade\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCache(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/server_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n    \\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n    hackingTarget : \\\"max-hardware\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n\\t\\t\\tns.killall(thisServer.name);\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/kill_all-ns2.js\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : true, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_nameDump : false,\\n\\ttestEnabled_nameAndPortsDump : false, \\n    testEnabled_dataDump : false,\\n    testEnabled_testScanArrayDump : false,\\n    testEnabled_sortByRequiredHackShowMaxMoney : true,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n    \\n\\t// - Tests ----------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.print(\\\"Starting main function\\\");\\n}\\n\\n// ===== FUNCTIONS ============\\nexport async function buildServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport async function buildHackableServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tif (returnedServerInfo[i].isHackable === true) {\\n\\t\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t\\t}\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport function getTargetInfo(ns, target, parent, depth) {\\n\\t//ns.print(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetIsHacknet = target.startsWith(\\\"hacknet\\\");\\n\\tvar targetIsPserv = target.startsWith(\\\"pserv\\\");\\n    var targetInfo;\\n\\t\\n\\tif (target === \\\"home\\\") {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : true,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsHacknet) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : true,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : 0,\\n\\t\\t\\tmaxMoney : 0,\\n\\t\\t\\tgrowth : 0,\\n\\t\\t\\tsecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tbaseSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tminSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\trequiredHackingLevel : Number.MAX_VALUE,\\n\\t\\t\\tnumPortsRequired : Number.MAX_VALUE,\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsPserv) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : true,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : false,\\n\\t\\t\\tisHackable : true,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\t\\n\\treturn targetInfo;\\n}\\n\\nexport async function processScanResultsRecursive(ns, serverListArray, parentServer, calledDepth) {\\n\\t// ns.print(\\\"---- Calling processScanResultsRecursive @ depth \\\" + calledDepth + \\\" ----\\\"); //DEBUG\\n\\tvar currentDepth = calledDepth + 1;\\n\\t\\n\\tvar returningTargetInfoArray = [];\\n\\t// Loop over all elements of serverListArray\\n\\tfor (var i = 0; i < serverListArray.length; i++) {\\n\\t\\tvar currentServerName = serverListArray[i];\\n\\t\\n\\t\\t// assign it's data to the array we're going to return\\n\\t\\treturningTargetInfoArray.push(getTargetInfo(ns, currentServerName, parentServer.name, currentDepth));\\n\\t\\t\\n\\t\\t// scan for more servers\\n\\t\\tvar neighboringServerArray = ns.scan(currentServerName);\\n\\t\\t// ns.print(\\\"== dumping neighboring servers pre-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, neighboringServerArray); //DEBUG\\n\\t\\t\\n\\t\\t// remove the parent from the list\\n\\t\\tvar parentNeighborIndex;\\n\\t\\t\\n\\t\\tfor (var j = 0; j < neighboringServerArray.length; j++) {\\n\\t\\t\\tif (neighboringServerArray[j] === parentServer.name) {\\n\\t\\t\\t\\tparentNeighborIndex = j;\\n\\t\\t\\t}\\n\\t\\t\\t// await ns.sleep(100);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// ns.print(\\\"parentNeighborIndex: \\\" + parentNeighborIndex); //DEBUG\\n\\t\\tvar childServerArray = neighboringServerArray;\\n\\t\\tchildServerArray.splice(parentNeighborIndex, 1);\\n\\t\\t\\n\\t\\t// ns.print(\\\"== dumping childServerArray servers post-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, childServerArray); //DEBUG\\n\\t\\t// ns.print(\\\"== childServerArray.length: \\\" + childServerArray.length); //DEBUG\\n\\t\\t\\n\\t\\t// call process scan results for the children\\n\\t\\tvar childServerInfoArray;\\n\\t\\t\\n\\t\\tif (childServerArray.length !== 0) {\\n\\t\\t\\t// ns.print(\\\"Attempting to call processScanResultsRecursive again\\\"); //DEBUG\\n\\t\\t\\tchildServerInfoArray = await processScanResultsRecursive(ns, childServerArray, getTargetInfo(ns, currentServerName, parentServer.name, currentDepth), currentDepth);\\n\\t\\t\\t// ns.print(\\\"childServerInfoArray.length :\\\" + childServerInfoArray.length); //DEBUG\\n\\t\\t\\t\\n\\t\\t\\t// push all the results from the children into the array\\n\\t\\t\\tfor (var k = 0; k < childServerInfoArray.length; k++) {\\n\\t\\t\\t\\treturningTargetInfoArray.push(childServerInfoArray[k]);\\n\\t\\t\\t\\t// await ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t// ns.print(\\\"== Skipped Recursion ===\\\"); //DEBUG\\n\\t\\t}\\n\\t\\t\\n\\t\\t// await ns.sleep(100);\\n\\t}\\n\\t\\n\\treturn returningTargetInfoArray;\\n}\\n\\n// ===== TESTS ================\\nasync function executeTests(ns) {\\n    var serverInfoArray = await buildServerInfoArray(ns);\\n\\n    if (tests.testEnabled_nameDump) { testNameDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_nameAndPortsDump) { testNameAndPortsDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_dataDump) { testDataDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_testScanArrayDump) { testScanArrayDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_sortByRequiredHackShowMaxMoney) { test_sortByRequiredHackShowMaxMoney(ns, serverInfoArray); }\\n}\\n\\nfunction testNameDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tns.print(serverInfoArray[i].name);\\n\\t}\\n} \\n\\nfunction testNameAndPortsDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameAndPortsDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"/Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testDataDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testDataDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"    /    Parent: \\\" + serverInfoArray[i].parent + \\\"    /    Depth: \\\" + serverInfoArray[i].depth + \\\"    /    Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testScanArrayDump(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: testScanArrayDump ====\\\");\\n\\tfor (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.print(\\\"Index: \\\" + i + \\\"/SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\nfunction test_sortByRequiredHackShowMaxMoney(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: test_sortByRequiredHackShowMaxMoney ====\\\");\\n    \\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / numPortsRequired: \\\" + serverListArray[i].numPortsRequired + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\",\"filename\":\"/master/functions/buildServerInfoArray-ns2.js\",\"module\":\"\",\"ramUsage\":2.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getEnumPortIndexVersion (version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns1.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n    \\n    var hackablePortNumber = getNumOpenablePorts(ns);\\n\\n    // figure out how many ports I can steal\\n    // build get the list of servers\\n    // based on how many ports I can open, use the install and run script    \\n\\n    ns.print(hackablePortNumber);\\n}\\n\\n// ========= FUNCTIONS ========= \\nexport function getNumOpenablePorts(ns) {\\n    var numOpenablePorts = 0;\\n    \\n    if(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    \\n    return numOpenablePorts;\\n}\\n\\n// =========== TESTS ===========\",\"filename\":\"/master/functions/getNumOpenablePorts-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getRootAccess (ns, target)\\n{\\n\\tif (ns.hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(target);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(target);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(target);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(target);\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        ns.nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns2.js\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args\\nvar destServ = args[0];\\nvar hackTargetServ = args[1];\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/master/functions/getRootAccess-ns1.script\\\",\\n    \\\"/master/hacking/advanced/run-ns1.script\\\",\\n    \\\"/master/hacking/helpers/grow_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/hack_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/weaken_target-ns1.script\\\"\\n    ];\\n\\nvar primaryScript = \\\"/master/hacking/advanced/run-ns1.script\\\";\\n\\nvar sourceServer = \\\"home\\\";\\n\\nscp(scripts, sourceServer, destServ);\\nexec(primaryScript, destServ, 1, hackTargetServ);\",\"filename\":\"/master/hacking/advanced/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/master/hacking/helpers/hack_target-ns1.script\\\";\\nvar growScript = \\\"/master/hacking/helpers/grow_target-ns1.script\\\";\\nvar weakenScript = \\\"/master/hacking/helpers/weaken_target-ns1.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/master/hacking/advanced/run-ns1.script\",\"module\":\"\",\"ramUsage\":4.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Get root access on the destServ & hackTargetServ\\n\\tgetRootAccess(sArgs.destServ);\\n\\tgetRootAccess(sArgs.hackTargetServ);\\n\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\tif (threadCount <= 0) {\\n\\t\\ttprint(\\\"ERROR: Desired thread count to low to run exec()! threadCount: \\\" + threadCount + \\\", sArgs.destServ: \\\" + sArgs.destServ)\\n\\t\\texit();\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":4.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"harakiri-sushi\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_harakiri-sushi-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"joesguns\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_joesguns-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_template-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\ngrow(serv);\",\"filename\":\"/master/hacking/helpers/grow_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nhack(serv);\",\"filename\":\"/master/hacking/helpers/hack_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nweaken(serv);\",\"filename\":\"/master/hacking/helpers/weaken_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/deploy-ns1.script\",\"module\":\"\",\"ramUsage\":4.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/killall_and_deploy-ns1.script\",\"module\":\"\",\"ramUsage\":5.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n}\",\"filename\":\"/master/pserv/killall-ns1.script\",\"module\":\"\",\"ramUsage\":4.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ========== ARGS ============ \\n\\n// ========== VARS ============\\nvar sVars = {\\n    // PSERV settings\\n    pservStartingRamAmount: 8,\\n    pservHackTarget: \\\"joesguns\\\",\\n};\\n\\n// ========= FUNCTIONS ========= \\n\\n// ========== LOGIC ==========\\n// For BN-9 when we go back...\\n// run(\\\"/master/character/hacknet/server_autobuy-ns2.js\\\");\\n// run(\\\"/master/character/hacknet/hashmanager-ns2.js\\\");\\n\\nclear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\nrun(\\\"/master/hacking/director-ns2.js\\\");\\nrun(\\\"/master/character/hacknet/node_autobuy-ns2.js\\\");\\nrun(\\\"/master/buy_server/buy_server-ns2.js\\\", 1, sVars.pservHackTarget, sVars.pservStartingRamAmount);\\nrun(\\\"/master/world/gang/godfather-ns2.js\\\");\\nrun(\\\"/master/hacking/monitor-ns2.js\\\", 1, 300, \\\"tprint\\\");\",\"filename\":\"/master/restart_run/restart_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/templates/ns2_template.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs() {\\n    var scriptArgs = {\\n        hackTarget : args[0],\\n        desiredRam : args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    availableCashMod : 0.70,\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tprint(\\\"Starting script...\\\");\\n    disableLog(\\\"ALL\\\");\\n    \\n    if(sArgs.desiredRam > getPurchasedServerMaxRam()) {\\n        tprint(\\\"buy_server.script: sArgs.desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.\\\");\\n        exit();\\n    }\\n    \\n    // loop to buy initial round of servers\\n    // while: server count < max servers\\n    print(\\\"DEBUG: server count:\\\" + getPurchasedServers().length);\\n    print(\\\"DEBUG: server limit:\\\" + getPurchasedServerLimit());\\n    while(getPurchasedServers().length < getPurchasedServerLimit())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // wait to have enough money to buy\\n        if(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(sArgs.desiredRam))\\n        {\\n            // create a server name\\n            var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n            \\n            // buy a server\\n            var hostname = \\\"\\\"\\n            while (hostname === \\\"\\\") {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                hostname = purchaseServer(servName, sArgs.desiredRam);\\n            }\\n            \\n            // copy and run script\\n            run(sVars.setupScriptName, 1, hostname, sArgs.hackTarget);\\n        }\\n    }\\n    \\n    //increase the desireRam count as a one off\\n    sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n    \\n    // loop to upgrade servers\\n    while (sArgs.desiredRam <= getPurchasedServerMaxRam())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // call get purchased servers\\n        var purchasedServers = getPurchasedServers();\\n        \\n        for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)\\n        {\\n            var oldHostname = purchasedServers[servIndex];\\n            print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n            \\n            if(getServerRam(oldHostname)[0] < sArgs.desiredRam)\\n            {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                \\n                // kill all scripts on the old server\\n                print(\\\"DEBUG: Killing all scripts on: \\\" + oldHostname);\\n                killall(oldHostname);\\n                sleep(10000);\\n                \\n                // delete the old server\\n                print(\\\"DEBUG: Deleting: \\\" + oldHostname);\\n                deleteServer(oldHostname);\\n                \\n                // buy a server\\n                var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n                var newHostname = \\\"\\\";\\n    \\n                while (newHostname === \\\"\\\") {\\n                    while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                    {\\n                        print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                        sleep(60*1000);\\n                    }\\n                    newHostname = purchaseServer(servName, sArgs.desiredRam);\\n                    sleep(1000);\\n                }\\n                print(\\\"DEBUG: New server named: \\\" + newHostname);\\n                \\n                // copy and run scripts\\n                run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n            }\\n        }\\n        \\n        // increase ram for the next loop\\n        sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n        \\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests() {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction();\\n}\\n\\nfunction test_exampleFunction() {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\n// ===== REFERENCE ==============================\\n// Useful functions:\\n// ==================\\n// getPurchasedServers - array of servers that you won\\n// getPurchasedServerLimit - max number of servers you can purchase\\n// getPurchasedServerCost - cost of a server based on a RAM amount\\n// getPurchasedServerMaxRam - max ram you can purchse\\n// purchaseServer(name, RAM) - buys a server with the specified RAM\\n// getServerRam - returns max ram, used ram\\n// getServerMoneyAvailable(\\\"home\\\")\\n// ==================\",\"filename\":\"/master/buy_server/buy_server-ns1.script\",\"module\":\"\",\"ramUsage\":10.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns)\\n{\\n    var sArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return sArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n          thisServer.isHacknet === false &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n            var waitingToInstall = true;\\n            while(waitingToInstall) {\\n                var homeRam = ns.getServerRam(ns.getHostname());\\n                var homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n                if (homeFreeRam >= ns.getScriptRam(sVars.installScript)) {\\n                    ns.run(sVars.installScript, 1, thisServer.name, sArgs.hackingTarget);\\n                    waitingToInstall = false;\\n                }\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/server_steal_basic-ns2.js\",\"module\":\"\",\"ramUsage\":4.3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEnumPortIndexVersion(version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as dhb from \\\"/master/hacking/deployHackBots-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tscanFrequency : 60 * 1000, // 60 seconds in milliseconds\\n\\thackbotDeployServerMinRam : 8,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_serverArrayBuilder : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Build server lists\\n\\tvar hackableServerListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tvar deployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\n\\t// Establish initial target & deploy the hackbots\\n\\tns.print(\\\"Picking initial target and deploying the hackbots\\\");\\n\\tvar primaryHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET); // Could start out as NULL PORT DATA\\n\\tif(primaryHackTarget !== \\\"NULL PORT DATA\\\") {\\n\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\t}\\n\\t\\n\\n\\t// Sort the server list by money, high -> low\\n    hackableServerListArray.sort(function(a, b) {\\n        return b.maxMoney - a.maxMoney;\\n    });\\n\\n\\t// Start loopin' to find & update target\\n\\twhile(true) {\\n\\t\\tns.print(\\\"Scanning for a new target...\\\");\\n\\t\\tvar currentBestTarget = getBestHackableTarget(ns, hackableServerListArray);\\n\\n\\t\\t// If the best option is different from our current option, update the port\\n\\t\\tif (currentBestTarget !== primaryHackTarget)\\n\\t\\t{\\n\\t\\t\\tns.print(\\\"Updating primaryHackTarget to: \\\" + currentBestTarget);\\n\\t\\t\\tprimaryHackTarget = currentBestTarget;\\n\\t\\t\\tns.clear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\t\\t\\tns.write(ePortIndex.PRIMARY_HACKING_TARGET, currentBestTarget);\\n\\n\\t\\t\\t// Re-deploy the hackbots at the new target\\n\\t\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\n\\t\\t}\\n\\n\\t\\t// Sleep for like...a minute or something.\\n\\t\\tawait ns.sleep(sVars.scanFrequency);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getBestHackableTarget(ns, serverListArray) {\\n\\t// Figure out my hacking ability & port opening ability\\n\\tvar hackingSkillLevel = ns.getHackingLevel();\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\t// Iterate thru the list, finding the first option that can be hacked (skill & ports opening\\n\\tfor (var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i];\\n\\n\\t\\tif(hackingSkillLevel >= server.requiredHackingLevel && portBreakingLevel >= server.numPortsRequired) {\\n\\t\\t\\treturn server.name;\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nasync function executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n\\tif (tests.testEnabled_serverArrayBuilder)\\n\\t\\tawait test_serverArrayBuilder(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\nasync function test_serverArrayBuilder(ns) {\\n\\tns.print(\\\"==== TEST: test_serverArrayBuilder ====\\\");\\n\\n\\tvar serverListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tprint(typeof serverListArray);\\n\\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\n/* ===== REFERENCE ==============================\\nns.write()\\nns.trywrite()\\nns.read()\\nns.peek()\\nns.clear()\\n\\t*/\",\"filename\":\"/master/hacking/director-ns2.js\",\"module\":{},\"ramUsage\":9.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/functions/enumLib-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\nvar portEmpty = \\\"NULL PORT DATA\\\";\\n\\n// ===== ARGS ===================================\\nvar sArgs = {\\n\\tinitialHackTarget : args[0],\\t// Initial to hack\\n};\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\n\\tvar hackTarget = sArgs.initialHackTarget;\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\n\\t// - Real Script Logic ----------------------\\n\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t// Get root access if I don't have it\\n\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\tgetRootAccess(hackTarget);\\n\\t}\\n\\n\\twhile(true) {\\n\\t\\tvar updateResults = updateHackTarget(hackTarget);\\n\\t\\tif(updateResults.updated === true) {\\n\\t\\t\\thackTarget = updateResults.hackTarget;\\n\\t\\t\\tmoneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\t\\t\\tsecurityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t\\t\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\t\\t\\tgetRootAccess(hackTarget);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (getServerSecurityLevel(hackTarget) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(hackTarget);\\n\\t\\t} else if (getServerMoneyAvailable(hackTarget) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(hackTarget);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(hackTarget);\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction updateHackTarget(currentTarget) {\\n\\tvar results = {\\n\\t\\tupdated: false,\\n\\t\\thackTarget: currentTarget,\\n\\t};\\n\\n\\tprimaryHackTarget = peek(ePortIndex.PRIMARY_HACK_TARGET);\\n\\n\\tif(primaryHackTarget !== portEmpty && currentTarget !== primaryHackTarget) {\\n\\n\\t\\tresults.hackTarget = primaryHackTarget;\\n\\t}\\n\\n\\treturn results;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":3.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 64,\\n\\tnodeCoresLimit: 16,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\n\\t\\t// Wait for enough money\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\t\\t\\n\\t\\t// Buy the node\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\tawait upgradeAllToMatchBaseNodeAsync(ns);\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Wait for enough money\\n\\t\\t\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tawait purchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.08; //1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=========================== Ready to make a decision ===========================\\\");\\n\\tns.print(\\\"--- maxRecoupTime:\\\" + ns.nFormat(sVars.recoupTimeCap, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(sVars.recoupTimeCap/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--------------------------------------------------------------------------------\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"================================================================================\\\");\\n\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction;\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction;\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\t\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    var newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/node_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg: ns.args[0]\\n    };\\n\\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n    enabled: false, // Master override for all tests\\n    disableMain: false, // Disables all non-testing logic in main\\n    testEnabled_exampleFunction: false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\n    // - Tests ----------------------------------\\n    if (tests.enabled)\\n        executeTests(ns);\\n\\n    // - Early out ------------------------------\\n    if (tests.disableMain) {\\n        ns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n        ns.exit();\\n    }\\n\\n    // - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getServerRamObject(ns, server) {\\n    // Get the server's RAM, total and used\\n    var targetServRam = ns.getServerRam(server);\\n    var targetServTotalRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServTotalRam - targetServUsedRam;\\n\\n    var serverRamObj = {\\n        total: targetServRam,\\n        used: targetServUsedRam,\\n        free: targetServFreeRam,\\n    }\\n\\n    return serverRamObj;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n    ns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/functions/getServerRamObj-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n\\t\\tdeployTarget : ns.args[0],\\n        fallbackHackTarget : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Set the best target\\n\\tvar bestHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\tif(bestHackTarget === \\\"NULL PORT DATA\\\") {\\n\\t\\tbestHackTarget = sArgs.fallbackHackTarget;\\n\\t}\\n\\n\\t// Function is built around a server array, so we build a simple one\\n\\tvar serverInfoArray = [bsi.getTargetInfo(ns, sArgs.deployTarget, null, 0)];\\n\\n\\t// Deploy the hackbots\\n\\tawait deployHackBots(ns, serverInfoArray, bestHackTarget);\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport async function deployHackBots(ns, deployServerListArray, hackTargetServer) {\\n\\tns.print(\\\"Beggining to deploy the hack bots! Targeting: \\\" + hackTargetServer);\\n\\n\\t// Ensure we have root access on the hack target\\n\\tgra.getRootAccess(ns, hackTargetServer);\\n\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\tfor (var i = 0; i < deployServerListArray.length; i++) {\\n\\t\\tvar deployServer = deployServerListArray[i];\\n\\t\\tns.print(\\\"Evaluating server: \\\" + deployServer.name);\\n\\n\\t\\tvar hackHelperScript = \\\"/master/hacking/helpers/hack_target_loop-ns1.script\\\";\\n\\t\\tvar growHelperScript = \\\"/master/hacking/helpers/grow_target_loop-ns1.script\\\";\\n\\t\\tvar weakenHelperScript = \\\"/master/hacking/helpers/weaken_target_loop-ns1.script\\\";\\n\\n\\t\\tvar minRequiredRam = ns.getScriptRam(hackHelperScript) + ns.getScriptRam(growHelperScript) + ns.getScriptRam(weakenHelperScript);\\n\\n\\t\\ttry {\\n\\t\\t\\tif ((portBreakingLevel >= deployServer.numPortsRequired && deployServer.ram >= minRequiredRam && deployServer.isHome === false) || deployServer.isPserv) {\\n\\t\\t\\t\\tns.print(\\\"Preparing to deploy the hack bots to: \\\" + deployServer.name);\\n\\t\\t\\t\\tgra.getRootAccess(ns, deployServer.name);\\n\\n\\t\\t\\t\\t// ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n\\t\\t\\t\\twhile (ns.killall(deployServer.name)) {\\n\\t\\t\\t\\t\\tns.print(\\\"Sleeping after trying to killall on \\\" + deployServer.name);\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar freeRam = gsr.getServerRamObject(ns, deployServer.name).free;\\n\\t\\t\\t\\t// Algorithm v2\\n\\t\\t\\t\\t// Weakening and hacking should make up at least 10% of the RAM pool, the remainder goes towards growing\\n\\t\\t\\t\\tvar ramPerWeakenHelperThread = ns.getScriptRam(weakenHelperScript);\\n\\t\\t\\t\\tvar weakenReservedRamMinimumModifier = 0.15;\\n\\t\\t\\t\\tvar weakenMinThreads = 1;\\n\\t\\t\\t\\tvar weakenRamMinRequirement = freeRam * weakenReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar weakenThreads = Math.ceil(weakenRamMinRequirement / ramPerWeakenHelperThread);\\n\\t\\t\\t\\tif (weakenThreads < weakenMinThreads) {\\n\\t\\t\\t\\t\\tweakenThreads = weakenMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar weakenRamUsage = weakenThreads * ramPerWeakenHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerHackHelperThread = ns.getScriptRam(hackHelperScript);\\n\\t\\t\\t\\tvar hackReservedRamMinimumModifier = 0.10;\\n\\t\\t\\t\\tvar hackMaxStealPercent = 0.01;\\n\\t\\t\\t\\tvar hackPercentPerThread = ns.hackAnalyzePercent(hackTargetServer)/100;\\n\\t\\t\\t\\tvar hackMaxThreadsRaw = hackMaxStealPercent/hackPercentPerThread;\\n\\t\\t\\t\\tvar hackMaxThreads = Math.floor(hackMaxThreadsRaw);\\n\\t\\t\\t\\tvar hackMinThreads = 1;\\n\\t\\t\\t\\tvar hackRamMinRequirement = freeRam * hackReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar hackThreads = Math.ceil(hackRamMinRequirement / ramPerHackHelperThread);\\n\\t\\t\\t\\tif (hackThreads > hackMaxThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMaxThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (hackThreads < hackMinThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar hackRamUsage = hackThreads * ramPerHackHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerGrowHelperThread = ns.getScriptRam(growHelperScript);\\n\\t\\t\\t\\tvar growRamPool = freeRam - (weakenRamUsage + hackRamUsage);\\n\\t\\t\\t\\tvar growThreads = Math.floor(growRamPool / ramPerGrowHelperThread);\\n\\n\\t\\t\\t\\tns.print(\\\"=========== Thread Count Dump ===========\\\");\\n\\t\\t\\t\\tns.print(\\\"weakenThreads: \\\" + weakenThreads);\\n\\t\\t\\t\\tns.print(\\\"growThreads: \\\" + growThreads);\\n\\t\\t\\t\\tns.print(\\\"hackThreads: \\\" + hackThreads);\\n\\t\\t\\t\\tns.print(\\\"============= End Debug Dump ============\\\");\\n\\n\\t\\t\\t\\t// Copy the scripts\\n\\t\\t\\t\\tns.print(\\\"Copying scripts...\\\");\\n\\t\\t\\t\\tns.scp(hackHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(growHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(weakenHelperScript, \\\"home\\\", deployServer.name);\\n\\n\\t\\t\\t\\t// Run the scripts\\n\\t\\t\\t\\tns.print(\\\"Launching the hack bots!\\\");\\n\\t\\t\\t\\tawait ns.exec(weakenHelperScript, deployServer.name, weakenThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(growHelperScript, deployServer.name, growThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(hackHelperScript, deployServer.name, hackThreads, hackTargetServer, ns.getServerMaxMoney(hackTargetServer));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch(error)\\n\\t\\t{\\n\\t\\t\\tns.tprint(error);\\n\\t\\t\\tns.tprint(\\\"Likely a server stopped existing\\\");\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/deployHackBots-ns2.js\",\"module\":\"\",\"ramUsage\":7.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        scanFrequency : ns.args[0],\\n        mode : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    if (sArgs.mode === \\\"print\\\") {\\n        await monitorModePrint(ns, sArgs.scanFrequency);\\n    }\\n    else if (sArgs.mode === \\\"tprint\\\") {\\n        await monitorModeTPrint(ns, sArgs.scanFrequency);\\n    }\\n    else {\\n        await monitorModePrint(ns);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function monitorModePrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.print(\\\"scanTarget: \\\" + scanTarget);\\n            ns.print(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.print(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\nasync function monitorModeTPrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.tprint(\\\"scanTarget: \\\" + scanTarget);\\n            ns.tprint(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.tprint(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/monitor-ns2.js\",\"module\":{},\"ramUsage\":3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    \\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    while(true) {\\n        await recruitmentMembers(ns);\\n        updateGangMemberCombatEquipment(ns);\\n        updateGangMemberHackingEquipment(ns);\\n        updateGangMemberTasks(ns);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function recruitmentMembers(ns) {\\n    while (ns.gang.canRecruitMember()) {\\n        var currentDateTime = new Date();\\n        // $TODO: Someday name a gang member \\\"Android-function getMilliseconds() { [native code] }\\\", for the funny\\n        var newGangMemberName = \\\"Android-\\\" + currentDateTime.getTime();\\n        ns.gang.recruitMember(newGangMemberName);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nfunction updateGangMemberCombatEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === false) {\\n        ns.print(\\\"Buying combat equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n\\n            if(ns.gang.getEquipmentType(equipment) !== \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberHackingEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === true) {\\n        ns.print(\\\"Buying hacking equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n    \\n            if(ns.gang.getEquipmentType(equipment) === \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberTasks(ns) {\\n    // Determine if the gang is a hacking gang or not\\n\\n    if (ns.gang.getGangInformation().isHacking === true) {\\n        assignHackingTasks(ns);\\n    }\\n    else if (ns.gang.getGangInformation().isHacking === false) {\\n        assignCombatTasks(ns);\\n    }\\n}\\n\\nfunction assignHackingTasks(ns) {\\n\\n}\\n\\nfunction assignCombatTasks(ns) {\\n    // Task will be \\\"Unassigned\\\" if not assigned\\n    // Build a list of gang members\\n    var gangMemberNamesArray = ns.gang.getMemberNames()\\n\\n    // iterate thru the gang members\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMemberName = gangMemberNamesArray[i];\\n        var gangMemberTask = ns.gang.getMemberInformation(gangMemberName).task;\\n        // if \\\"Unassigned\\\" set to \\\"Vigalante Justice\\\"\\n        if (gangMemberTask === \\\"Unassigned\\\") {\\n            ns.gang.setMemberTask(gangMemberName, \\\"Vigalante Justice\\\")\\n        }\\n\\n    }    \\n}\\n\\nfunction purchaseEquipmentForAllGangMembers(ns, equipment) {\\n    var gangMemberNamesArray = ns.gang.getMemberNames();\\n\\n    var equipmentCost = ns.gang.getEquipmentCost(equipment);\\n\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMember = gangMemberNamesArray[i];\\n        var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.gangEquipment)\\n\\n        if(availableMoney > equipmentCost) {\\n            ns.gang.purchaseEquipment(gangMember, equipment);\\n        }\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/gang/godfather-ns2.js\",\"module\":{},\"ramUsage\":20.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nexport var spendLimits = {\\n    newServer : 0.70,\\n    hacknet : 0.90,\\n    gangEquipment : 0.10,\\n};\\n\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nexport function getAvailableMoney(ns, spendLimit) {\\n    var myMoney = getMyMoney(ns);\\n    var availableMoney = myMoney * spendLimit;\\n\\n    return availableMoney;\\n}\\n\\nexport function getSpendLimits() {\\n    return spendLimits;\\n}\\n\\nexport async function async_waitForEnoughMoney(ns, spendLimitModifier, desiredMoney) {\\n    var availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n\\n    while (availableMoney < desiredMoney) {\\n        debugDumpMoneyStats(ns, availableMoney, desiredMoney);\\n        await ns.sleep(10 * 1000);\\n        availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n    }\\n}\\n\\nexport function debugDumpMoneyStats(ns, availableMoney, desiredMoney) {\\n    var percentageOfNeeded = (availableMoney/desiredMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! \\\" +\\n        \\\"Available: \\\" + ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        \\\"Desired: \\\" + ns.nFormat(desiredMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/wallet-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n\\n\\nexport async function main(ns) {\\n    var someNumber = 123456789.98765431;\\n    \\n    ns.tprint(ns.nFormat(wallet.spendLimits.newServer, \\\"0,0.00\\\"));\\n    ns.tprint(ns.nFormat(someNumber, \\\"0,0.00\\\"));\\n    \\n    ns.tprint(ns.heart.break());\\n    \\n    \\n    ns.tprint(\\\"Done!\\\");\\n}\",\"filename\":\"/temp/ns2_scratch.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackTarget : ns.args[0],\\n        desiredStartingRam : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n\\n    var desiredRam = sArgs.desiredStartingRam;\\n    \\n    while(desiredRam <= ns.getPurchasedServerMaxRam()) {\\n        await fillEmptyServerSlots(ns, sArgs, desiredRam);\\n        await upgradeExisitngServers(ns, sArgs, desiredRam);\\n        desiredRam = incrementDesiredRam(desiredRam, sVars.ramIncreaseFactor);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function fillEmptyServerSlots(ns, sArgs, desiredRam) {\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        ns.print(\\\"DEBUG: Buying at \\\" + desiredRam + \\\"GB\\\");\\n\\n        // create a server name\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n\\n        // Attempt to buy a server\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n        var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n        // Run setup script on the new server\\n        await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function upgradeExisitngServers(ns, sArgs, desiredRam) {\\n    ns.print(\\\"DEBUG: Upgrading to \\\" + desiredRam + \\\"GB\\\");\\n\\n    // call get purchased servers\\n    var purchasedServers = ns.getPurchasedServers();\\n\\n    for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++) {\\n        var oldHostname = purchasedServers[servIndex];\\n        ns.print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n\\n        var oldHostRam = ns.getServerRam(oldHostname)[0];\\n\\n        if (oldHostRam < desiredRam) {\\n            // Wait for enough money\\n            await waitForEnoughMoney(ns, desiredRam);\\n\\n            // delete the old server\\n            await deleteOldServer(ns, oldHostname);\\n\\n            // buy a server\\n            var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n            var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n            ns.print(\\\"DEBUG: New server named: \\\" + newHostname);\\n\\n            // Run setup script on the new server\\n            await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n        }\\n    }\\n}\\n\\nasync function deleteOldServer(ns, server) {\\n    while(ns.serverExists(server)) {\\n        // kill all scripts on the old server\\n        // ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n        while (ns.killall(server)) {\\n            ns.print(\\\"Sleeping after trying to killall on \\\" + server);\\n            await ns.sleep(1000);\\n        }\\n    \\n        // delete the old server\\n        ns.print(\\\"DEBUG: Deleting: \\\" + server);\\n        ns.deleteServer(server);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function purchaseNewServer(ns, desiredServerName, desiredRam) {\\n    var newHostname = \\\"\\\";\\n\\n    while (newHostname === \\\"\\\") {\\n        // Wait for enough money\\n        await waitForEnoughMoney(ns, desiredRam);\\n\\n        newHostname = ns.purchaseServer(desiredServerName, desiredRam);\\n        await ns.sleep(1000);\\n    }\\n\\n    return newHostname;\\n}\\n\\nasync function waitForEnoughMoney(ns, desiredRam) {\\n    while (wallet.getAvailableMoney(ns, wallet.spendLimits.newServer) < ns.getPurchasedServerCost(desiredRam)) {\\n        debugDumpMoneyStats(ns, desiredRam);\\n        await ns.sleep(60 * 1000);\\n    }\\n}\\n\\nfunction incrementDesiredRam(currentDesiredRam, ramMultiplier) {\\n    var newDesiredRam = currentDesiredRam * ramMultiplier;\\n\\n    return newDesiredRam;\\n}\\n\\nfunction debugDumpMoneyStats(ns, desiredRam) {\\n    var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.newServer);\\n    var neededMoney = ns.getPurchasedServerCost(desiredRam);\\n    var percentageOfNeeded = (availableMoney/neededMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! Available / Needed / %: \\\" +\\n        ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(neededMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/buy_server/buy_server-ns2.js\",\"module\":\"\",\"ramUsage\":10.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar e_contractTypes = {\\n\\tfindLargestPrimeFactor : \\\"Find Largest Prime Factor\\\",\\n\\tsubarrayWithMaximumSum : \\\"Subarray with Maximum Sum\\\",\\n\\ttotalWaysToSum : \\\"Total Ways to Sum\\\",\\n\\tspiralizeMatrix : \\\"Spiralize Matrix\\\",\\n\\tarrayJumpingGame : \\\"Array Jumping Game\\\",\\n\\tmergeOverlappingIntervals : \\\"Merge Overlapping Intervals\\\",\\n\\tgenerateIPAddresses : \\\"Generate IP Addresses\\\",\\n\\talgorithmicStockTraderI : \\\"Algorithmic Stock Trader I\\\",\\n\\talgorithmicStockTraderII : \\\"Algorithmic Stock Trader II\\\",\\n\\talgorithmicStockTraderIII : \\\"Algorithmic Stock Trader III\\\",\\n\\talgorithmicStockTraderIV : \\\"Algorithmic Stock Trader IV\\\",\\n\\tminimumPathSumInATriangle : \\\"Minimum Path Sum in a Triangle\\\",\\n\\tuniquePathsInAGridI : \\\"Unique Paths in a Grid I\\\",\\n\\tuniquePathsInAGridII : \\\"Unique Paths in a Grid II\\\",\\n\\tsanitizeParenthesesInExpression : \\\"Sanitize Parentheses in Expression\\\",\\n\\tfindAllValidMathExpressions : \\\"Find All Valid Math Expressions\\\",\\n};\\n\\nvar e_allowedToSolve = {\\n\\tfindLargestPrimeFactor : true,\\n\\tsubarrayWithMaximumSum : true,\\n\\ttotalWaysToSum : true,\\n\\tspiralizeMatrix : true,\\n\\tarrayJumpingGame : true,\\n\\tmergeOverlappingIntervals : true,\\n\\tgenerateIPAddresses : true,\\n\\talgorithmicStockTraderI : true,\\n\\talgorithmicStockTraderII : true,\\n\\talgorithmicStockTraderIII : true,\\n\\talgorithmicStockTraderIV : true,\\n\\tminimumPathSumInATriangle : true,\\n\\tuniquePathsInAGridI : true,\\n\\tuniquePathsInAGridII : true,\\n\\tsanitizeParenthesesInExpression : true,\\n\\tfindAllValidMathExpressions : true,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile(true) {\\n\\t\\tawait async_findContractsAndLaunchSolver(ns);\\n\\n\\t\\tawait ns.sleep(60*1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function async_findContractsAndLaunchSolver(ns) {\\n\\t// Build a server list\\n\\tvar serverListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\n\\t// Iterate thru the list of servers\\n\\tfor(var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i].name;\\n\\n\\t\\t// Do an ls() on the server\\n\\t\\tvar lsResults = ns.ls(server, \\\".cct\\\");\\n\\n\\t\\t// If there are results matching the contract extension, spit info out to the terminal window\\n\\t\\tif(lsResults.length > 0) {\\n\\t\\t\\tfor(var j=0; j<lsResults.length; j++) {\\n\\t\\t\\t\\tvar contractName = lsResults[j];\\n\\t\\t\\t\\tlaunchRelevantSolver(ns, contractName, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction launchRelevantSolver (ns, contractName, server) {\\n\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\n\\t// buy the right thing\\n\\tswitch(contractType){\\n\\t\\tcase e_contractTypes.algorithmicStockTraderI:\\n\\t\\t\\tsolver_algorithmicStockTraderI(ns, contractName, server);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(\\\"No solver for type [\\\" + contractType + \\\"] on server [\\\" + server + \\\"] for contract [\\\" + contractName + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_findLargestPrimeFactor(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_subarrayWithMaximumSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_totalWaysToSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_spiralizeMatrix(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_arrayJumpingGame(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_mergeOverlappingIntervals(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_generateIPAddresses(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderI(ns, contractName, server) {\\n\\t/* ===== Problem Definition ====================================================================================================== **\\n\\tYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\t\\tEx. 169,81,124,99,97,182,81,176,32,172,135\\n\\tDetermine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once).\\n\\tIf no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\n\\t** =============================================================================================================================== */\\n\\tif (e_allowedToSolve.algorithmicStockTraderI) {\\n\\t\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\t\\tvar contractData = ns.codingcontract.getData(contractName, server);\\n\\t\\n\\t\\tvar stockPriceList = contractData;\\n\\t\\tvar maxBuyIndex = stockPriceList.length - 1;\\n\\t\\tvar maxSellIndex = stockPriceList.length;\\n\\t\\n\\t\\tvar bestProfit = 0;\\n\\t\\n\\t\\tfor(var buyPriceIndex = 0; buyPriceIndex < maxBuyIndex; buyPriceIndex++) {\\n\\t\\t\\tfor(var sellPriceIndex = buyPriceIndex + 1; sellPriceIndex < maxSellIndex; sellPriceIndex++) {\\n\\t\\t\\t\\tvar buyPrice = stockPriceList[buyPriceIndex];\\n\\t\\t\\t\\tvar sellPrice = stockPriceList[sellPriceIndex];\\n\\t\\t\\t\\tvar testProfit = sellPrice - buyPrice;\\n\\t\\n\\t\\t\\t\\tif (testProfit > bestProfit) {\\n\\t\\t\\t\\t\\tbestProfit = testProfit;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\tvar result = ns.codingcontract.attempt(bestProfit, contractName, server, {returnReward : true});\\n\\n\\t\\tif(result === false || result === \\\"\\\") {\\n\\t\\t\\te_allowedToSolve.algorithmicStockTraderI = false;\\n\\t\\t\\tns.tprint(\\\"CONTRACT FAILED: Type: [\\\" + contractType + \\\"], FileName: [\\\" + contractName + \\\"], Server: [\\\" + server + \\\"]\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.tprint(\\\"Completed Completed: Type: [\\\" + contractType + \\\"], fileName: [\\\" + contractName + \\\"], Server [\\\" + server + \\\"]\\\");\\n\\t\\t\\tns.tprint(result);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"Solver disabled for type: [\\\" + contractType + \\\"]\\\");\\n\\t\\tns.tprint(\\\"There is a contract of this type named [\\\" + contractName + \\\"] on server [\\\" + server + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_algorithmicStockTraderII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIV(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_minimumPathSumInATriangle(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridI(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_sanitizeParenthesesInExpression(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_findAllValidMathExpressions(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/contracts/foreman-ns2.js\",\"module\":\"\",\"ramUsage\":22.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs() {\\n    var scriptArgs = {\\n        crimesToCommit : args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tprint(\\\"Starting script...\\\");\\n\\tdisableLog(\\\"ALL\\\");\\n\\t\\n\\tfor( i=0; i < sArgs.crimesToCommit; i++ ) {\\n\\t\\tif (isBusy() === false) {\\n\\t\\t\\tcommitCrime(\\\"homicide\\\");\\n\\t\\t}\\n\\t\\tsleep(1000);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests() {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction();\\n}\\n\\nfunction test_exampleFunction() {\\n\\tprint(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/slums/homicide-ns1.script\",\"module\":\"\",\"ramUsage\":7.1,\"server\":\"60.8.2.2\"}}],\"serversOnNetwork\":[\"79.9.5.7\",\"13.1.5.7\",\"10.6.6.7\",\"17.1.0.7\",\"2.0.4.6\",\"1.5.3.1\",\"94.9.9.2\",\"95.1.3.8\",\"12.3.4.6\",\"75.8.1.9\",\"39.8.6.4\",\"49.2.3.4\",\"50.7.7.6\",\"89.7.8.1\",\"64.3.1.9\",\"20.9.0.4\",\"19.9.2.9\",\"42.3.0.3\",\"20.3.1.8\",\"82.3.4.1\",\"46.3.6.6\",\"10.8.9.3\",\"53.7.4.1\",\"60.0.4.6\",\"70.8.5.3\",\"20.0.2.9\",\"3.9.3.3\",\"97.4.1.3\",\"68.7.0.6\",\"79.5.6.7\",\"23.8.5.3\",\"4.0.0.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"// TODO Create a file copying script, assuming the libraries allow it\\n// TODO Create a script for buying up hacknet nodes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/configs/hack_target.txt\",\"text\":\"harakiri-sushi\"}}],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"52.3.1.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"52.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"25.2.0.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":24725346673.5,\"moneyMax\":92720050025.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1378,\"serverGrowth\":99}},\"83.8.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-888139.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,35,26,14,9,39,39,37,2,34,29,18,36,7],[41,22,12,6,11,13,16,34,15,3,23,29,38,37],[1,25,50,7,45,2,22,28,47,30,15,11,20,37],[42,26,28,43,28,33,47,29,17,38,24,16,35,41],[39,14,37,17,24,4,21,46,12,33,11,10,15,38],[2,38,38,41,21,3,15,23,42,3,15,19,13,6]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-841445.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[52,117,38,57,71,78,145,108,49,160,94,113,125,98,156,104,98,36,155,162,153,186,61,124,134,79,133,40,181,87,131,126,119,154,116]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"83.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"80.5.0.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":39594565287,\"moneyMax\":148479619826.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1315,\"serverGrowth\":99}},\"14.3.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-202279.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)(()())aaaa\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.3.5.4\",\"69.6.8.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":84,\"hackDifficulty\":84,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":11515203465.75,\"moneyMax\":43182012996.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1098,\"serverGrowth\":76}},\"80.5.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"80.5.0.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"85.5.6.2\",\"83.8.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":20643348586.5,\"moneyMax\":77412557199.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1167,\"serverGrowth\":64}},\"20.1.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"20.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"New World Order\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.3.5.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":15861571414.5,\"moneyMax\":59480892804.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1149,\"serverGrowth\":68}},\"25.2.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-652634.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-129635.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,15,22,22,3],[37,41,30,3,39],[29,33,34,44,1],[10,13,5,27,9],[16,1,28,2,14],[36,43,21,7,20],[11,37,13,37,46],[25,11,4,14,41]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737847.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,1,0,0],[0,0,0,0,1,0,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"85.5.6.2\",\"52.3.1.4\",\"14.7.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":47,\"hackDifficulty\":47,\"manuallyHacked\":false,\"minDifficulty\":16,\"moneyAvailable\":13258486377.75,\"moneyMax\":49719323916.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1135,\"serverGrowth\":55}},\"72.3.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886330.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[105,2,191,182,59,73,119,155,177,30,48,100,53,47,72,123,187,71,162,90,30,120,17,47,110,4,73,167,150,64,75,72,88,146,118,175,64]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"72.3.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.6.3.6\",\"14.3.1.3\",\"20.1.9.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":96,\"hackDifficulty\":96,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":11431735323.75,\"moneyMax\":42869007464.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":982,\"serverGrowth\":96}},\"44.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183257.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17721363182\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"44.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"FourSigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"59.0.6.3\",\"31.7.9.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":18554760512.25,\"moneyMax\":69580351920.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1226,\"serverGrowth\":88}},\"46.8.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688068.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[1,9],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156383.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"46.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.6.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":20477172418.5,\"moneyMax\":76789396569.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1252,\"serverGrowth\":98}},\"2.4.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"2.4.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\",\"85.5.6.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":1315894296.75,\"moneyMax\":4934603612.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1148,\"serverGrowth\":91}},\"14.7.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-479760.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[1,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"14.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies Assets\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"25.2.0.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1334,\"serverGrowth\":1}},\"59.0.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"59.0.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\",\"44.5.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":88,\"hackDifficulty\":88,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":867928173,\"moneyMax\":3254730648.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":935,\"serverGrowth\":82}},\"23.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"23.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":610244093.25,\"moneyMax\":2288415349.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":868,\"serverGrowth\":47}},\"45.3.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450218.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[173,93,154,74,123,45,82,137,158,94,23,81,44,34,166,123,171,59,180,22,99,16],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"45.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.1.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":470103653.25,\"moneyMax\":1762888699.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":946,\"serverGrowth\":52}},\"20.3.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"20.3.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":95,\"hackDifficulty\":95,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":423725753.25,\"moneyMax\":1588971574.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":900,\"serverGrowth\":73}},\"87.6.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"87.6.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"42.8.4.4\",\"72.3.5.4\",\"46.8.1.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":594842373.75,\"moneyMax\":2230658901.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":894,\"serverGrowth\":77}},\"25.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-198542.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[4,8],[2,7,6],[7,1,2,3],[2,9,1,9,4]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"25.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":92,\"hackDifficulty\":92,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":719209384.5,\"moneyMax\":2697035191.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":898,\"serverGrowth\":85}},\"72.2.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358415.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[73,103,146],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"72.2.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":105.311080138,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.652,\"onlineExpGained\":84.1632,\"onlineMoneyMade\":0,\"onlineRunningTime\":2445.809999999968,\"ramUsage\":1.75,\"server\":\"72.2.1.7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,53,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":507.40793157400003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.652,\"onlineExpGained\":405.5136,\"onlineMoneyMade\":0,\"onlineRunningTime\":2445.809999999968,\"ramUsage\":1.75,\"server\":\"72.2.1.7\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[40992,16,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":191.47469647333332,\"offlineMoneyMade\":51292.15520333333,\"offlineRunningTime\":36036.653,\"onlineExpGained\":153.024,\"onlineMoneyMade\":40992,\"onlineRunningTime\":2445.809999999968,\"ramUsage\":1.8,\"server\":\"72.2.1.7\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"72.2.1.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.2.1.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.2.1.7\"}}],\"serversOnNetwork\":[\"56.7.4.0\",\"75.9.4.1\",\"50.4.2.7\",\"74.2.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":88,\"hackDifficulty\":88,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":867470017.5,\"moneyMax\":3253012565.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":872,\"serverGrowth\":82}},\"47.0.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-637651.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":613561719,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"47.0.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":668037534.75,\"moneyMax\":2505140755.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":858,\"serverGrowth\":80}},\"13.6.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518577.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a())(a()\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"13.6.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.9.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":74,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":452402187.75,\"moneyMax\":1696508204.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":854,\"serverGrowth\":72}},\"75.9.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"75.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\",\"13.6.2.0\",\"42.8.4.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":634564198.5,\"moneyMax\":2379615744.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":915,\"serverGrowth\":76}},\"85.9.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965095-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-10,8,-7,-6,5,0,-8,-2,-10,-3,-7,0,5,5,6,4,-8,0,-2,1,2,4,10,0,8,-6,4,-10,-5,7,-10,-6,6,-9,10,1,-9],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"85.9.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":621659746.5,\"moneyMax\":2331224049.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":830,\"serverGrowth\":90}},\"46.2.8.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"46.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"99.5.7.3\",\"65.0.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":82,\"hackDifficulty\":82,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":819420078,\"moneyMax\":3072825292.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":875,\"serverGrowth\":63}},\"56.7.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-544445.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0],[1,1,0,0,1,0,0,0,0],[0,0,1,0,1,0,0,0,0],[1,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433884.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")())))()(a))a))(\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"56.7.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.1.0.2\",\"23.3.9.3\",\"25.4.1.6\",\"72.2.1.7\",\"32.9.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":89,\"hackDifficulty\":89,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":692494501.5,\"moneyMax\":2596854380.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":926,\"serverGrowth\":66}},\"50.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226368.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3546\",65],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"50.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\",\"47.0.8.5\",\"66.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":691225128,\"moneyMax\":2592094230,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":799,\"serverGrowth\":69}},\"42.8.4.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"42.8.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.9.4.1\",\"87.6.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":79,\"hackDifficulty\":79,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":559889784.75,\"moneyMax\":2099586692.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":833,\"serverGrowth\":70}},\"56.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"56.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"65.0.3.2\",\"45.3.5.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":580331619,\"moneyMax\":2176243571.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":782,\"serverGrowth\":70}},\"95.0.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"95.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Delta One\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.1.0.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":82,\"hackDifficulty\":82,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":1159313225.25,\"moneyMax\":4347424594.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":891,\"serverGrowth\":55}},\"75.1.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.1.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9.573735089333333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":7.6512,\"onlineMoneyMade\":0,\"onlineRunningTime\":2451.8099999999627,\"ramUsage\":1.75,\"server\":\"75.1.0.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,4,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":38.29494035733333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":30.6048,\"onlineMoneyMade\":0,\"onlineRunningTime\":2451.8099999999627,\"ramUsage\":1.75,\"server\":\"75.1.0.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[4686,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":23.934337723333336,\"offlineMoneyMade\":5863.462284166666,\"offlineRunningTime\":36036.654,\"onlineExpGained\":19.128,\"onlineMoneyMade\":4686,\"onlineRunningTime\":2451.8099999999627,\"ramUsage\":1.8,\"server\":\"75.1.0.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"75.1.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.1.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.1.0.2\"}}],\"serversOnNetwork\":[\"96.8.7.8\",\"56.7.4.0\",\"95.0.7.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1259451906,\"moneyMax\":4722944647.5,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":826,\"serverGrowth\":86}},\"74.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647056.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,1,9,9,8,0,4,5,1,5,9,7,0,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"74.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":69,\"hackDifficulty\":69,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":927367247.25,\"moneyMax\":3477627177.1875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":839,\"serverGrowth\":67}},\"32.9.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425083.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"32.9.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1028811026.25,\"moneyMax\":3858041348.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":822,\"serverGrowth\":73}},\"65.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276334.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)a)()a()(a))))))a(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"65.0.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.14747017866667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2409.610000000001,\"ramUsage\":1.75,\"server\":\"65.0.3.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":57.442410536000004,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":45.9072,\"onlineMoneyMade\":0,\"onlineRunningTime\":2409.610000000001,\"ramUsage\":1.75,\"server\":\"65.0.3.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2651,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754036406333338,\"offlineMoneyMade\":3317.1230293055555,\"offlineRunningTime\":36036.654,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2651,\"onlineRunningTime\":2409.610000000001,\"ramUsage\":1.8,\"server\":\"65.0.3.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"65.0.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"65.0.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"65.0.3.2\"}}],\"serversOnNetwork\":[\"46.2.8.9\",\"56.1.5.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":785444858.25,\"moneyMax\":2945418218.4375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":794,\"serverGrowth\":76}},\"64.3.6.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892594-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,14],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"64.3.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Lexo Corporation\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.14747017866667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2488.4099999999294,\"ramUsage\":1.75,\"server\":\"64.3.6.9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88482107200001,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.654,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2488.4099999999294,\"ramUsage\":1.75,\"server\":\"64.3.6.9\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[8027,3,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31.114639040333333,\"offlineMoneyMade\":10043.963242638889,\"offlineRunningTime\":36036.654,\"onlineExpGained\":24.8664,\"onlineMoneyMade\":8027,\"onlineRunningTime\":2488.4099999999294,\"ramUsage\":1.8,\"server\":\"64.3.6.9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"64.3.6.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.6.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.6.9\"}}],\"serversOnNetwork\":[\"50.9.7.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":79,\"hackDifficulty\":79,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":557288922.75,\"moneyMax\":2089833460.3125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":688,\"serverGrowth\":64}},\"7.9.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183572.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,14],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"7.9.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":57.442412129999994,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":45.9072,\"onlineMoneyMade\":0,\"onlineRunningTime\":2512.6099999999074,\"ramUsage\":1.75,\"server\":\"7.9.7.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,52,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":497.83423846000005,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":397.86240000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":2512.6099999999074,\"ramUsage\":1.75,\"server\":\"7.9.7.1\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[19568,8,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":95.73735354999998,\"offlineMoneyMade\":24484.898241666662,\"offlineRunningTime\":36036.655,\"onlineExpGained\":76.512,\"onlineMoneyMade\":19568,\"onlineRunningTime\":2512.6099999999074,\"ramUsage\":1.8,\"server\":\"7.9.7.1\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"7.9.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.9.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.9.7.1\"}}],\"serversOnNetwork\":[\"66.1.0.2\",\"85.9.2.7\",\"3.3.7.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":42,\"hackDifficulty\":70.6,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":1423781937.4953516,\"moneyMax\":1436029239.375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":490,\"serverGrowth\":51}},\"46.7.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-281024-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11314065115\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"46.7.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":105.311088905,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":84.1632,\"onlineMoneyMade\":0,\"onlineRunningTime\":2500.6099999999183,\"ramUsage\":1.75,\"server\":\"46.7.9.5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,106,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1014.81594763,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":811.0272,\"onlineMoneyMade\":0,\"onlineRunningTime\":2500.6099999999183,\"ramUsage\":1.75,\"server\":\"46.7.9.5\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[63240,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91711923,\"offlineMoneyMade\":79130.4663125,\"offlineRunningTime\":36036.655,\"onlineExpGained\":198.9312,\"onlineMoneyMade\":63240,\"onlineRunningTime\":2500.6099999999183,\"ramUsage\":1.8,\"server\":\"46.7.9.5\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.7.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.7.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.7.9.5\"}}],\"serversOnNetwork\":[\"60.9.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":499239672.75,\"moneyMax\":1872148772.8125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"96.8.7.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417530.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()))()a\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"96.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.14747071,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2454.80999999996,\"ramUsage\":1.75,\"server\":\"96.8.7.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88482425999999,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2454.80999999996,\"ramUsage\":1.75,\"server\":\"96.8.7.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2582,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.75403687125,\"offlineMoneyMade\":3230.785326041667,\"offlineRunningTime\":36036.655,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2582,\"onlineRunningTime\":2454.80999999996,\"ramUsage\":1.8,\"server\":\"96.8.7.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"96.8.7.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"96.8.7.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"96.8.7.8\"}}],\"serversOnNetwork\":[\"89.2.3.3\",\"75.1.0.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1016612278.875,\"moneyMax\":1022629426.875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":407,\"serverGrowth\":45}},\"50.9.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767319.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,31],[19,21],[2,6],[3,12],[20,24],[18,24],[12,22],[3,12],[3,12],[3,11],[20,25],[16,24],[1,7],[14,16],[6,9],[14,20],[21,30],[3,13],[4,9],[21,27]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434793.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[66,190,129,160,166,18,126,124,128,115,143,26,43,128,183,155,134,173,42,86,169,42,185,112,44,129,128,116,93,116,76,75,170,169,71,82,124,40,58,60,195,11],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639702.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,48,35,45,44,19,30,49,31,13,24,33,1],[40,33,29,8,25,35,32,33,33,4,18,43,20],[5,39,28,47,28,22,5,36,21,37,6,46,33],[30,26,1,24,41,50,40,11,38,10,21,31,17],[1,22,36,20,12,9,48,10,12,50,21,40,45],[44,20,11,9,27,16,24,36,8,24,50,24,46],[43,1,37,13,49,19,40,1,43,20,17,18,32],[14,13,2,34,21,46,50,47,18,15,13,23,1],[29,46,20,41,15,11,40,42,37,1,19,19,7],[32,33,50,11,9,14,46,27,18,46,22,41,50]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-632428.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,5,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"50.9.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721206065,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2491.4099999999266,\"ramUsage\":1.75,\"server\":\"50.9.7.5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91711923000003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2491.4099999999266,\"ramUsage\":1.75,\"server\":\"50.9.7.5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147470709999997,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2491.4099999999266,\"ramUsage\":1.8,\"server\":\"50.9.7.5\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"50.9.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.9.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.9.7.5\"}}],\"serversOnNetwork\":[\"47.9.2.5\",\"64.3.6.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":53,\"hackDifficulty\":53,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":136864230.75,\"moneyMax\":513240865.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":430,\"serverGrowth\":35}},\"66.1.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"66.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"38.2.9.2\",\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":73,\"hackDifficulty\":73,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":626353122.75,\"moneyMax\":2348824210.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":753,\"serverGrowth\":75}},\"89.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721206065,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2458.009999999957,\"ramUsage\":1.75,\"server\":\"89.2.3.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91711923,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.655,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2458.009999999957,\"ramUsage\":1.75,\"server\":\"89.2.3.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.14747124133333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2458.009999999957,\"ramUsage\":1.8,\"server\":\"89.2.3.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"89.2.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.2.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.2.3.3\"}}],\"serversOnNetwork\":[\"28.8.5.2\",\"96.8.7.8\",\"99.5.7.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":63,\"hackDifficulty\":63,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":210157057.5,\"moneyMax\":788088965.625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":467,\"serverGrowth\":55}},\"60.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"60.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"36.0.8.8\",\"46.7.9.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":62,\"hackDifficulty\":62,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":340913696.25,\"moneyMax\":1278426360.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":573,\"serverGrowth\":68}},\"51.7.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"51.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721206862000003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2464.0099999999516,\"ramUsage\":1.75,\"server\":\"51.7.1.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91712613733336,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2464.0099999999516,\"ramUsage\":1.75,\"server\":\"51.7.1.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[9218,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86867810333333,\"offlineMoneyMade\":11534.22926486111,\"offlineRunningTime\":36036.656,\"onlineExpGained\":38.256,\"onlineMoneyMade\":9218,\"onlineRunningTime\":2464.0099999999516,\"ramUsage\":1.8,\"server\":\"51.7.1.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"51.7.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.7.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.7.1.2\"}}],\"serversOnNetwork\":[\"18.1.5.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":23,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":1219257779.0625,\"moneyMax\":1219257779.0625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":438,\"serverGrowth\":52}},\"38.2.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"38.2.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721206862000003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2515.6099999999046,\"ramUsage\":1.75,\"server\":\"38.2.9.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91712613733336,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2515.6099999999046,\"ramUsage\":1.75,\"server\":\"38.2.9.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[4480,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33.508074672333336,\"offlineMoneyMade\":5605.700488888889,\"offlineRunningTime\":36036.656,\"onlineExpGained\":26.779200000000003,\"onlineMoneyMade\":4480,\"onlineRunningTime\":2515.6099999999046,\"ramUsage\":1.8,\"server\":\"38.2.9.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"38.2.9.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"38.2.9.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"38.2.9.2\"}}],\"serversOnNetwork\":[\"34.1.7.1\",\"66.1.0.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":39,\"hackDifficulty\":13.732,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":442667092.5,\"moneyMax\":442667092.5,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":302,\"serverGrowth\":53}},\"64.0.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"64.0.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"73.7.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":58,\"hackDifficulty\":22.310000000000016,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":674306609.0625,\"moneyMax\":674306609.0625,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":364,\"serverGrowth\":65}},\"36.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-447491-Sector-12.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":604102883,\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-885731.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[114,117,25,19,190,77,111,75,160,51,146,88],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.0.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Netlink Technologies\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147471241333335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2503.6099999999155,\"ramUsage\":1.75,\"server\":\"36.0.8.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88482744800001,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2503.6099999999155,\"ramUsage\":1.75,\"server\":\"36.0.8.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2246,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754037336166668,\"offlineMoneyMade\":2810.357879027778,\"offlineRunningTime\":36036.656,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2246,\"onlineRunningTime\":2503.6099999999155,\"ramUsage\":1.8,\"server\":\"36.0.8.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"36.0.8.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.0.8.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.0.8.8\"}}],\"serversOnNetwork\":[\"23.4.2.8\",\"60.9.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":26.14400000000001,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":752945440,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":385,\"serverGrowth\":64}},\"47.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765860.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"47.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"73.7.3.3\",\"50.9.7.5\",\"46.4.2.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":51,\"hackDifficulty\":17.228,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":211403430.5625,\"moneyMax\":215270766.5625,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":276,\"serverGrowth\":47}},\"79.9.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695974.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"79.9.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Food N Stuff Supermarket\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"79.9.5.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"79.9.5.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.8,\"server\":\"79.9.5.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"79.9.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.9.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.9.5.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"56.6.1.2\",\"90.1.1.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":9.96,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":1510357.078642345,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"13.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"13.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147471241333335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.656,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2482.209999999935,\"ramUsage\":1.75,\"server\":\"13.1.5.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.884830636,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2482.209999999935,\"ramUsage\":1.75,\"server\":\"13.1.5.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2549,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754037801083335,\"offlineMoneyMade\":3189.4935139930553,\"offlineRunningTime\":36036.657,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2549,\"onlineRunningTime\":2482.209999999935,\"ramUsage\":1.8,\"server\":\"13.1.5.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"13.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"13.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"13.1.5.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":9.556000000000001,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":1748864.0022987544,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"10.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"10.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147471772666666,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2479.2099999999377,\"ramUsage\":1.75,\"server\":\"10.6.6.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88483063600002,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2479.2099999999377,\"ramUsage\":1.75,\"server\":\"10.6.6.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[7505,3,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31.114641630583332,\"offlineMoneyMade\":9390.799851909722,\"offlineRunningTime\":36036.657,\"onlineExpGained\":24.8664,\"onlineMoneyMade\":7505,\"onlineRunningTime\":2479.2099999999377,\"ramUsage\":1.8,\"server\":\"10.6.6.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"10.6.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.6.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":17.265999999999735,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":5149789.2792117465,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"47.9.9.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57272.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-173342.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[8,78,40,95,102,2,116,5,149,135,163,118,151,39,170,61,46,59]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720994.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[87],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"47.9.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721207659,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2470.209999999946,\"ramUsage\":1.75,\"server\":\"47.9.9.0\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91713304466666,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2470.209999999946,\"ramUsage\":1.75,\"server\":\"47.9.9.0\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[10246,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86867943166666,\"offlineMoneyMade\":12820.537679236111,\"offlineRunningTime\":36036.657,\"onlineExpGained\":38.256,\"onlineMoneyMade\":10246,\"onlineRunningTime\":2470.209999999946,\"ramUsage\":1.8,\"server\":\"47.9.9.0\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"47.9.9.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.9.9.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.9.9.0\"}}],\"serversOnNetwork\":[\"2.0.4.6\",\"15.2.1.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"56.6.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858062.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12017535157\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"56.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147471772666663,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2524.8099999998963,\"ramUsage\":1.75,\"server\":\"56.6.1.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.884830636,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2524.8099999998963,\"ramUsage\":1.75,\"server\":\"56.6.1.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2527,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754037801083335,\"offlineMoneyMade\":3161.965519756944,\"offlineRunningTime\":36036.657,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2527,\"onlineRunningTime\":2524.8099999998963,\"ramUsage\":1.8,\"server\":\"56.6.1.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"56.6.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"56.6.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"56.6.1.2\"}}],\"serversOnNetwork\":[\"79.9.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":19.551999999999992,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":2098343.5829269304,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"34.1.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691004.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,4,0,1,4,5,9,0,8,3,2,3,9,0,4,10,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-409650.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[4,7],[6,8,5],[8,1,9,1]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133213-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()aa((()\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908347.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343894.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[109,116,62],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-875379.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[134,47,27,40,43,95,100,31,100,142,137,102,118,87,181,175,93,122,181,92,152,96,184],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"34.1.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721207659,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2518.8099999999017,\"ramUsage\":1.75,\"server\":\"34.1.7.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91713304466666,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.657,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2518.8099999999017,\"ramUsage\":1.75,\"server\":\"34.1.7.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147472304,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2518.8099999999017,\"ramUsage\":1.8,\"server\":\"34.1.7.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"34.1.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.1.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.1.7.1\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"38.2.9.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"23.4.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"23.4.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":57.442416912000006,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":45.9072,\"onlineMoneyMade\":0,\"onlineRunningTime\":2506.609999999913,\"ramUsage\":1.75,\"server\":\"23.4.2.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,52,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":497.83427990399997,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":397.86240000000004,\"onlineMoneyMade\":0,\"onlineRunningTime\":2506.609999999913,\"ramUsage\":1.75,\"server\":\"23.4.2.8\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[10328,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":67.01615306400001,\"offlineMoneyMade\":12923.142379999998,\"offlineRunningTime\":36036.658,\"onlineExpGained\":53.558400000000006,\"onlineMoneyMade\":10328,\"onlineRunningTime\":2506.609999999913,\"ramUsage\":1.8,\"server\":\"23.4.2.8\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"23.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.4.2.8\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"36.0.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"17.1.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691739.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[173,84,70,159,53,128,139,4,140,110,10,58,92,72,65,69,124,5,67,54,163,61,22,61,46,69,131,18,94,192,69,22,108,27,71,18,161,175,177,20,67]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"17.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147472304000004,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2476.2099999999405,\"ramUsage\":1.75,\"server\":\"17.1.0.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88483382400001,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2476.2099999999405,\"ramUsage\":1.75,\"server\":\"17.1.0.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9.573736152000002,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":7.6512,\"onlineMoneyMade\":0,\"onlineRunningTime\":2476.2099999999405,\"ramUsage\":1.8,\"server\":\"17.1.0.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"17.1.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.1.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.1.0.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":14.712,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":2335390.2983274986,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"2.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327431-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":97,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"2.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147472304,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2473.209999999943,\"ramUsage\":1.75,\"server\":\"2.0.4.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88483382400003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2473.209999999943,\"ramUsage\":1.75,\"server\":\"2.0.4.6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2565,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754038266000002,\"offlineMoneyMade\":3209.5139625,\"offlineRunningTime\":36036.658,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2565,\"onlineRunningTime\":2473.209999999943,\"ramUsage\":1.8,\"server\":\"2.0.4.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"2.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"2.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"2.0.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"47.9.9.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":5.007999999999999,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":11193693,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"15.2.1.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"15.2.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721208456000003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2467.009999999949,\"ramUsage\":1.75,\"server\":\"15.2.1.4\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91713995199999,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2467.009999999949,\"ramUsage\":1.75,\"server\":\"15.2.1.4\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[9584,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86868076,\"offlineMoneyMade\":11992.19564,\"offlineRunningTime\":36036.658,\"onlineExpGained\":38.256,\"onlineMoneyMade\":9584,\"onlineRunningTime\":2467.009999999949,\"ramUsage\":1.8,\"server\":\"15.2.1.4\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"15.2.1.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.1.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.1.4\"}}],\"serversOnNetwork\":[\"47.9.9.0\",\"18.1.5.9\",\"28.8.5.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":20,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"61.2.5.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"61.2.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721208456000003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2400.610000000009,\"ramUsage\":1.75,\"server\":\"61.2.5.6\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":124.45856997600002,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.658,\"onlineExpGained\":99.46560000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":2400.610000000009,\"ramUsage\":1.75,\"server\":\"61.2.5.6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[4496,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33.50807746183333,\"offlineMoneyMade\":5625.72131611111,\"offlineRunningTime\":36036.659,\"onlineExpGained\":26.779200000000003,\"onlineMoneyMade\":4496,\"onlineRunningTime\":2400.610000000009,\"ramUsage\":1.8,\"server\":\"61.2.5.6\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"61.2.5.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"61.2.5.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"61.2.5.6\"}}],\"serversOnNetwork\":[\"1.5.3.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"73.7.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208573.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[180,32,75,74,132,80,15,30,113,151,25,116,80,145,61,140,79,48,143,4,154,131,129,162,165,122,125,22,81,99,22,187,190,173,177,151,24,102,164,154,103,176,11,160,7,172,113],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"73.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721209253000005,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2497.409999999921,\"ramUsage\":1.75,\"server\":\"73.7.3.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91714685933334,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2497.409999999921,\"ramUsage\":1.75,\"server\":\"73.7.3.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[10340,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86868208833333,\"offlineMoneyMade\":12938.158009027778,\"offlineRunningTime\":36036.659,\"onlineExpGained\":38.256,\"onlineMoneyMade\":10340,\"onlineRunningTime\":2497.409999999921,\"ramUsage\":1.8,\"server\":\"73.7.3.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"73.7.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.7.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.7.3.3\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"64.0.8.6\",\"47.9.2.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":26,\"hackDifficulty\":9.112,\"manuallyHacked\":false,\"minDifficulty\":9,\"moneyAvailable\":177106471.875,\"moneyMax\":177106471.875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":202,\"serverGrowth\":33}},\"18.1.5.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-202531-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"74408215437\",37],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"18.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"15.2.1.4\",\"51.7.1.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":41,\"hackDifficulty\":41,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":42876000,\"moneyMax\":160785000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":265,\"serverGrowth\":28}},\"1.5.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558596.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,10,-5,-4,10],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731003.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[5,3],[2,1,6]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"1.5.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721209253,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2403.6100000000065,\"ramUsage\":1.75,\"server\":\"1.5.3.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":124.45857342966669,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":99.46560000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":2403.6100000000065,\"ramUsage\":1.75,\"server\":\"1.5.3.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[9334,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86868208833333,\"offlineMoneyMade\":11679.377839097222,\"offlineRunningTime\":36036.659,\"onlineExpGained\":38.256,\"onlineMoneyMade\":9334,\"onlineRunningTime\":2403.6100000000065,\"ramUsage\":1.8,\"server\":\"1.5.3.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"1.5.3.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.5.3.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.5.3.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"61.2.5.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"99.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651822.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,9],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434744.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"99.5.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.721209253,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2412.6099999999983,\"ramUsage\":1.75,\"server\":\"99.5.7.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":124.45857342966666,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":99.46560000000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":2412.6099999999983,\"ramUsage\":1.75,\"server\":\"99.5.7.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147472835333335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2412.6099999999983,\"ramUsage\":1.8,\"server\":\"99.5.7.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"99.5.7.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"99.5.7.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"99.5.7.3\"}}],\"serversOnNetwork\":[\"89.2.3.3\",\"46.2.8.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":46,\"hackDifficulty\":46,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":492,\"serverGrowth\":45}},\"31.7.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604688.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,16,40,8,34,45,27,10,19],[46,35,42,9,47,10,32,47,43],[9,43,1,5,29,2,15,1,21],[8,17,20,30,16,29,40,48,15],[17,37,26,46,3,46,16,1,33],[13,34,15,7,41,28,11,48,44],[15,23,6,23,37,42,16,17,35],[15,39,15,30,45,17,29,48,46],[37,47,33,23,32,3,6,38,18]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998253.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,6,3,10,8,0,5,0,8,4,0,0],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"31.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"44.5.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":969,\"serverGrowth\":52}},\"3.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-792041.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[118,182,9,65,33,126,196,178,198,19],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"3.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":44,\"hackDifficulty\":44,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":791,\"serverGrowth\":44}},\"66.2.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-160591.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[115,86,62,93,55,56,156],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204145-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"61190181189\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"66.2.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":254.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,22]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":210.62220118866665,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":168.3264,\"onlineMoneyMade\":0,\"onlineRunningTime\":2430.8099999999818,\"ramUsage\":1.75,\"server\":\"66.2.4.5\",\"threads\":22}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,108,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1033.9635331079999,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.659,\"onlineExpGained\":826.3296,\"onlineMoneyMade\":0,\"onlineRunningTime\":2430.8099999999818,\"ramUsage\":1.75,\"server\":\"66.2.4.5\",\"threads\":108}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[107820,45,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":466.7196503612499,\"offlineMoneyMade\":134912.20469375,\"offlineRunningTime\":36036.659,\"onlineExpGained\":372.996,\"onlineMoneyMade\":107820,\"onlineRunningTime\":2430.8099999999818,\"ramUsage\":1.8,\"server\":\"66.2.4.5\",\"threads\":15}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"66.2.4.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.2.4.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.2.4.5\"}}],\"serversOnNetwork\":[\"50.4.2.7\",\"2.4.0.7\",\"59.0.6.3\",\"20.3.3.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"46.4.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"46.4.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.14747336666667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2485.2099999999323,\"ramUsage\":1.75,\"server\":\"46.4.2.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,12,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":114.88484020000001,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":91.8144,\"onlineMoneyMade\":0,\"onlineRunningTime\":2485.2099999999323,\"ramUsage\":1.75,\"server\":\"46.4.2.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[5075,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":23.934341708333335,\"offlineMoneyMade\":6350.208289930556,\"offlineRunningTime\":36036.66,\"onlineExpGained\":19.128,\"onlineMoneyMade\":5075,\"onlineRunningTime\":2485.2099999999323,\"ramUsage\":1.8,\"server\":\"46.4.2.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.4.2.8\"}}],\"serversOnNetwork\":[\"47.9.2.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"28.8.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-595750.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,-2,-7,8,7,-3,-7,6,-4,5,-6,-7,8,3,-8,7,3,4,-10,-6,-6,-10,-8,-8,0,0,-8,-5,3,6,-3,-1,0,2,6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"28.8.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":28.72121005,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":22.9536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2461.0099999999543,\"ramUsage\":1.75,\"server\":\"28.8.5.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":248.91715376666667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":198.93120000000002,\"onlineMoneyMade\":0,\"onlineRunningTime\":2461.0099999999543,\"ramUsage\":1.75,\"server\":\"28.8.5.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[10432,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47.86868341666667,\"offlineMoneyMade\":13053.275444444445,\"offlineRunningTime\":36036.66,\"onlineExpGained\":38.256,\"onlineMoneyMade\":10432,\"onlineRunningTime\":2461.0099999999543,\"ramUsage\":1.8,\"server\":\"28.8.5.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"28.8.5.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.8.5.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.8.5.2\"}}],\"serversOnNetwork\":[\"15.2.1.4\",\"89.2.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\"85.5.6.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373366.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"904852476\",-49],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"85.5.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":19.147473366666667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":15.3024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2427.6099999999847,\"ramUsage\":1.75,\"server\":\"85.5.6.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":57.442420100000014,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":45.9072,\"onlineMoneyMade\":0,\"onlineRunningTime\":2427.6099999999847,\"ramUsage\":1.75,\"server\":\"85.5.6.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[2246,1,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16.754039195833336,\"offlineMoneyMade\":2810.3581909722225,\"offlineRunningTime\":36036.66,\"onlineExpGained\":13.389600000000002,\"onlineMoneyMade\":2246,\"onlineRunningTime\":2427.6099999999847,\"ramUsage\":1.8,\"server\":\"85.5.6.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"85.5.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"85.5.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"85.5.6.2\"}}],\"serversOnNetwork\":[\"2.4.0.7\",\"80.5.0.2\",\"25.2.0.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"90.1.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235586-Sector-12.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-2,-8,-6,-7,7,9,5,10,8,-5],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.1.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9.573736683333333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":7.6512,\"onlineMoneyMade\":0,\"onlineRunningTime\":2521.809999999899,\"ramUsage\":1.75,\"server\":\"90.1.1.6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,4,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":38.29494673333333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.66,\"onlineExpGained\":30.6048,\"onlineMoneyMade\":0,\"onlineRunningTime\":2521.809999999899,\"ramUsage\":1.75,\"server\":\"90.1.1.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[5123,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":23.934342372499994,\"offlineMoneyMade\":6410.269551145832,\"offlineRunningTime\":36036.661,\"onlineExpGained\":19.128,\"onlineMoneyMade\":5123,\"onlineRunningTime\":2521.809999999899,\"ramUsage\":1.8,\"server\":\"90.1.1.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"90.1.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.1.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.1.1.6\"}}],\"serversOnNetwork\":[\"79.9.5.7\",\"34.1.7.1\",\"23.4.2.8\",\"73.7.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"69.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642867.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269711.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0],[0,0,0,0,0,0],[1,1,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375487.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a((a))\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"69.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"14.3.1.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"64.9.0.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"64.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"94.9.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"94.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"95.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-3\",\"httpPortOpen\":false,\"ip\":\"95.1.3.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1684.977703024,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":1346.6112,\"onlineMoneyMade\":0,\"onlineRunningTime\":2397.410000000012,\"ramUsage\":1.75,\"server\":\"95.1.3.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167304272998,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2397.410000000012,\"ramUsage\":1.75,\"server\":\"95.1.3.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[887034,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.0695396045,\"offlineMoneyMade\":1109921.3431643748,\"offlineRunningTime\":36036.661,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":887034,\"onlineRunningTime\":2397.410000000012,\"ramUsage\":1.8,\"server\":\"95.1.3.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"95.1.3.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.1.3.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.1.3.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"12.3.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-4\",\"httpPortOpen\":false,\"ip\":\"12.3.4.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1684.9777030240002,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":1346.6112,\"onlineMoneyMade\":0,\"onlineRunningTime\":2394.410000000015,\"ramUsage\":1.75,\"server\":\"12.3.4.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167304273,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2394.410000000015,\"ramUsage\":1.75,\"server\":\"12.3.4.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[832998,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.0695396045003,\"offlineMoneyMade\":1042307.5767256251,\"offlineRunningTime\":36036.661,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":832998,\"onlineRunningTime\":2394.410000000015,\"ramUsage\":1.8,\"server\":\"12.3.4.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"12.3.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.3.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.3.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"75.8.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-5\",\"httpPortOpen\":false,\"ip\":\"75.8.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9554060480004,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2391.4100000000176,\"ramUsage\":1.75,\"server\":\"75.8.1.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167304273,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2391.4100000000176,\"ramUsage\":1.75,\"server\":\"75.8.1.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[294234,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9605213255,\"offlineMoneyMade\":368166.943414375,\"offlineRunningTime\":36036.661,\"onlineExpGained\":1526.4144,\"onlineMoneyMade\":294234,\"onlineRunningTime\":2391.4100000000176,\"ramUsage\":1.8,\"server\":\"75.8.1.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"75.8.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.8.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.8.1.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"39.8.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-6\",\"httpPortOpen\":false,\"ip\":\"39.8.6.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9554060479995,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.661,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2388.4100000000203,\"ramUsage\":1.75,\"server\":\"39.8.6.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167537262667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2388.4100000000203,\"ramUsage\":1.75,\"server\":\"39.8.6.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[790248,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.069638034,\"offlineMoneyMade\":988815.7003366668,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":790248,\"onlineRunningTime\":2388.4100000000203,\"ramUsage\":1.8,\"server\":\"39.8.6.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"39.8.6.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"39.8.6.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"39.8.6.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"49.2.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-7\",\"httpPortOpen\":false,\"ip\":\"49.2.3.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9554995626672,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2385.410000000023,\"ramUsage\":1.75,\"server\":\"49.2.3.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167537262667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2385.410000000023,\"ramUsage\":1.75,\"server\":\"49.2.3.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[255360,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9605743260004,\"offlineMoneyMade\":319524.9810666667,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":1526.4144,\"onlineMoneyMade\":255360,\"onlineRunningTime\":2385.410000000023,\"ramUsage\":1.8,\"server\":\"49.2.3.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"49.2.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.2.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.2.3.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"50.7.7.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-8\",\"httpPortOpen\":false,\"ip\":\"50.7.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.955499562667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2382.210000000026,\"ramUsage\":1.75,\"server\":\"50.7.7.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167537262667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2382.210000000026,\"ramUsage\":1.75,\"server\":\"50.7.7.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[814074,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.069638034,\"offlineMoneyMade\":1018628.5222308333,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":814074,\"onlineRunningTime\":2382.210000000026,\"ramUsage\":1.8,\"server\":\"50.7.7.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"50.7.7.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.7.7.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.7.7.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"89.7.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-9\",\"httpPortOpen\":false,\"ip\":\"89.7.8.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9554995626663,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2379.2100000000287,\"ramUsage\":1.75,\"server\":\"89.7.8.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167537262667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.662000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2379.2100000000287,\"ramUsage\":1.75,\"server\":\"89.7.8.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[295146,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9606273264997,\"offlineMoneyMade\":369308.124525625,\"offlineRunningTime\":36036.663,\"onlineExpGained\":1526.4144,\"onlineMoneyMade\":295146,\"onlineRunningTime\":2379.2100000000287,\"ramUsage\":1.8,\"server\":\"89.7.8.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"89.7.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.7.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.7.8.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"64.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-10\",\"httpPortOpen\":false,\"ip\":\"64.3.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9555930773327,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2376.2100000000314,\"ramUsage\":1.75,\"server\":\"64.3.1.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167770252332,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2376.2100000000314,\"ramUsage\":1.75,\"server\":\"64.3.1.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[506958,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.515181895,\"offlineMoneyMade\":634342.6920685417,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":506958,\"onlineRunningTime\":2376.2100000000314,\"ramUsage\":1.8,\"server\":\"64.3.1.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"64.3.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.1.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.9.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-11\",\"httpPortOpen\":false,\"ip\":\"20.9.0.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9555930773336,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2373.210000000034,\"ramUsage\":1.75,\"server\":\"20.9.0.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167770252332,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2373.210000000034,\"ramUsage\":1.75,\"server\":\"20.9.0.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[587670,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.515181895,\"offlineMoneyMade\":735335.4121010415,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":587670,\"onlineRunningTime\":2373.210000000034,\"ramUsage\":1.8,\"server\":\"20.9.0.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.9.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.0.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"19.9.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-12\",\"httpPortOpen\":false,\"ip\":\"19.9.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.955593077333,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2370.010000000037,\"ramUsage\":1.75,\"server\":\"19.9.2.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167770252332,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2370.010000000037,\"ramUsage\":1.75,\"server\":\"19.9.2.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[589380,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.515181895,\"offlineMoneyMade\":737475.0883729166,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":589380,\"onlineRunningTime\":2370.010000000037,\"ramUsage\":1.8,\"server\":\"19.9.2.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"19.9.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.9.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.9.2.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"42.3.0.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-13\",\"httpPortOpen\":false,\"ip\":\"42.3.0.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9555930773336,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2367.01000000004,\"ramUsage\":1.75,\"server\":\"42.3.0.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.167770252332,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.663,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2367.01000000004,\"ramUsage\":1.75,\"server\":\"42.3.0.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[547998,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.5152576100004,\"offlineMoneyMade\":685694.94162125,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":547998,\"onlineRunningTime\":2367.01000000004,\"ramUsage\":1.8,\"server\":\"42.3.0.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"42.3.0.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.3.0.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.3.0.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.3.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-14\",\"httpPortOpen\":false,\"ip\":\"20.3.1.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.955686592001,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2364.0100000000425,\"ramUsage\":1.75,\"server\":\"20.3.1.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168003242,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2364.0100000000425,\"ramUsage\":1.75,\"server\":\"20.3.1.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[781470,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.0698348930005,\"offlineMoneyMade\":977832.08338125,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":781470,\"onlineRunningTime\":2364.0100000000425,\"ramUsage\":1.8,\"server\":\"20.3.1.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.3.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.3.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.3.1.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"82.3.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-15\",\"httpPortOpen\":false,\"ip\":\"82.3.4.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9556865920003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2361.0100000000452,\"ramUsage\":1.75,\"server\":\"82.3.4.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168003242,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2361.0100000000452,\"ramUsage\":1.75,\"server\":\"82.3.4.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[589380,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.5152576100004,\"offlineMoneyMade\":737475.1088375,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":589380,\"onlineRunningTime\":2361.0100000000452,\"ramUsage\":1.8,\"server\":\"82.3.4.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"82.3.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"82.3.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"82.3.4.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-16\",\"httpPortOpen\":false,\"ip\":\"46.3.6.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9556865920003,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2357.810000000048,\"ramUsage\":1.75,\"server\":\"46.3.6.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168003242,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2357.810000000048,\"ramUsage\":1.75,\"server\":\"46.3.6.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[816696,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.0698348930005,\"offlineMoneyMade\":1021909.4158050002,\"offlineRunningTime\":36036.664000000004,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":816696,\"onlineRunningTime\":2357.810000000048,\"ramUsage\":1.8,\"server\":\"46.3.6.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.3.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.3.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.3.6.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"10.8.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-17\",\"httpPortOpen\":false,\"ip\":\"10.8.9.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9557801066667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2354.810000000051,\"ramUsage\":1.75,\"server\":\"10.8.9.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168236231668,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2354.810000000051,\"ramUsage\":1.75,\"server\":\"10.8.9.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[273144,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9607333275,\"offlineMoneyMade\":341777.64212916663,\"offlineRunningTime\":36036.665,\"onlineExpGained\":1526.4144000000001,\"onlineMoneyMade\":273144,\"onlineRunningTime\":2354.810000000051,\"ramUsage\":1.8,\"server\":\"10.8.9.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"10.8.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.8.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.8.9.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"53.7.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-18\",\"httpPortOpen\":false,\"ip\":\"53.7.4.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9557801066667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2351.8100000000536,\"ramUsage\":1.75,\"server\":\"53.7.4.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168236231666,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2351.8100000000536,\"ramUsage\":1.75,\"server\":\"53.7.4.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[1044468,456,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4365.62453332,\"offlineMoneyMade\":1306914.33939375,\"offlineRunningTime\":36036.665,\"onlineExpGained\":3488.9472,\"onlineMoneyMade\":1044468,\"onlineRunningTime\":2351.8100000000536,\"ramUsage\":1.8,\"server\":\"53.7.4.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"53.7.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.7.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.7.4.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-19\",\"httpPortOpen\":false,\"ip\":\"60.0.4.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9557801066667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2348.8100000000563,\"ramUsage\":1.75,\"server\":\"60.0.4.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168236231668,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2348.8100000000563,\"ramUsage\":1.75,\"server\":\"60.0.4.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[591090,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.515333325,\"offlineMoneyMade\":739614.8056927082,\"offlineRunningTime\":36036.665,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":591090,\"onlineRunningTime\":2348.8100000000563,\"ramUsage\":1.8,\"server\":\"60.0.4.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"60.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.0.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"70.8.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-20\",\"httpPortOpen\":false,\"ip\":\"70.8.5.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9557801066667,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2345.810000000059,\"ramUsage\":1.75,\"server\":\"70.8.5.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168236231668,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.665,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2345.810000000059,\"ramUsage\":1.75,\"server\":\"70.8.5.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[297084,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9607863279998,\"offlineMoneyMade\":371733.12191333337,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":1526.4144,\"onlineMoneyMade\":297084,\"onlineRunningTime\":2345.810000000059,\"ramUsage\":1.8,\"server\":\"70.8.5.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"70.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.8.5.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.0.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-21\",\"httpPortOpen\":false,\"ip\":\"20.0.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.955873621334,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2342.610000000062,\"ramUsage\":1.75,\"server\":\"20.0.2.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168469221335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2342.610000000062,\"ramUsage\":1.75,\"server\":\"20.0.2.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[273942,114,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1909.9607863280005,\"offlineMoneyMade\":342776.16729000007,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":1526.4144000000001,\"onlineMoneyMade\":273942,\"onlineRunningTime\":2342.610000000062,\"ramUsage\":1.8,\"server\":\"20.0.2.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.0.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.0.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.0.2.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"3.9.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-22\",\"httpPortOpen\":false,\"ip\":\"3.9.3.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.9558736213344,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2339.6100000000647,\"ramUsage\":1.75,\"server\":\"3.9.3.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168469221335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2339.6100000000647,\"ramUsage\":1.75,\"server\":\"3.9.3.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[796176,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3547.0700317520013,\"offlineMoneyMade\":996233.3551200002,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":2834.7696,\"onlineMoneyMade\":796176,\"onlineRunningTime\":2339.6100000000647,\"ramUsage\":1.8,\"server\":\"3.9.3.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"3.9.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"3.9.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"3.9.3.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"97.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-23\",\"httpPortOpen\":false,\"ip\":\"97.4.1.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,352]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3369.955873621334,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":2693.2224,\"onlineMoneyMade\":0,\"onlineRunningTime\":2336.6100000000674,\"ramUsage\":1.75,\"server\":\"97.4.1.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8396.168469221335,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":6710.1024,\"onlineMoneyMade\":0,\"onlineRunningTime\":2336.6100000000674,\"ramUsage\":1.75,\"server\":\"97.4.1.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[592914,228,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2728.5154090400006,\"offlineMoneyMade\":741897.1477633335,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":2180.592,\"onlineMoneyMade\":592914,\"onlineRunningTime\":2336.6100000000674,\"ramUsage\":1.8,\"server\":\"97.4.1.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"97.4.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.4.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.4.1.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"68.7.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB\",\"httpPortOpen\":false,\"ip\":\"68.7.0.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,5618]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53785.26164205867,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.666000000005,\"onlineExpGained\":42984.4416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2333.61000000007,\"ramUsage\":1.75,\"server\":\"68.7.0.6\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,14042,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":134434.436620806,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":107438.1504,\"onlineMoneyMade\":0,\"onlineRunningTime\":2333.61000000007,\"ramUsage\":1.75,\"server\":\"68.7.0.6\",\"threads\":14042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[4587099,1821,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":30509.111301905246,\"offlineMoneyMade\":5739712.266945938,\"offlineRunningTime\":36036.667,\"onlineExpGained\":24382.4616,\"onlineMoneyMade\":4587099,\"onlineRunningTime\":2333.61000000007,\"ramUsage\":1.8,\"server\":\"68.7.0.6\",\"threads\":1821}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"68.7.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"68.7.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"68.7.0.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"79.5.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-0\",\"httpPortOpen\":false,\"ip\":\"79.5.6.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,5618]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53785.26313457401,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":42984.4416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2330.610000000073,\"ramUsage\":1.75,\"server\":\"79.5.6.7\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,14042,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":134434.43662080602,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":107438.1504,\"onlineMoneyMade\":0,\"onlineRunningTime\":2330.610000000073,\"ramUsage\":1.75,\"server\":\"79.5.6.7\",\"threads\":14042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[8937468,3642,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43584.4447170075,\"offlineMoneyMade\":11183210.72098875,\"offlineRunningTime\":36036.667,\"onlineExpGained\":34832.087999999996,\"onlineMoneyMade\":8937468,\"onlineRunningTime\":2330.610000000073,\"ramUsage\":1.8,\"server\":\"79.5.6.7\",\"threads\":1821}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"79.5.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.5.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.5.6.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"23.8.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-1\",\"httpPortOpen\":false,\"ip\":\"23.8.5.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,5618]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53785.263134574,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":42984.4416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2327.410000000076,\"ramUsage\":1.75,\"server\":\"23.8.5.3\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,14042,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":134434.43662080597,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":107438.1504,\"onlineMoneyMade\":0,\"onlineRunningTime\":2327.410000000076,\"ramUsage\":1.75,\"server\":\"23.8.5.3\",\"threads\":14042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[9033981,3642,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43584.44471700749,\"offlineMoneyMade\":11303974.81394156,\"offlineRunningTime\":36036.667,\"onlineExpGained\":34832.087999999996,\"onlineMoneyMade\":9033981,\"onlineRunningTime\":2327.410000000076,\"ramUsage\":1.8,\"server\":\"23.8.5.3\",\"threads\":1821}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"23.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.8.5.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"4.0.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-2\",\"httpPortOpen\":false,\"ip\":\"4.0.0.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,0,5618]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53785.263134574,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":42984.4416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2324.4100000000785,\"ramUsage\":1.75,\"server\":\"4.0.0.9\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"7.9.7.1\":[0,0,14042,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":134434.43662080597,\"offlineMoneyMade\":0,\"offlineRunningTime\":36036.667,\"onlineExpGained\":107438.1504,\"onlineMoneyMade\":0,\"onlineRunningTime\":2324.4100000000785,\"ramUsage\":1.75,\"server\":\"4.0.0.9\",\"threads\":14042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",1436029239.375],\"dataMap\":{\"7.9.7.1\":[9787875,3642,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43584.44471700749,\"offlineMoneyMade\":12247301.879648438,\"offlineRunningTime\":36036.667,\"onlineExpGained\":34832.087999999996,\"onlineMoneyMade\":9787875,\"onlineRunningTime\":2324.4100000000785,\"ramUsage\":1.8,\"server\":\"4.0.0.9\",\"threads\":1821}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"4.0.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"4.0.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"4.0.0.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":114207.03803076841,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":1346.293241783408,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":143633.7624615376,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"14.7.5.3\",\"BitRunners Server\":\"66.2.4.5\",\"The Black Hand Server\":\"46.4.2.8\",\"NiteSec Server\":\"28.8.5.2\",\"The Dark Army Server\":\"85.5.6.2\",\"CyberSec Server\":\"90.1.1.6\",\"Daedalus Server\":\"69.6.8.2\",\"w0r1d_d43m0n\":\"64.9.0.8\",\"Darkweb Server\":\"94.9.9.2\"}}","AliasesSave":"{\"dir\":\"ls\",\"nuke\":\"run NUKE.exe\",\"ssh\":\"run BruteSSH.exe\",\"sql\":\"run SQLInject.exe\",\"ftp\":\"run FTPCrack.exe\",\"http\":\"run HTTPWorm.exe\",\"smtp\":\"run relaySMTP.exe\",\"pull\":\"run pull/pull-ns2.js\",\"wallet\":\"nano master/character/wallet-ns2.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableHotkeys\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.47.0\"","AllGangsSave":"{\"Slum Snakes\":{\"power\":60.43574694242821,\"territory\":0.14565714285714254},\"Tetrads\":{\"power\":4.023007592320449,\"territory\":0.11975714285714466},\"The Syndicate\":{\"power\":6.962217780156482,\"territory\":0.1477571428571423},\"The Dark Army\":{\"power\":5.602973809650841,\"territory\":0.12915714285714436},\"Speakers for the Dead\":{\"power\":18.175935267836067,\"territory\":0.2040571428571361},\"NiteSec\":{\"power\":12.200200319200155,\"territory\":0.17195714285713964},\"The Black Hand\":{\"power\":2.5541797539822637,\"territory\":0.08165714285714357}}"}}