{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":454,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":2,\"intelligence\":0,\"hacking_chance_mult\":1.4266830824077439,\"hacking_speed_mult\":1.4417733131822394,\"hacking_money_mult\":1.3587457927692799,\"hacking_grow_mult\":1.3587457927692799,\"hacking_exp\":33678881.23719724,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.6028784430851004,\"strength_mult\":1.7038672241326769,\"defense_mult\":1.7038672241326769,\"dexterity_mult\":1.5693513906485188,\"agility_mult\":1.4266830824077443,\"charisma_mult\":2.0218137396406886,\"hacking_exp_mult\":1.4946203720462081,\"strength_exp_mult\":1.4946203720462081,\"defense_exp_mult\":1.4946203720462081,\"dexterity_exp_mult\":1.4946203720462081,\"agility_exp_mult\":1.4946203720462081,\"charisma_exp_mult\":1.4946203720462081,\"company_rep_mult\":1.3587457927692799,\"faction_rep_mult\":1.3587457927692799,\"money\":\"2339791466.3432213878\",\"homeComputer\":\"60.8.2.2\",\"city\":\"Chongqing\",\"location\":\"KuaiGong International\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"60.8.2.2\",\"purchasedServers\":[\"1.4.4.8\",\"19.3.7.5\",\"66.5.9.6\",\"28.0.8.9\",\"72.9.0.6\",\"14.0.1.5\",\"9.2.0.7\",\"7.3.3.4\",\"15.8.0.9\",\"67.8.3.7\",\"90.3.4.2\",\"68.7.9.4\",\"47.3.0.9\",\"48.7.6.3\",\"71.8.6.7\",\"40.5.1.2\",\"80.8.9.4\",\"7.0.5.5\",\"36.7.0.6\",\"94.6.3.4\",\"64.2.6.7\",\"55.1.3.2\",\"16.0.1.6\",\"26.5.9.3\",\"42.8.8.6\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16603.40000002534,\"ram\":64,\"totalMoneyGenerated\":136055490.06100833,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16569.400000025216,\"ram\":64,\"totalMoneyGenerated\":135930674.91568863,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16551.40000002515,\"ram\":64,\"totalMoneyGenerated\":135758103.8095812,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16533.400000025085,\"ram\":64,\"totalMoneyGenerated\":135668941.5059337,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16515.40000002502,\"ram\":64,\"totalMoneyGenerated\":135499585.53929743,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16497.600000024955,\"ram\":64,\"totalMoneyGenerated\":135425567.70150557,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16478.800000024887,\"ram\":64,\"totalMoneyGenerated\":135394976.4509807,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16462.400000024827,\"ram\":64,\"totalMoneyGenerated\":135360235.9848119,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16443.000000024756,\"ram\":64,\"totalMoneyGenerated\":135332486.40467405,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16424.200000024688,\"ram\":64,\"totalMoneyGenerated\":135308193.1512511,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16407.600000024628,\"ram\":64,\"totalMoneyGenerated\":135271508.7275081,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16387.400000024554,\"ram\":64,\"totalMoneyGenerated\":135243044.66315526,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16373.400000024503,\"ram\":64,\"totalMoneyGenerated\":135206478.31440836,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16370.400000024492,\"ram\":64,\"totalMoneyGenerated\":135179321.46511024,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16366.400000024478,\"ram\":64,\"totalMoneyGenerated\":135139417.83679298,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16322.80000002432,\"ram\":64,\"totalMoneyGenerated\":134897324.6218532,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16270.80000002413,\"ram\":64,\"totalMoneyGenerated\":134566471.87674108,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":16097.8000000235,\"ram\":64,\"totalMoneyGenerated\":133469748.90500462,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":15925.600000022874,\"ram\":64,\"totalMoneyGenerated\":132281073.6142407,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":15392.600000020935,\"ram\":64,\"totalMoneyGenerated\":128299266.81329696,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":13609.60000001445,\"ram\":64,\"totalMoneyGenerated\":114047056.46264523,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":13388.600000013646,\"ram\":64,\"totalMoneyGenerated\":112210803.77234362,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":13057.400000012442,\"ram\":64,\"totalMoneyGenerated\":109434993.1417012,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":8381.0707446826,\"onlineTimeSeconds\":12466.40000001029,\"ram\":64,\"totalMoneyGenerated\":104481780.33158748,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"NiteSec\",\"Tian Di Hui\",\"Chongqing\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":2}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.684844783033907,\"crime_success_mult\":1.684844783033907,\"isWorking\":false,\"workType\":\"Working for Faction\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3587457927692799,\"hacknet_node_money_mult\":3.426884271782196,\"hacknet_node_purchase_cost_mult\":0.5185672662900708,\"hacknet_node_ram_cost_mult\":0.6778657075687199,\"hacknet_node_core_cost_mult\":0.6778657075687199,\"hacknet_node_level_cost_mult\":0.5761858514334119,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Fluffy Bunny Inc.\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"QxhMBuJ\",\"mor\":100,\"hap\":88.72370732598299,\"ene\":88.71883571423895,\"int\":93,\"cha\":96,\"exp\":129.67199999999426,\"cre\":70,\"eff\":80,\"sal\":1233,\"pro\":0,\"cyclesUntilRaise\":376,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"whdz53h\",\"mor\":100,\"hap\":88.9198416883133,\"ene\":88.91555385292243,\"int\":67.32,\"cha\":89.1,\"exp\":150.69899999989465,\"cre\":74.25,\"eff\":49.5,\"sal\":1119.69,\"pro\":0,\"cyclesUntilRaise\":387,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EZoVMir\",\"mor\":100,\"hap\":88.84983599964609,\"ene\":88.8451630377813,\"int\":72.68,\"cha\":56.88,\"exp\":136.63899999996127,\"cre\":52.93,\"eff\":65.57000000000001,\"sal\":981.1800000000001,\"pro\":0,\"cyclesUntilRaise\":387,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rocx5On\",\"mor\":100,\"hap\":88.64143729711365,\"ene\":80.33692702452052,\"int\":74.10000000000001,\"cha\":51.480000000000004,\"exp\":97.40400000000218,\"cre\":74.10000000000001,\"eff\":45.24,\"sal\":854.1,\"pro\":0,\"cyclesUntilRaise\":392,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7ZXUQ2h\",\"mor\":100,\"hap\":88.71858383813289,\"ene\":66.61681471326297,\"int\":61.11,\"cha\":54.32,\"exp\":110.97400000000218,\"cre\":58.199999999999996,\"eff\":88.27,\"sal\":945.75,\"pro\":0,\"cyclesUntilRaise\":392,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gu74SMx\",\"mor\":100,\"hap\":88.73737910603622,\"ene\":75.77667732160113,\"int\":45.24,\"cha\":52.260000000000005,\"exp\":121.58400000000218,\"cre\":45.24,\"eff\":70.98,\"sal\":833.0400000000001,\"pro\":0,\"cyclesUntilRaise\":392,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Y9R1QWx\",\"mor\":100,\"hap\":88.63288316694388,\"ene\":86.70083451093132,\"int\":53.32,\"cha\":73.96,\"exp\":110.07200000000218,\"cre\":69.66,\"eff\":60.199999999999996,\"sal\":928.8,\"pro\":0,\"cyclesUntilRaise\":396,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"LcZ8iEH\",\"mor\":100,\"hap\":88.71194476765103,\"ene\":80.60373013869189,\"int\":73.92,\"cha\":43.89,\"exp\":104.58200000000218,\"cre\":64.68,\"eff\":54.67,\"sal\":852.39,\"pro\":0,\"cyclesUntilRaise\":396,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yxNErvS\",\"mor\":100,\"hap\":88.86248970237699,\"ene\":88.85926814360343,\"int\":95.03999999999999,\"cha\":50.49,\"exp\":108.10200000000218,\"cre\":84.15,\"eff\":58.41,\"sal\":1015.74,\"pro\":0,\"cyclesUntilRaise\":396,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2350}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4XQpdmG\",\"mor\":100,\"hap\":88.78097974633897,\"ene\":88.77882044272337,\"int\":74.48,\"cha\":52.44,\"exp\":105.13600000000206,\"cre\":54.72,\"eff\":53.2,\"sal\":857.28,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5tuovU0\",\"mor\":100,\"hap\":88.73889933651166,\"ene\":81.63562515155249,\"int\":64.32,\"cha\":86.39999999999999,\"exp\":122.37600000000205,\"cre\":80.64,\"eff\":64.32,\"sal\":1091.52,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"D0KHhVx\",\"mor\":100,\"hap\":88.79264649260797,\"ene\":88.79011350725777,\"int\":84.48,\"cha\":74.8,\"exp\":137.81599999995555,\"cre\":62.48,\"eff\":77.44,\"sal\":1148.4,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}}],\"employeeProd\":{\"Operations\":1169.8083310411748,\"Engineer\":285.9597182688261,\"Business\":125.89504874707049,\"Management\":1644.2570700173144,\"Research & Development\":798.9045532383884,\"total\":4024.8247213127747,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Chongqing\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"p0TnXOt\",\"mor\":100,\"hap\":88.71662041245854,\"ene\":71.65166035996086,\"int\":80.08,\"cha\":86.24,\"exp\":100.84700000000205,\"cre\":66,\"eff\":79.2,\"sal\":1074.48,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"KhGyOpN\",\"mor\":100,\"hap\":88.87664167509715,\"ene\":72.02308830055237,\"int\":56.28,\"cha\":46.199999999999996,\"exp\":113.00700000000205,\"cre\":71.39999999999999,\"eff\":42.839999999999996,\"sal\":826.56,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lFz2ltQ\",\"mor\":100,\"hap\":88.85634303890758,\"ene\":66.44147074070558,\"int\":50.400000000000006,\"cha\":75.2,\"exp\":126.20700000000205,\"cre\":63.2,\"eff\":58.400000000000006,\"sal\":957.6,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"qmV8Wnd\",\"mor\":100,\"hap\":88.6584954540189,\"ene\":88.66131413017935,\"int\":52,\"cha\":61,\"exp\":120.20700000000205,\"cre\":62,\"eff\":70,\"sal\":933,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Z1LO6dC\",\"mor\":100,\"hap\":88.8445944140839,\"ene\":88.84574857487536,\"int\":48,\"cha\":76,\"exp\":108.60700000000206,\"cre\":63.2,\"eff\":79.2,\"sal\":962.4000000000001,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"mLBLiSG\",\"mor\":100,\"hap\":88.714373074903,\"ene\":88.71657868284483,\"int\":54,\"cha\":80.10000000000001,\"exp\":126.20700000000205,\"cre\":54.9,\"eff\":65.7,\"sal\":980.1,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DjR4JuX\",\"mor\":100,\"hap\":88.74950026217017,\"ene\":88.75208243669442,\"int\":72.09,\"cha\":68.53,\"exp\":120.06700000000205,\"cre\":72.09,\"eff\":83.66,\"sal\":1086.69,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pSvl8C0\",\"mor\":100,\"hap\":88.93229093558936,\"ene\":88.93244542271678,\"int\":77,\"cha\":66.99,\"exp\":101.94700000000205,\"cre\":60.06,\"eff\":61.6,\"sal\":940.1700000000001,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"01lbdGM\",\"mor\":100,\"hap\":88.76710207606844,\"ene\":88.76937773981419,\"int\":91,\"cha\":55,\"exp\":121.20700000000205,\"cre\":54,\"eff\":61,\"sal\":984,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7N1GIAW\",\"mor\":100,\"hap\":88.72387558382586,\"ene\":88.72505687017085,\"int\":71.38,\"cha\":64.74,\"exp\":122.26700000000206,\"cre\":73.03999999999999,\"eff\":67.22999999999999,\"sal\":1033.35,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IpWpl7P\",\"mor\":100,\"hap\":88.60016539328545,\"ene\":88.60273509988376,\"int\":83.16,\"cha\":61.32,\"exp\":100.40700000000204,\"cre\":54.6,\"eff\":43.68,\"sal\":866.88,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"0INsHdn\",\"mor\":100,\"hap\":88.85640516873507,\"ene\":88.85863868167135,\"int\":85.36,\"cha\":58.08,\"exp\":125.48700000000206,\"cre\":73.04,\"eff\":85.36,\"sal\":1119.36,\"pro\":0,\"cyclesUntilRaise\":331,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}}],\"employeeProd\":{\"Operations\":1305.8883355882092,\"Engineer\":350.7772785634319,\"Business\":200.6712168843379,\"Management\":1620.4569869041452,\"Research & Development\":526.1490352486612,\"total\":4003.942853188785,\"Unassigned\":0}}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":21,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker1\",\"mor\":100,\"hap\":88.73344041614648,\"ene\":88.04387758529462,\"int\":53.72,\"cha\":45.03,\"exp\":113.61300000000242,\"cre\":71.10000000000001,\"eff\":67.94,\"sal\":862.6800000000001,\"pro\":0,\"cyclesUntilRaise\":319,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker2\",\"mor\":100,\"hap\":88.67268387132228,\"ene\":88.0009148805864,\"int\":93.11999999999999,\"cha\":59.519999999999996,\"exp\":125.26500000000242,\"cre\":73.92,\"eff\":79.67999999999999,\"sal\":1103.04,\"pro\":0,\"cyclesUntilRaise\":325,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker3\",\"mor\":100,\"hap\":88.74531092069475,\"ene\":87.86917456874716,\"int\":63.18000000000001,\"cha\":53.46,\"exp\":118.09200000000241,\"cre\":63.99,\"eff\":55.89,\"sal\":872.37,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker4\",\"mor\":100,\"hap\":88.78261900735336,\"ene\":88.01492074043006,\"int\":52.46,\"cha\":67.08,\"exp\":136.90399999996023,\"cre\":66.22,\"eff\":58.48,\"sal\":952.02,\"pro\":0,\"cyclesUntilRaise\":332,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker5\",\"mor\":100,\"hap\":88.64915992974079,\"ene\":87.78032356378188,\"int\":56.88,\"cha\":67.94,\"exp\":123.84100000000242,\"cre\":53.72,\"eff\":64.78,\"sal\":910.08,\"pro\":0,\"cyclesUntilRaise\":333,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2550}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Worker6\",\"mor\":100,\"hap\":88.78673401333955,\"ene\":88.10512208625308,\"int\":23.2,\"cha\":27.549999999999997,\"exp\":77.18000000000228,\"cre\":18.849999999999998,\"eff\":27.259999999999998,\"sal\":341.03999999999996,\"pro\":0,\"cyclesUntilRaise\":280,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FWjbtP3\",\"mor\":100,\"hap\":88.58267869155556,\"ene\":87.94577907155707,\"int\":78.57,\"cha\":71.78,\"exp\":110.76100000000228,\"cre\":71.78,\"eff\":85.36,\"sal\":1073.79,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"c5vWXFV\",\"mor\":100,\"hap\":88.87526655949934,\"ene\":88.29152400748379,\"int\":76.36,\"cha\":46,\"exp\":109.08100000000229,\"cre\":68.08,\"eff\":56.120000000000005,\"sal\":885.96,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7Ikuvj1\",\"mor\":100,\"hap\":88.73031594856589,\"ene\":87.93438961811437,\"int\":74.75999999999999,\"cha\":62.16,\"exp\":117.44100000000228,\"cre\":82.32,\"eff\":52.08,\"sal\":985.3199999999999,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"zDh75j4\",\"mor\":100,\"hap\":88.71933726974683,\"ene\":88.01612607829661,\"int\":56.980000000000004,\"cha\":57.75,\"exp\":104.98100000000228,\"cre\":60.83,\"eff\":55.44,\"sal\":826.98,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"0y7h4VO\",\"mor\":100,\"hap\":88.71719548118608,\"ene\":88.12953996449372,\"int\":74.48,\"cha\":56.839999999999996,\"exp\":110.30100000000228,\"cre\":90.16,\"eff\":90.16,\"sal\":1084.86,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sfcPl8h\",\"mor\":100,\"hap\":88.61126912149821,\"ene\":87.99512811623606,\"int\":65.12,\"cha\":46.64,\"exp\":127.20100000000228,\"cre\":88,\"eff\":66,\"sal\":997.92,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"r8syIyq\",\"mor\":100,\"hap\":88.80220612941189,\"ene\":88.18872269181693,\"int\":51.85,\"cha\":78.2,\"exp\":125.77100000000229,\"cre\":74.8,\"eff\":58.65,\"sal\":986.85,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Rc9QSrd\",\"mor\":100,\"hap\":88.76450913753952,\"ene\":88.13177780844745,\"int\":48.6,\"cha\":71.28,\"exp\":124.31100000000228,\"cre\":72.9,\"eff\":75.33,\"sal\":996.3000000000001,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7Uy1GaS\",\"mor\":100,\"hap\":88.70742613561427,\"ene\":88.05046461829099,\"int\":77.44,\"cha\":82.72,\"exp\":106.96100000000229,\"cre\":78.32000000000001,\"eff\":75.68,\"sal\":1082.4,\"pro\":0,\"cyclesUntilRaise\":293,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"jxUIGX8\",\"mor\":100,\"hap\":88.77199492048383,\"ene\":88.05375900309184,\"int\":90.09,\"cha\":81.17999999999999,\"exp\":111.52200000000227,\"cre\":92.07,\"eff\":85.14,\"sal\":1199.8799999999999,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NrgE68k\",\"mor\":100,\"hap\":88.75812292199352,\"ene\":88.06884967071298,\"int\":41.8,\"cha\":50.160000000000004,\"exp\":118.56200000000227,\"cre\":59.28,\"eff\":74.48,\"sal\":852.72,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"S3x3a0B\",\"mor\":100,\"hap\":88.84778954437871,\"ene\":88.09743754543709,\"int\":54.519999999999996,\"cha\":58.279999999999994,\"exp\":121.14200000000227,\"cre\":57.339999999999996,\"eff\":94,\"sal\":975.7199999999999,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"S0NqHt5\",\"mor\":100,\"hap\":88.82428834473238,\"ene\":88.14427481928958,\"int\":56.21,\"cha\":75.46000000000001,\"exp\":103.93200000000228,\"cre\":63.14,\"eff\":76.23,\"sal\":944.7900000000001,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3dUeAVJ\",\"mor\":100,\"hap\":88.66361821086153,\"ene\":87.9681265839409,\"int\":72.38,\"cha\":67.67999999999999,\"exp\":135.24199999996796,\"cre\":75.19999999999999,\"eff\":66.74,\"sal\":1071.6,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7v876n8\",\"mor\":100,\"hap\":88.86427511558223,\"ene\":88.23089821842285,\"int\":65.52,\"cha\":60.97,\"exp\":134.66199999997073,\"cre\":85.54,\"eff\":62.79,\"sal\":1048.32,\"pro\":0,\"cyclesUntilRaise\":386,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2450}}],\"employeeProd\":{\"Operations\":2413.181777808444,\"Engineer\":747.6630072503531,\"Business\":172.78447350509938,\"Management\":2657.571174561231,\"Research & Development\":1165.6993622394116,\"total\":7156.899795364539,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"New Tokyo\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"zbgMSuo\",\"mor\":100,\"hap\":88.81886429070236,\"ene\":88.82119467696661,\"int\":49.29,\"cha\":62.31,\"exp\":109.61100000000204,\"cre\":48.36,\"eff\":51.150000000000006,\"sal\":800.73,\"pro\":0,\"cyclesUntilRaise\":63,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"dwHuKQJ\",\"mor\":100,\"hap\":88.86882436146043,\"ene\":88.87022221666186,\"int\":89,\"cha\":77.43,\"exp\":134.8009999999698,\"cre\":49.84,\"eff\":63.19,\"sal\":1081.35,\"pro\":0,\"cyclesUntilRaise\":63,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3DFpK0O\",\"mor\":100,\"hap\":88.76665418674534,\"ene\":88.76781912633643,\"int\":80.99,\"cha\":71.2,\"exp\":130.3509999999909,\"cre\":52.51,\"eff\":44.5,\"sal\":977.22,\"pro\":0,\"cyclesUntilRaise\":63,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lAnlSWk\",\"mor\":100,\"hap\":88.85271644971876,\"ene\":88.85326978351537,\"int\":59.28,\"cha\":38,\"exp\":94.82400000000203,\"cre\":44.84,\"eff\":52.44,\"sal\":706.8,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EXtDQhV\",\"mor\":100,\"hap\":88.72468209797655,\"ene\":88.7253038944928,\"int\":72.21,\"cha\":43.989999999999995,\"exp\":133.46399999997615,\"cre\":63.08,\"eff\":42.33,\"sal\":903.87,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"SAcS649\",\"mor\":100,\"hap\":88.78592218167523,\"ene\":88.78768176138678,\"int\":59.64,\"cha\":68.88,\"exp\":126.02400000000203,\"cre\":58.8,\"eff\":74.75999999999999,\"sal\":1002.9599999999999,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pwOSyd7\",\"mor\":100,\"hap\":88.74985989935531,\"ene\":64.0715706381413,\"int\":57.949999999999996,\"cha\":65.55,\"exp\":133.49299999997598,\"cre\":71.25,\"eff\":91.19999999999999,\"sal\":1100.1,\"pro\":0,\"cyclesUntilRaise\":19,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Vi6AZYN\",\"mor\":100,\"hap\":88.72955739376638,\"ene\":88.7299628219064,\"int\":70.55,\"cha\":53.949999999999996,\"exp\":109.183000000002,\"cre\":69.72,\"eff\":41.5,\"sal\":876.4799999999999,\"pro\":0,\"cyclesUntilRaise\":19,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bqUteYG\",\"mor\":100,\"hap\":88.75205173064616,\"ene\":88.75232717523104,\"int\":63.36,\"cha\":61.38,\"exp\":146.79299999991298,\"cre\":78.21,\"eff\":53.46,\"sal\":1051.3799999999999,\"pro\":0,\"cyclesUntilRaise\":19,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"HiUpPge\",\"mor\":100,\"hap\":88.75703038957111,\"ene\":87.06272974538312,\"int\":70.68,\"cha\":73.47,\"exp\":101.100000000002,\"cre\":93,\"eff\":49.29,\"sal\":1004.4000000000001,\"pro\":0,\"cyclesUntilRaise\":20,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"F2tpcYZ\",\"mor\":100,\"hap\":88.83138021771279,\"ene\":69.0086963807931,\"int\":78.32000000000001,\"cha\":82.77,\"exp\":97.240000000002,\"cre\":45.39,\"eff\":78.32000000000001,\"sal\":987.9,\"pro\":0,\"cyclesUntilRaise\":20,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"w5xZtpK\",\"mor\":100,\"hap\":88.80175977448926,\"ene\":78.02304485236003,\"int\":61.6,\"cha\":61.6,\"exp\":108.180000000002,\"cre\":44.88,\"eff\":49.28,\"sal\":818.4,\"pro\":0,\"cyclesUntilRaise\":20,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2100}}],\"employeeProd\":{\"Operations\":1145.0182851530776,\"Engineer\":290.9414510652496,\"Business\":195.8823277044872,\"Management\":1399.9011291587028,\"Research & Development\":572.9755431866665,\"total\":3604.718736268184,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Ishima\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"lO4vkz1\",\"mor\":100,\"hap\":88.81998338414459,\"ene\":88.81998338414459,\"int\":76.36,\"cha\":46.48,\"exp\":129.89099999999303,\"cre\":52.29,\"eff\":62.25,\"sal\":943.7099999999999,\"pro\":0,\"cyclesUntilRaise\":33,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4OCAId1\",\"mor\":100,\"hap\":88.73405050267785,\"ene\":88.73405050267785,\"int\":88,\"cha\":53.68,\"exp\":97.58100000000199,\"cre\":59.84,\"eff\":85.36,\"sal\":995.28,\"pro\":0,\"cyclesUntilRaise\":33,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DaV685y\",\"mor\":100,\"hap\":88.77247460690523,\"ene\":88.77247460690523,\"int\":69.7,\"cha\":54.94,\"exp\":123.221000000002,\"cre\":79.53999999999999,\"eff\":80.36,\"sal\":1065.1799999999998,\"pro\":0,\"cyclesUntilRaise\":33,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2100}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8aPVevx\",\"mor\":100,\"hap\":88.91798996436991,\"ene\":88.91798996436991,\"int\":87.42,\"cha\":66.96000000000001,\"exp\":102.73800000000132,\"cre\":68.82000000000001,\"eff\":90.21000000000001,\"sal\":1143.9,\"pro\":0,\"cyclesUntilRaise\":384,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TOJ1xtc\",\"mor\":100,\"hap\":88.73651185324906,\"ene\":77.33828627860606,\"int\":50.74,\"cha\":67.08,\"exp\":112.24800000000133,\"cre\":63.64,\"eff\":61.92,\"sal\":962.34,\"pro\":0,\"cyclesUntilRaise\":384,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"dZOcVbg\",\"mor\":100,\"hap\":88.6807164719088,\"ene\":88.6807164719088,\"int\":61.6,\"cha\":53.13,\"exp\":104.14800000000132,\"cre\":43.89,\"eff\":53.13,\"sal\":843.15,\"pro\":0,\"cyclesUntilRaise\":384,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"UPNCe0J\",\"mor\":100,\"hap\":88.72185243211477,\"ene\":75.50846262070797,\"int\":53.58,\"cha\":88.36,\"exp\":124.64200000000126,\"cre\":67.67999999999999,\"eff\":62.04,\"sal\":1088.52,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"23GuqEB\",\"mor\":100,\"hap\":88.73972757917554,\"ene\":88.73972757917554,\"int\":49.6,\"cha\":52.800000000000004,\"exp\":99.86200000000127,\"cre\":52,\"eff\":53.6,\"sal\":823.2,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ENK3Pfk\",\"mor\":100,\"hap\":88.75934217428058,\"ene\":88.75934217428058,\"int\":78.12,\"cha\":51.150000000000006,\"exp\":126.46200000000127,\"cre\":68.82000000000001,\"eff\":50.220000000000006,\"sal\":1023.9300000000001,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"D7bXXG8\",\"mor\":100,\"hap\":88.68526382349111,\"ene\":88.68526382349111,\"int\":93.12,\"cha\":83.42,\"exp\":87.78200000000126,\"cre\":75.66,\"eff\":79.53999999999999,\"sal\":1158.18,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"MwcsSOH\",\"mor\":100,\"hap\":88.6569961860924,\"ene\":79.95626907943038,\"int\":60.830000000000005,\"cha\":52.14,\"exp\":95.87200000000126,\"cre\":52.93,\"eff\":59.25,\"sal\":862.6800000000001,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"UwfmlyZ\",\"mor\":100,\"hap\":88.79584639646576,\"ene\":88.79584639646576,\"int\":51.68,\"cha\":40.28,\"exp\":93.50200000000126,\"cre\":51.68,\"eff\":67.64,\"sal\":813.96,\"pro\":0,\"cyclesUntilRaise\":46,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1000}}],\"employeeProd\":{\"Operations\":1032.7849117641358,\"Engineer\":359.72192625406376,\"Business\":224.33320377974516,\"Management\":1483.6480684135015,\"Research & Development\":601.1690655092098,\"total\":3701.657175720656,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Volhaven\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"0y81GOD\",\"mor\":100,\"hap\":88.69068477408018,\"ene\":83.64181259430572,\"int\":63.14,\"cha\":48.51,\"exp\":106.52800000000144,\"cre\":43.120000000000005,\"eff\":68.53,\"sal\":875.49,\"pro\":0,\"cyclesUntilRaise\":134,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oTc25ST\",\"mor\":100,\"hap\":88.62277930295731,\"ene\":73.29963479582352,\"int\":81,\"cha\":90,\"exp\":108.19800000000144,\"cre\":51.300000000000004,\"eff\":90,\"sal\":1147.5,\"pro\":0,\"cyclesUntilRaise\":134,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ETrGxsN\",\"mor\":100,\"hap\":88.68372730591145,\"ene\":88.68579126299916,\"int\":50.49,\"cha\":74.25,\"exp\":116.20800000000143,\"cre\":83.16,\"eff\":95.03999999999999,\"sal\":1143.45,\"pro\":0,\"cyclesUntilRaise\":134,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rjzSyKk\",\"mor\":100,\"hap\":88.71993619998898,\"ene\":88.72072650126532,\"int\":59.15,\"cha\":79.17,\"exp\":125.83600000000132,\"cre\":80.08,\"eff\":71.89,\"sal\":1143.8700000000001,\"pro\":0,\"cyclesUntilRaise\":388,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EQzbJ7I\",\"mor\":100,\"hap\":88.71876425310738,\"ene\":88.72144126442254,\"int\":94.08,\"cha\":93.11999999999999,\"exp\":112.59000000000131,\"cre\":61.44,\"eff\":52.8,\"sal\":1137.6,\"pro\":0,\"cyclesUntilRaise\":390,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"joSk5VT\",\"mor\":100,\"hap\":88.74419180210073,\"ene\":63.828187959957376,\"int\":72.9,\"cha\":75.60000000000001,\"exp\":114.93000000000133,\"cre\":48.6,\"eff\":52.2,\"sal\":988.2,\"pro\":0,\"cyclesUntilRaise\":390,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"KP1A7gX\",\"mor\":99,\"hap\":86.03367737578876,\"ene\":63.03367737578903,\"int\":60.76,\"cha\":78.4,\"exp\":81.4520000000006,\"cre\":56.839999999999996,\"eff\":68.6,\"sal\":990.78,\"pro\":0,\"cyclesUntilRaise\":336,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":500}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EB9Snti\",\"mor\":67,\"hap\":87.18645815464095,\"ene\":46.186458154640846,\"int\":64,\"cha\":79.2,\"exp\":56.5920000000006,\"cre\":53.6,\"eff\":57.6,\"sal\":885.6,\"pro\":0,\"cyclesUntilRaise\":336,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":500}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pJYGTyH\",\"mor\":99,\"hap\":58.11721089549849,\"ene\":67.1172108954985,\"int\":50.879999999999995,\"cha\":87.36,\"exp\":75.3120000000006,\"cre\":67.2,\"eff\":53.76,\"sal\":956.16,\"pro\":0,\"cyclesUntilRaise\":336,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":500}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ALb5Mdx\",\"mor\":81,\"hap\":88.2269993822439,\"ene\":86.2269993822439,\"int\":81.48,\"cha\":54.32,\"exp\":92.22100000000059,\"cre\":84.39,\"eff\":77.6,\"sal\":1123.26,\"pro\":0,\"cyclesUntilRaise\":3,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sBzvZj9\",\"mor\":77,\"hap\":46.214541121007755,\"ene\":45.214541121007755,\"int\":76.95,\"cha\":84.55,\"exp\":76.39100000000059,\"cre\":95,\"eff\":85.5,\"sal\":1208.3999999999999,\"pro\":0,\"cyclesUntilRaise\":3,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"zEcCyw8\",\"mor\":99,\"hap\":66.06711667526213,\"ene\":42.0671166752621,\"int\":45,\"cha\":45,\"exp\":105.59100000000059,\"cre\":63.9,\"eff\":45,\"sal\":866.7,\"pro\":0,\"cyclesUntilRaise\":3,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}}],\"employeeProd\":{\"Operations\":667.2700084609157,\"Engineer\":247.9384509586081,\"Business\":250.14774863085069,\"Management\":1607.0581506815133,\"Research & Development\":192.66187571900173,\"total\":2965.0762344508894,\"Unassigned\":0}}}},\"name\":\"Skynet\",\"type\":\"Software\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":18174.34099934688,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Market-TA.I\":true},\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prodMats\":[\"AICores\"],\"products\":{\"Skynet 2.0\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Skynet 2.0\",\"dmd\":0.18006490489934318,\"cmp\":99.38839999998645,\"mku\":6.117189987324572,\"pCost\":30587.24916709242,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":277.4666641224637,\"qlt\":275.0798225638385,\"per\":218.47883794238686,\"dur\":266.36644020376355,\"rel\":327.449522648371,\"aes\":282.493708881052,\"fea\":299.9586972539586,\"data\":{\"Aevum\":[1049.964397375201,11.725857900436838,7.225170568567981],\"Chongqing\":[909.5542762041637,12.050136410387717,8.162074839615093],\"Ishima\":[650.4898803549883,11.402554048543681,8.40448733021791],\"New Tokyo\":[341.9721033368011,11.417329020904551,8.110559090826706],\"Sector-12\":[1691.8607547795723,10.8,7.848083092285512],\"Volhaven\":[264.38197003635776,10.429614516740964,8.648967488805194]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Skynet Lite\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Skynet Lite\",\"dmd\":0.001,\"cmp\":53.397199999994285,\"mku\":6.234895069416213,\"pCost\":30587.24916709242,\"sCost\":\"MP*1.005\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":276.09859237262174,\"qlt\":273.69837585552995,\"per\":217.56790696407575,\"dur\":264.9667168628118,\"rel\":325.73577876171254,\"aes\":280.86399009075933,\"fea\":298.5241834189786,\"data\":{\"Aevum\":[1019.1684799807305,11.725857900436838,7.2019947583310415],\"Chongqing\":[885.7905267108754,12.050136410387717,8.135893769448312],\"Ishima\":[628.34955296763,11.402554048543681,8.377528685899847],\"New Tokyo\":[344.5736121863599,11.417329020904551,8.084543265093508],\"Sector-12\":[1455.0889279089868,0,7.82290919739342],\"Volhaven\":[268.2658685707476,10.429614516740964,8.621224637980601]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"SkyNet Pro\":{\"ctor\":\"Product\",\"data\":{\"name\":\"SkyNet Pro\",\"dmd\":16.138693872404563,\"cmp\":37.642399999998766,\"mku\":2.851594351165795,\"pCost\":30587.24916709242,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":770.9249496155953,\"qlt\":796.9937638965052,\"per\":654.4187001375616,\"dur\":706.5895469088161,\"rel\":875.8378224055278,\"aes\":774.8280103948684,\"fea\":820.7849147295655,\"data\":{\"Aevum\":[0,11.725857900436838,11.725857900436838],\"Chongqing\":[0,12.050136410387717,12.050136410387717],\"Ishima\":[0,11.402554048543681,11.402554048543681],\"New Tokyo\":[0,11.417329020904551,11.417329020904551],\"Sector-12\":[0,0,0],\"Volhaven\":[0,10.429614516740964,10.429614516740964]},\"loc\":\"\",\"siz\":0.034999999999999996,\"reqMats\":{\"Hardware\":0.5,\"Energy\":0.5},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":178.8208234411554,\"popularity\":44.532336790990115,\"startingCost\":25000000000,\"reFac\":0.15,\"sciFac\":0.62,\"hwFac\":0.25,\"robFac\":0.05,\"aiFac\":0.18,\"advFac\":0.16,\"prodMult\":11.240817925000721,\"lastCycleRevenue\":\"5489122.5707173863\",\"lastCycleExpenses\":\"1617777.28789165201\",\"thisCycleRevenue\":\"0\",\"thisCycleExpenses\":\"16115516.6130513621\",\"upgrades\":[85,6],\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 602.9<br>Hardware: 17.6<br>RealEstate: 0.0<br>Skynet 2.0: 37<br>Skynet Lite: 36<br>\",\"level\":6,\"sizeUsed\":692.8732766847024,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":58.629289502184186,\"loc\":\"Aevum\",\"size\":720,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":60286.20967926993,\"qlt\":0,\"dmd\":83.0890674158395,\"dmdR\":[80,99],\"cmp\":85.4405629272775,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":29.314644751092093,\"sll\":0.04478726184970905,\"prd\":-29.314644751092093,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1934.1318560342975,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":293.1921530757593,\"qlt\":0,\"dmd\":88.84611631316284,\"dmdR\":[80,90],\"cmp\":70.76398785158717,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":29.314644751092093,\"sll\":0.09604857111117798,\"prd\":-29.314644751092093,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7211.505551499233,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77594.80275766469,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":440.50510425978956,\"dmd\":87.28508161162196,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":23.451715800873675,\"prd\":23.451715800873675,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13223.472058975702,\"sCost\":\"MP*1.05\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58520,\"qlt\":0,\"dmd\":32.526798471402074,\"dmdR\":[5,99],\"cmp\":64.7215472425102,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":45220.14704853369,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 846.6<br>Hardware: 3.2<br>RealEstate: 0.0<br>Skynet 2.0: 59<br>Skynet Lite: 51<br>\",\"level\":8,\"sizeUsed\":959.9916058010215,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":44.98077390221013,\"loc\":\"Sector-12\",\"size\":960,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":84660.8366906922,\"qlt\":0,\"dmd\":82.78719469013637,\"dmdR\":[80,99],\"cmp\":69.2011984379414,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":22.490386951105066,\"sll\":0.10339177586701617,\"prd\":-5.4,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2160.1196854254476,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":54,\"qlt\":0,\"dmd\":82.27489632560076,\"dmdR\":[80,90],\"cmp\":90.00646317400708,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":22.490386951105066,\"sll\":0,\"prd\":-5.4,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6399.549737620415,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":58168.80295828594,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":445.3499430398746,\"dmd\":86.82491221722422,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16107.395311356362,\"sCost\":\"MP*1.15\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58570,\"qlt\":0,\"dmd\":38.793943113657754,\"dmdR\":[5,99],\"cmp\":64.37722518652176,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55853.77219040597,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 2.9<br>Hardware: 360.8<br>RealEstate: 0.0<br>Skynet 2.0: 12<br>Skynet Lite: 12<br>\",\"level\":5,\"sizeUsed\":387.6852368407563,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":57.08664510452276,\"loc\":\"New Tokyo\",\"size\":600,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":285.4332255226138,\"qlt\":0,\"dmd\":88.39999342977679,\"dmdR\":[80,99],\"cmp\":73.23692882762887,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":28.54332255226138,\"sll\":0.09165136522482698,\"prd\":-28.54332255226138,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2117.5280908103923,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":6013.363409036992,\"qlt\":0,\"dmd\":80.43247772161233,\"dmdR\":[80,90],\"cmp\":84.57031564138208,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":28.54332255226138,\"sll\":0.05065951505086101,\"prd\":-28.54332255226138,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6510.278590982631,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":55203.529874218526,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":440.56866167471685,\"dmd\":89.8648325911391,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":22.834658041809103,\"prd\":22.834658041809103,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14557.578337006884,\"sCost\":\"MP*1.15\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58460,\"qlt\":0,\"dmd\":58.87115890407948,\"dmdR\":[5,99],\"cmp\":27.94512318093753,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":124394.60980749359,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 602.7<br>Hardware: 17.1<br>RealEstate: 0.0<br>Skynet 2.0: 23<br>Skynet Lite: 22<br>\",\"level\":6,\"sizeUsed\":664.516662402844,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":57.0127702427184,\"loc\":\"Ishima\",\"size\":720,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":60265.345116373675,\"qlt\":0,\"dmd\":90.12288964638876,\"dmdR\":[80,99],\"cmp\":73.43844157762094,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":28.5063851213592,\"sll\":0.10408061233363822,\"prd\":-28.5063851213592,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2144.351699321944,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":285.063851213592,\"qlt\":0,\"dmd\":81.49218846736105,\"dmdR\":[80,90],\"cmp\":65.67946949175622,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":28.5063851213592,\"sll\":0.08221652132109228,\"prd\":-28.5063851213592,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10980.73430807263,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72546.22476257039,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":441.33531452427604,\"dmd\":81.27091924759927,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":22.805108097087363,\"prd\":22.805108097087363,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12209.203608092826,\"sCost\":\"MP*1.15\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58460,\"qlt\":0,\"dmd\":55.2264922231972,\"dmdR\":[5,99],\"cmp\":70.86532411334751,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75581.2107639145,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 2.6<br>Hardware: 794.4<br>Skynet 2.0: 9<br>Skynet Lite: 9<br>\",\"level\":7,\"sizeUsed\":815.6963922307349,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":52.14807258370482,\"loc\":\"Volhaven\",\"size\":840,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":262.86640903468054,\"qlt\":0,\"dmd\":83.25553308022631,\"dmdR\":[80,99],\"cmp\":91.64593503707621,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":26.07403629185241,\"sll\":0.031178603931778848,\"prd\":-26.07403629185241,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1903.2242855656805,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":13240.417563152325,\"qlt\":0,\"dmd\":80.61045231522945,\"dmdR\":[80,90],\"cmp\":79.99890159594797,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":26.07403629185241,\"sll\":0.07296111118230189,\"prd\":-26.07403629185241,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10296.905632564038,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":84569.34692152799,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":440.09568315380704,\"dmd\":97.76869935906788,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":20.85922903348193,\"prd\":20.85922903348193,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11790.437047855294,\"sCost\":\"MP*1.15\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":27.66097120087188,\"dmdR\":[5,99],\"cmp\":51.60298241721156,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":31128.713869631032,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Energy: 722.9<br>Hardware: 18.1<br>RealEstate: 0.0<br>Skynet 2.0: 32<br>Skynet Lite: 31<br>\",\"level\":7,\"sizeUsed\":803.8583131069433,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":60.25068205193858,\"loc\":\"Chongqing\",\"size\":840,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":75,\"dmdR\":[65,85],\"cmp\":50,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1500,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":72287.60429770977,\"qlt\":0,\"dmd\":91.14472108357381,\"dmdR\":[80,99],\"cmp\":81.06144677012689,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":30.12534102596929,\"sll\":0.07268694162120554,\"prd\":-30.12534102596929,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2149.061038729931,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":302.42003379698883,\"qlt\":0,\"dmd\":86.54934686793878,\"dmdR\":[80,90],\"cmp\":81.49120166277129,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":30.12534102596929,\"sll\":0.06830675206180706,\"prd\":-30.12534102596929,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5904.180500923741,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":73937.574479473,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":441.227883839867,\"dmd\":96.80660976658523,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":24.100272820775434,\"prd\":24.100272820775434,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13517.38329062409,\"sCost\":\"MP*1.15\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":58480,\"qlt\":0,\"dmd\":34.22062135048577,\"dmdR\":[5,99],\"cmp\":45.9006540587787,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69264.95948924578,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"PZGKbH4\",\"mor\":100,\"hap\":95.18168270744418,\"ene\":95.17601686465957,\"int\":51.59,\"cha\":49.28,\"exp\":111.34600000000206,\"cre\":61.6,\"eff\":45.43,\"sal\":794.64,\"pro\":0,\"cyclesUntilRaise\":278,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ynm3pi3\",\"mor\":100,\"hap\":95.1922029587121,\"ene\":95.18962083949994,\"int\":81,\"cha\":72,\"exp\":138.36599999995295,\"cre\":89,\"eff\":96,\"sal\":1266,\"pro\":0,\"cyclesUntilRaise\":278,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oIBNj5t\",\"mor\":100,\"hap\":95.13256764276689,\"ene\":95.12672705263003,\"int\":69,\"cha\":86,\"exp\":110.36600000000206,\"cre\":90,\"eff\":99,\"sal\":1200,\"pro\":0,\"cyclesUntilRaise\":278,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Otw64Ak\",\"mor\":100,\"hap\":95.21040499022305,\"ene\":95.20412329996557,\"int\":77.19,\"cha\":60.45,\"exp\":123.17700000000207,\"cre\":70.68,\"eff\":78.12,\"sal\":1065.78,\"pro\":0,\"cyclesUntilRaise\":281,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"S10bXJB\",\"mor\":100,\"hap\":95.19706951609753,\"ene\":95.19153400732546,\"int\":42.400000000000006,\"cha\":57.6,\"exp\":107.15400000000206,\"cre\":44.800000000000004,\"eff\":69.60000000000001,\"sal\":801.6,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ktJeGc5\",\"mor\":100,\"hap\":95.116268737868,\"ene\":95.1091946502683,\"int\":42.5,\"cha\":59.5,\"exp\":105.35400000000206,\"cre\":66.3,\"eff\":66.3,\"sal\":856.8,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hfmIzzH\",\"mor\":100,\"hap\":95.17711235041382,\"ene\":95.17413240740176,\"int\":57.599999999999994,\"cha\":73.92,\"exp\":136.91399999995983,\"cre\":96,\"eff\":86.39999999999999,\"sal\":1189.44,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"STj5AJB\",\"mor\":100,\"hap\":95.21469969736584,\"ene\":95.2074187904664,\"int\":53.36,\"cha\":57.96,\"exp\":118.75400000000207,\"cre\":59.800000000000004,\"eff\":74.52000000000001,\"sal\":930.12,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Wy0uOar\",\"mor\":100,\"hap\":95.15753242290857,\"ene\":95.1509174556658,\"int\":59.800000000000004,\"cha\":88.32000000000001,\"exp\":112.31400000000205,\"cre\":81.88000000000001,\"eff\":82.8,\"sal\":1112.28,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fxYHZgz\",\"mor\":100,\"hap\":95.2537427989174,\"ene\":95.24546055085155,\"int\":56.7,\"cha\":76.14,\"exp\":122.39400000000207,\"cre\":54.27,\"eff\":42.93,\"sal\":894.24,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"We1JBk4\",\"mor\":100,\"hap\":95.21981241109694,\"ene\":95.21260677866223,\"int\":66.99,\"cha\":80.04,\"exp\":125.69400000000206,\"cre\":49.589999999999996,\"eff\":66.99,\"sal\":1004.85,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"eWUiweN\",\"mor\":100,\"hap\":95.15401598067244,\"ene\":95.14846470307543,\"int\":59.29,\"cha\":53.13,\"exp\":95.93400000000206,\"cre\":56.980000000000004,\"eff\":61.6,\"sal\":817.74,\"pro\":0,\"cyclesUntilRaise\":282,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NhX6YsD\",\"mor\":100,\"hap\":95.10680601999915,\"ene\":95.09794390718321,\"int\":49.199999999999996,\"cha\":44.279999999999994,\"exp\":58.977000000000366,\"cre\":44.279999999999994,\"eff\":50.019999999999996,\"sal\":710.9399999999999,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sa5Dcjb\",\"mor\":100,\"hap\":95.1494181967454,\"ene\":95.14388126382279,\"int\":70.5,\"cha\":81.78,\"exp\":67.11700000000036,\"cre\":80.83999999999999,\"eff\":49.82,\"sal\":1020.8399999999999,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6m0HmHy\",\"mor\":100,\"hap\":74.66399258831147,\"ene\":95.27004949380897,\"int\":45.24,\"cha\":77.42999999999999,\"exp\":92.42700000000038,\"cre\":46.11,\"eff\":66.12,\"sal\":952.65,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RS2w9Ws\",\"mor\":100,\"hap\":94.10258058267904,\"ene\":95.21541053844665,\"int\":49.3,\"cha\":46.75,\"exp\":58.227000000000366,\"cre\":69.7,\"eff\":57.8,\"sal\":816,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"on93m87\",\"mor\":100,\"hap\":95.16426685412839,\"ene\":95.1611940928152,\"int\":61.6,\"cha\":44.88,\"exp\":73.13700000000037,\"cre\":64.24,\"eff\":44,\"sal\":834.24,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"LxJ5ywd\",\"mor\":100,\"hap\":95.18777608022852,\"ene\":95.18018868262298,\"int\":80.36,\"cha\":61.49999999999999,\"exp\":91.77700000000037,\"cre\":77.08,\"eff\":47.559999999999995,\"sal\":1045.5,\"pro\":0,\"cyclesUntilRaise\":341,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}}],\"employeeProd\":{\"Operations\":1830.4256323533157,\"Engineer\":828.2564664111926,\"Business\":360.7913531206991,\"Management\":2482.8926907407213,\"Research & Development\":1205.6667862402549,\"total\":6708.032928866185,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Chongqing\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"2uJcESF\",\"mor\":100,\"hap\":95.1610056570187,\"ene\":95.1610056570187,\"int\":56,\"cha\":79.2,\"exp\":102.50700000000153,\"cre\":73.60000000000001,\"eff\":48,\"sal\":957.6,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xtHxYdb\",\"mor\":100,\"hap\":95.07623127953403,\"ene\":95.07623127953403,\"int\":77.35000000000001,\"cha\":48.230000000000004,\"exp\":114.72700000000152,\"cre\":60.97,\"eff\":85.54,\"sal\":1040.13,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"SeKdUXY\",\"mor\":100,\"hap\":95.29298368029487,\"ene\":95.29298368029487,\"int\":82,\"cha\":55,\"exp\":118.10700000000152,\"cre\":74,\"eff\":58,\"sal\":1041,\"pro\":0,\"cyclesUntilRaise\":231,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tqkbpUQ\",\"mor\":100,\"hap\":95.16877682982012,\"ene\":95.16877682982012,\"int\":70.2,\"cha\":42.120000000000005,\"exp\":79.79400000000152,\"cre\":60.84,\"eff\":70.2,\"sal\":849.4200000000001,\"pro\":0,\"cyclesUntilRaise\":262,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"C6dtUNs\",\"mor\":100,\"hap\":95.21151848071057,\"ene\":86.46704622981245,\"int\":75.53,\"cha\":78.85,\"exp\":121.3540000000015,\"cre\":67.22999999999999,\"eff\":48.97,\"sal\":1055.76,\"pro\":0,\"cyclesUntilRaise\":262,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"GtkCuQb\",\"mor\":100,\"hap\":95.19628206918905,\"ene\":95.19628206918905,\"int\":42.64,\"cha\":50.839999999999996,\"exp\":97.41400000000151,\"cre\":73.8,\"eff\":62.31999999999999,\"sal\":861,\"pro\":0,\"cyclesUntilRaise\":262,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Sz0sD7Q\",\"mor\":100,\"hap\":95.21675912203719,\"ene\":95.21675912203719,\"int\":61.38,\"cha\":62.31,\"exp\":104.88300000000064,\"cre\":84.63000000000001,\"eff\":86.49000000000001,\"sal\":1149.48,\"pro\":0,\"cyclesUntilRaise\":89,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"OnpEGae\",\"mor\":100,\"hap\":95.12599799557366,\"ene\":95.12599799557366,\"int\":54.81,\"cha\":82.65,\"exp\":100.92300000000063,\"cre\":85.26,\"eff\":81.78,\"sal\":1166.67,\"pro\":0,\"cyclesUntilRaise\":89,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7lT4QfR\",\"mor\":100,\"hap\":95.19880475118924,\"ene\":95.19880475118924,\"int\":57.76,\"cha\":39.52,\"exp\":73.53300000000063,\"cre\":54.72,\"eff\":52.44,\"sal\":784.32,\"pro\":0,\"cyclesUntilRaise\":89,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"mOew820\",\"mor\":100,\"hap\":95.1588556303215,\"ene\":61.06688689537533,\"int\":42.660000000000004,\"cha\":75.84,\"exp\":76.49500000000063,\"cre\":74.26,\"eff\":52.14,\"sal\":914.82,\"pro\":0,\"cyclesUntilRaise\":115,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lDfC2PL\",\"mor\":100,\"hap\":95.1485139318261,\"ene\":86.4842688863256,\"int\":52.93,\"cha\":59.25,\"exp\":88.34500000000062,\"cre\":39.5,\"eff\":63.2,\"sal\":860.3100000000001,\"pro\":0,\"cyclesUntilRaise\":115,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"HWz70Pn\",\"mor\":100,\"hap\":84.58423644981836,\"ene\":95.19377558394072,\"int\":54,\"cha\":67.5,\"exp\":96.55500000000063,\"cre\":51.300000000000004,\"eff\":59.4,\"sal\":936.9,\"pro\":0,\"cyclesUntilRaise\":115,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"qoqixYz\",\"mor\":100,\"hap\":77.61664357507016,\"ene\":95.19429774088994,\"int\":53.940000000000005,\"cha\":59.52,\"exp\":72.94800000000036,\"cre\":73.47,\"eff\":81.84,\"sal\":996.0300000000001,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"CPn22ZX\",\"mor\":100,\"hap\":95.15973468759118,\"ene\":64.01588992886606,\"int\":62.05,\"cha\":62.05,\"exp\":53.908000000000364,\"cre\":64.6,\"eff\":59.5,\"sal\":877.1999999999999,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"SSERjBw\",\"mor\":100,\"hap\":95.22902711724527,\"ene\":95.22902711724527,\"int\":59.2,\"cha\":61.6,\"exp\":86.50800000000038,\"cre\":42.400000000000006,\"eff\":75.2,\"sal\":945.6,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"WBp9QKm\",\"mor\":78,\"hap\":95.1325196467512,\"ene\":95.1325196467512,\"int\":61.38,\"cha\":74.4,\"exp\":86.89800000000037,\"cre\":69.75,\"eff\":66.96000000000001,\"sal\":1049.04,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Business\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fqE7OHz\",\"mor\":100,\"hap\":95.20990271205206,\"ene\":90.87351868819356,\"int\":91.14,\"cha\":84.63000000000001,\"exp\":98.98800000000037,\"cre\":90.21000000000001,\"eff\":76.26,\"sal\":1294.5600000000002,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Management\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ez6sGWo\",\"mor\":100,\"hap\":95.1922394637951,\"ene\":95.1922394637951,\"int\":78.32000000000001,\"cha\":87.22,\"exp\":88.91800000000038,\"cre\":52.51,\"eff\":64.08,\"sal\":1084.02,\"pro\":0,\"cyclesUntilRaise\":364,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}}],\"employeeProd\":{\"Operations\":1779.5459280096923,\"Engineer\":831.3801396862098,\"Business\":333.67150329855065,\"Management\":2072.3467806696444,\"Research & Development\":1002.3988558539063,\"total\":6019.343207518002,\"Unassigned\":0}}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"saRZVP2\",\"mor\":100,\"hap\":95.19144748288859,\"ene\":95.19144748288859,\"int\":49.019999999999996,\"cha\":47.3,\"exp\":126.61600000000209,\"cre\":65.36,\"eff\":80.84,\"sal\":941.6999999999999,\"pro\":0,\"cyclesUntilRaise\":388,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ffs1Sbi\",\"mor\":100,\"hap\":95.3338416455843,\"ene\":95.3338416455843,\"int\":77.28,\"cha\":60.48,\"exp\":114.8760000000021,\"cre\":47.879999999999995,\"eff\":47.04,\"sal\":876.9599999999999,\"pro\":0,\"cyclesUntilRaise\":388,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ov0zmpt\",\"mor\":100,\"hap\":95.17834021086105,\"ene\":93.61498476431788,\"int\":83.72,\"cha\":54.28,\"exp\":114.11600000000209,\"cre\":73.60000000000001,\"eff\":69,\"sal\":1018.44,\"pro\":0,\"cyclesUntilRaise\":388,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ARKsycz\",\"mor\":100,\"hap\":95.21102329839887,\"ene\":95.21102329839887,\"int\":76.56,\"cha\":59.16,\"exp\":126.5730000000021,\"cre\":43.5,\"eff\":80.91,\"sal\":994.41,\"pro\":0,\"cyclesUntilRaise\":389,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"qFg28Y4\",\"mor\":100,\"hap\":95.2865896875559,\"ene\":95.2865896875559,\"int\":86.33,\"cha\":85.36,\"exp\":123.13300000000208,\"cre\":62.08,\"eff\":97,\"sal\":1196.01,\"pro\":0,\"cyclesUntilRaise\":389,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bQIhbjt\",\"mor\":100,\"hap\":95.26844513358246,\"ene\":95.26844513358246,\"int\":82.56,\"cha\":80.84,\"exp\":113.71300000000208,\"cre\":73.96,\"eff\":48.16,\"sal\":1032,\"pro\":0,\"cyclesUntilRaise\":389,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3PMHOtJ\",\"mor\":100,\"hap\":95.15075717542402,\"ene\":95.15075717542402,\"int\":59.28,\"cha\":47.12,\"exp\":93.97500000000208,\"cre\":69.16,\"eff\":63.84,\"sal\":834.48,\"pro\":0,\"cyclesUntilRaise\":395,\"loc\":\"\",\"pos\":\"Business\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FLZamSx\",\"mor\":100,\"hap\":95.18270419206246,\"ene\":95.18270419206246,\"int\":73.92,\"cha\":69.12,\"exp\":121.45500000000209,\"cre\":64.32,\"eff\":48,\"sal\":964.8,\"pro\":0,\"cyclesUntilRaise\":395,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Qvk5J8k\",\"mor\":100,\"hap\":95.23712185198436,\"ene\":95.23712185198436,\"int\":54.870000000000005,\"cha\":67.89,\"exp\":124.96500000000209,\"cre\":49.29,\"eff\":57.660000000000004,\"sal\":898.38,\"pro\":0,\"cyclesUntilRaise\":395,\"loc\":\"\",\"pos\":\"Management\",\"salary\":2250}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yZrGi82\",\"mor\":100,\"hap\":95.16282359889769,\"ene\":95.16282359889769,\"int\":91.14,\"cha\":56.730000000000004,\"exp\":124.92600000000209,\"cre\":52.080000000000005,\"eff\":72.54,\"sal\":1026.72,\"pro\":0,\"cyclesUntilRaise\":8,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":2200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"U3H7FqP\",\"mor\":100,\"hap\":95.21782033595115,\"ene\":95.21782033595115,\"int\":52.25,\"cha\":66.5,\"exp\":126.42600000000209,\"cre\":79.8,\"eff\":51.3,\"sal\":963.3,\"pro\":0,\"cyclesUntilRaise\":8,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"M8GfBqT\",\"mor\":100,\"hap\":95.16836557089987,\"ene\":95.16836557089987,\"int\":93.1,\"cha\":70.56,\"exp\":138.39199999995284,\"cre\":56.839999999999996,\"eff\":72.52,\"sal\":1128.96,\"pro\":0,\"cyclesUntilRaise\":36,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":2150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"MG1iBof\",\"mor\":100,\"hap\":95.22522748909986,\"ene\":75.57927441852033,\"int\":75.65,\"cha\":47.17,\"exp\":58.65500000000037,\"cre\":67.64,\"eff\":47.17,\"sal\":859.74,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8uPIaRw\",\"mor\":81,\"hap\":95.18116180544537,\"ene\":79.36352372597244,\"int\":74.8,\"cha\":74.8,\"exp\":94.18500000000037,\"cre\":58.08,\"eff\":74.8,\"sal\":1100.88,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"nf7qQFN\",\"mor\":100,\"hap\":95.22114056042297,\"ene\":95.22114056042297,\"int\":46.64,\"cha\":48.4,\"exp\":97.70500000000037,\"cre\":82.72,\"eff\":50.160000000000004,\"sal\":947.76,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4buXOqd\",\"mor\":100,\"hap\":95.08229125771544,\"ene\":70.31196908112251,\"int\":71.10000000000001,\"cha\":69.3,\"exp\":73.60500000000036,\"cre\":73.8,\"eff\":67.5,\"sal\":1036.8,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Business\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NfnkB9g\",\"mor\":88.5,\"hap\":95.12934202877535,\"ene\":95.12934202877535,\"int\":45.65,\"cha\":47.309999999999995,\"exp\":64.48500000000035,\"cre\":57.269999999999996,\"eff\":62.25,\"sal\":801.78,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Management\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FL1JiCw\",\"mor\":100,\"hap\":79.20882828010849,\"ene\":74.34874972579227,\"int\":54.29,\"cha\":67.64,\"exp\":62.215000000000366,\"cre\":49.84,\"eff\":70.31,\"sal\":883.77,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}}],\"employeeProd\":{\"Operations\":2033.8053182222566,\"Engineer\":793.6296417228411,\"Business\":326.0894579488323,\"Management\":1989.22756860023,\"Research & Development\":1061.6795525490927,\"total\":6204.431539043253,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"New Tokyo\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"eOXGEar\",\"mor\":100,\"hap\":95.20426465767434,\"ene\":95.20426465767434,\"int\":45.6,\"cha\":58.52,\"exp\":78.84000000000151,\"cre\":68.4,\"eff\":69.16,\"sal\":841.32,\"pro\":0,\"cyclesUntilRaise\":240,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"HrCCsve\",\"mor\":100,\"hap\":95.20267147894066,\"ene\":95.20267147894066,\"int\":62.370000000000005,\"cha\":66.42,\"exp\":92.73000000000152,\"cre\":72.09,\"eff\":74.52000000000001,\"sal\":984.1500000000001,\"pro\":0,\"cyclesUntilRaise\":240,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5jBspEQ\",\"mor\":100,\"hap\":95.2589849128453,\"ene\":95.2589849128453,\"int\":95,\"cha\":85.5,\"exp\":94.23000000000151,\"cre\":77.89999999999999,\"eff\":87.39999999999999,\"sal\":1199.85,\"pro\":0,\"cyclesUntilRaise\":240,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"eIfWElf\",\"mor\":100,\"hap\":95.2286838407112,\"ene\":95.2286838407112,\"int\":69.84,\"cha\":83.42,\"exp\":110.32100000000135,\"cre\":92.14999999999999,\"eff\":58.199999999999996,\"sal\":1134.8999999999999,\"pro\":0,\"cyclesUntilRaise\":123,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"UyJ8oWu\",\"mor\":100,\"hap\":95.26885301524197,\"ene\":95.26885301524197,\"int\":60.48,\"cha\":57.12,\"exp\":91.91100000000135,\"cre\":84,\"eff\":61.32,\"sal\":957.5999999999999,\"pro\":0,\"cyclesUntilRaise\":123,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"a6d01iN\",\"mor\":100,\"hap\":95.26676796690272,\"ene\":95.26676796690272,\"int\":40.29,\"cha\":41.08,\"exp\":75.13100000000135,\"cre\":62.410000000000004,\"eff\":70.31,\"sal\":760.77,\"pro\":0,\"cyclesUntilRaise\":123,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bhH2a2p\",\"mor\":100,\"hap\":95.12926237747811,\"ene\":95.12926237747811,\"int\":67.2,\"cha\":63.36,\"exp\":84.69900000000062,\"cre\":67.2,\"eff\":73.92,\"sal\":1019.52,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8PbYYR2\",\"mor\":100,\"hap\":95.21876455932268,\"ene\":95.21876455932268,\"int\":61.49999999999999,\"cha\":62.31999999999999,\"exp\":69.01900000000062,\"cre\":51.66,\"eff\":73.8,\"sal\":905.28,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pqObD6I\",\"mor\":100,\"hap\":95.19526054235594,\"ene\":95.19526054235594,\"int\":89.24000000000001,\"cha\":89.24000000000001,\"exp\":103.93900000000063,\"cre\":48.760000000000005,\"eff\":79.12,\"sal\":1181.28,\"pro\":0,\"cyclesUntilRaise\":87,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ezmlHcO\",\"mor\":100,\"hap\":95.21929271181685,\"ene\":95.21929271181685,\"int\":62.9,\"cha\":67.14999999999999,\"exp\":69.14300000000061,\"cre\":53.55,\"eff\":61.199999999999996,\"sal\":892.5,\"pro\":0,\"cyclesUntilRaise\":119,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Mi2qCeF\",\"mor\":100,\"hap\":95.13876140379081,\"ene\":76.17678700589767,\"int\":60.8,\"cha\":62.699999999999996,\"exp\":85.79300000000062,\"cre\":86.45,\"eff\":82.64999999999999,\"sal\":1085.85,\"pro\":0,\"cyclesUntilRaise\":119,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gqvdEwd\",\"mor\":100,\"hap\":69.52022028437416,\"ene\":69.1371967836334,\"int\":81.84,\"cha\":88,\"exp\":101.80300000000062,\"cre\":56.32,\"eff\":70.4,\"sal\":1145.76,\"pro\":0,\"cyclesUntilRaise\":119,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YMqkw4w\",\"mor\":100,\"hap\":95.18631341623653,\"ene\":95.18631341623653,\"int\":51.300000000000004,\"cha\":63.9,\"exp\":84.40200000000037,\"cre\":84.60000000000001,\"eff\":85.5,\"sal\":1080,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZIgQnjd\",\"mor\":100,\"hap\":91.05564127728292,\"ene\":71.04308524802121,\"int\":58.88,\"cha\":69,\"exp\":60.30200000000037,\"cre\":59.800000000000004,\"eff\":75.44,\"sal\":941.1600000000001,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6X7XBTs\",\"mor\":100,\"hap\":95.2567707734164,\"ene\":95.2567707734164,\"int\":87.22,\"cha\":50.730000000000004,\"exp\":60.43200000000037,\"cre\":60.52,\"eff\":76.54,\"sal\":977.22,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VHVldiN\",\"mor\":100,\"hap\":95.20775467936201,\"ene\":95.20775467936201,\"int\":56.120000000000005,\"cha\":74.52000000000001,\"exp\":71.34200000000037,\"cre\":69.92,\"eff\":61.64,\"sal\":971.5200000000001,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Business\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EHHxTzD\",\"mor\":100,\"hap\":89.58098816968827,\"ene\":87.95387490243111,\"int\":75.84,\"cha\":48.96,\"exp\":83.62200000000037,\"cre\":54.72,\"eff\":52.8,\"sal\":918.7199999999999,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Management\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RSbJdPg\",\"mor\":84,\"hap\":95.19667967809353,\"ene\":75.33828596213596,\"int\":70.81,\"cha\":50.44,\"exp\":67.90200000000036,\"cre\":85.36,\"eff\":80.50999999999999,\"sal\":1035.96,\"pro\":0,\"cyclesUntilRaise\":366,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}}],\"employeeProd\":{\"Operations\":1751.0080923059495,\"Engineer\":774.8970839509636,\"Business\":460.11638365487835,\"Management\":2109.721197310806,\"Research & Development\":1090.1933421637914,\"total\":6185.93609938639,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Ishima\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"7b56IIC\",\"mor\":100,\"hap\":95.11051779987936,\"ene\":95.11247838061236,\"int\":64.67999999999999,\"cha\":60.48,\"exp\":104.74200000000151,\"cre\":69.72,\"eff\":42,\"sal\":904.68,\"pro\":0,\"cyclesUntilRaise\":246,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yyCm3l5\",\"mor\":100,\"hap\":95.12892790613859,\"ene\":95.13081279031017,\"int\":70.68,\"cha\":52.44,\"exp\":110.74200000000152,\"cre\":60.8,\"eff\":41.8,\"sal\":889.2,\"pro\":0,\"cyclesUntilRaise\":246,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fvehD28\",\"mor\":100,\"hap\":95.25410481671567,\"ene\":95.2544812547018,\"int\":43.35,\"cha\":49.3,\"exp\":116.56200000000152,\"cre\":51,\"eff\":51,\"sal\":813.4499999999999,\"pro\":0,\"cyclesUntilRaise\":246,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4ectutM\",\"mor\":100,\"hap\":95.19863532403514,\"ene\":95.19970578691246,\"int\":79.12,\"cha\":75.44,\"exp\":111.05300000000135,\"cre\":72.68,\"eff\":49.68,\"sal\":1057.0800000000002,\"pro\":0,\"cyclesUntilRaise\":129,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7GTuPVB\",\"mor\":100,\"hap\":95.14514956032019,\"ene\":95.14560117917596,\"int\":51.870000000000005,\"cha\":76.44,\"exp\":93.85000000000134,\"cre\":56.42,\"eff\":79.17,\"sal\":966.4200000000001,\"pro\":0,\"cyclesUntilRaise\":130,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6B9Ndey\",\"mor\":100,\"hap\":95.12164895395539,\"ene\":95.12202257114893,\"int\":84.28,\"cha\":61.06,\"exp\":81.19000000000135,\"cre\":71.38,\"eff\":67.08,\"sal\":988.14,\"pro\":0,\"cyclesUntilRaise\":130,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1000}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"I08k7Xb\",\"mor\":100,\"hap\":95.10147406314535,\"ene\":95.10412513496665,\"int\":82.32,\"cha\":51.239999999999995,\"exp\":100.58400000000063,\"cre\":68.03999999999999,\"eff\":78.96,\"sal\":1093.68,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"kkdoOmJ\",\"mor\":100,\"hap\":95.09279158354053,\"ene\":87.92243543205801,\"int\":83,\"cha\":76.36,\"exp\":75.51400000000062,\"cre\":81.33999999999999,\"eff\":69.72,\"sal\":1108.05,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"AC7KRhU\",\"mor\":100,\"hap\":95.11643289894957,\"ene\":95.11785989136217,\"int\":73.92,\"cha\":53.68,\"exp\":61.46400000000063,\"cre\":86.24,\"eff\":61.6,\"sal\":960.96,\"pro\":0,\"cyclesUntilRaise\":72,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yoJbGCQ\",\"mor\":78,\"hap\":77.53240702546016,\"ene\":80.81342820335928,\"int\":74.76,\"cha\":68.53,\"exp\":67.43600000000059,\"cre\":71.2,\"eff\":48.95,\"sal\":945.1800000000001,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vEEwefg\",\"mor\":100,\"hap\":95.14623516538023,\"ene\":95.14639779656493,\"int\":90,\"cha\":84,\"exp\":99.8160000000006,\"cre\":82,\"eff\":61,\"sal\":1203,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"0FnP2pj\",\"mor\":96,\"hap\":95.26423386956466,\"ene\":95.26467702309068,\"int\":79.05,\"cha\":56.949999999999996,\"exp\":65.1160000000006,\"cre\":48.449999999999996,\"eff\":74.8,\"sal\":925.65,\"pro\":0,\"cyclesUntilRaise\":328,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"mjL5703\",\"mor\":87,\"hap\":95.19741764613012,\"ene\":66.15459382276447,\"int\":96,\"cha\":52.8,\"exp\":64.41600000000037,\"cre\":78.72,\"eff\":78.72,\"sal\":1082.8799999999999,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Bwpdq2M\",\"mor\":79.5,\"hap\":95.20718081315523,\"ene\":95.20845446233095,\"int\":77.22,\"cha\":98.01,\"exp\":91.86600000000037,\"cre\":71.28,\"eff\":52.47,\"sal\":1143.45,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"P5MrIWt\",\"mor\":100,\"hap\":95.24502759855838,\"ene\":72.91187071731899,\"int\":64.08,\"cha\":71.2,\"exp\":54.19600000000037,\"cre\":68.53,\"eff\":82.77,\"sal\":993.24,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oDhINgF\",\"mor\":100,\"hap\":95.26659788348361,\"ene\":95.26735955888697,\"int\":59.28,\"cha\":39.78,\"exp\":66.63600000000037,\"cre\":57.72,\"eff\":70.2,\"sal\":851.76,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Management\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"65Hi6Cf\",\"mor\":94.5,\"hap\":95.22141223754221,\"ene\":67.53315455839179,\"int\":99,\"cha\":93,\"exp\":77.69600000000037,\"cre\":92,\"eff\":85,\"sal\":1311,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hocIcQC\",\"mor\":79.5,\"hap\":95.18768675384405,\"ene\":95.19020111559227,\"int\":75.33,\"cha\":77.19,\"exp\":94.32600000000038,\"cre\":75.33,\"eff\":62.31,\"sal\":1124.3700000000001,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Business\",\"salary\":null}}],\"employeeProd\":{\"Operations\":1865.0027636282912,\"Engineer\":616.3827408473314,\"Business\":407.0323572967173,\"Management\":1958.2309989077407,\"Research & Development\":1057.5710294168252,\"total\":5904.219890096907,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Volhaven\",\"cost\":1,\"size\":18,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"Q6CnZjy\",\"mor\":100,\"hap\":95.2364206720656,\"ene\":95.2364206720656,\"int\":61.88,\"cha\":62.79,\"exp\":124.67400000000153,\"cre\":56.42,\"eff\":73.71000000000001,\"sal\":1018.2900000000001,\"pro\":0,\"cyclesUntilRaise\":252,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"2qxVBEH\",\"mor\":100,\"hap\":95.26699711239753,\"ene\":95.26699711239753,\"int\":65.12,\"cha\":54.56,\"exp\":106.92400000000151,\"cre\":50.160000000000004,\"eff\":77.44,\"sal\":942.48,\"pro\":0,\"cyclesUntilRaise\":252,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"k4sEWpx\",\"mor\":100,\"hap\":95.19695211108468,\"ene\":95.19695211108468,\"int\":54.870000000000005,\"cha\":87.42,\"exp\":97.70400000000151,\"cre\":54.870000000000005,\"eff\":61.38,\"sal\":948.6,\"pro\":0,\"cyclesUntilRaise\":252,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YEJ1uPj\",\"mor\":100,\"hap\":95.14167614983269,\"ene\":95.14167614983269,\"int\":67.22999999999999,\"cha\":82.17,\"exp\":113.8270000000015,\"cre\":48.97,\"eff\":73.03999999999999,\"sal\":1035.84,\"pro\":0,\"cyclesUntilRaise\":281,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"KmnwO2I\",\"mor\":100,\"hap\":95.16847678684813,\"ene\":95.16847678684813,\"int\":69,\"cha\":53,\"exp\":89.95700000000151,\"cre\":93,\"eff\":68,\"sal\":999,\"pro\":0,\"cyclesUntilRaise\":281,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5RASPcZ\",\"mor\":100,\"hap\":95.25882043663422,\"ene\":95.25882043663422,\"int\":69.92,\"cha\":79.12,\"exp\":105.27700000000152,\"cre\":85.56,\"eff\":74.52000000000001,\"sal\":1123.32,\"pro\":0,\"cyclesUntilRaise\":281,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"7gQTjRR\",\"mor\":100,\"hap\":95.27436055626407,\"ene\":95.27436055626407,\"int\":60.8,\"cha\":59.849999999999994,\"exp\":74.50100000000062,\"cre\":82.64999999999999,\"eff\":93.1,\"sal\":1063.05,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"c2urDGQ\",\"mor\":100,\"hap\":95.220155251652,\"ene\":95.220155251652,\"int\":63.19,\"cha\":69.42,\"exp\":80.63100000000063,\"cre\":64.97,\"eff\":63.19,\"sal\":974.5500000000001,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lV8Ku99\",\"mor\":100,\"hap\":95.19566458718727,\"ene\":95.19566458718727,\"int\":58.08,\"cha\":56.32,\"exp\":82.55100000000063,\"cre\":80.96,\"eff\":81.84,\"sal\":1029.6,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"1XSB5LD\",\"mor\":100,\"hap\":95.18109668902063,\"ene\":73.32338079009983,\"int\":77.19,\"cha\":82.77000000000001,\"exp\":66.9720000000006,\"cre\":54.870000000000005,\"eff\":51.150000000000006,\"sal\":951.3900000000001,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"3bA8mhe\",\"mor\":99,\"hap\":95.25829723959045,\"ene\":95.25829723959045,\"int\":77,\"cha\":75.46000000000001,\"exp\":66.64200000000059,\"cre\":50.050000000000004,\"eff\":68.53,\"sal\":965.58,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"QPXUQ3a\",\"mor\":100,\"hap\":95.20591762443081,\"ene\":95.20591762443081,\"int\":53.72,\"cha\":73.47,\"exp\":70.3320000000006,\"cre\":53.72,\"eff\":75.84,\"sal\":933.7800000000001,\"pro\":0,\"cyclesUntilRaise\":326,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4zgaQQo\",\"mor\":90,\"hap\":73.22227069334,\"ene\":70.57362226530577,\"int\":62.9,\"cha\":47.6,\"exp\":54.764000000000365,\"cre\":50.15,\"eff\":44.199999999999996,\"sal\":749.6999999999999,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TtGRaCd\",\"mor\":100,\"hap\":70.02622520519655,\"ene\":95.12471430829173,\"int\":59.2,\"cha\":76.80000000000001,\"exp\":60.114000000000374,\"cre\":40.800000000000004,\"eff\":53.6,\"sal\":842.4000000000001,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"kg6m7gJ\",\"mor\":87,\"hap\":95.23420293646693,\"ene\":95.23420293646693,\"int\":50.400000000000006,\"cha\":70.4,\"exp\":86.51400000000038,\"cre\":62.400000000000006,\"eff\":63.2,\"sal\":969.6,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EWmBHR5\",\"mor\":100,\"hap\":95.13133264205838,\"ene\":95.13133264205838,\"int\":76.36,\"cha\":70.84,\"exp\":74.11400000000037,\"cre\":53.36,\"eff\":83.72,\"sal\":1046.04,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Business\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9BP26PU\",\"mor\":100,\"hap\":95.20911856966832,\"ene\":95.20911856966832,\"int\":67.5,\"cha\":87.3,\"exp\":77.21400000000037,\"cre\":77.4,\"eff\":72.9,\"sal\":1117.8,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Management\",\"salary\":null}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fLHKfx6\",\"mor\":100,\"hap\":95.05038247498047,\"ene\":95.05038247498047,\"int\":65.28,\"cha\":58.559999999999995,\"exp\":82.67400000000036,\"cre\":56.64,\"eff\":77.75999999999999,\"sal\":993.5999999999999,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":null}}],\"employeeProd\":{\"Operations\":1762.6465530796474,\"Engineer\":707.0140991497495,\"Business\":466.0031709592339,\"Management\":2184.2834663925896,\"Research & Development\":1067.824015010683,\"total\":6187.7713045919045,\"Unassigned\":0}}}},\"name\":\"FarmyFarm\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":2215.1273260831817,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true,\"Drones\":true,\"Bulk Purchasing\":true,\"Market-TA.I\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":181.02755373659699,\"popularity\":48.15365730033396,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":183.4643500733419,\"lastCycleRevenue\":\"25620375.575208566\",\"lastCycleExpenses\":\"4429574.0849299344\",\"thisCycleRevenue\":\"0\",\"thisCycleExpenses\":\"44288066.79970396\",\"upgrades\":[139,9],\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 113.6<br>Energy: 22.7<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":11,\"sizeUsed\":796.2881321504238,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":441.74340681624335,\"loc\":\"Aevum\",\"size\":1320,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2271.46886917373,\"qlt\":0,\"dmd\":66.47477239317038,\"dmdR\":[65,85],\"cmp\":46.56151838443377,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":220.87170340812168,\"sll\":0,\"prd\":-220.87170340812168,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1434.5259607283062,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2271.46886917373,\"qlt\":0,\"dmd\":87.58887680141392,\"dmdR\":[80,99],\"cmp\":83.45434453750767,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":220.87170340812168,\"sll\":0,\"prd\":-220.87170340812168,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1706.9393955117655,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":56.213688418934915,\"dmd\":75.75435415970557,\"dmdR\":[70,90],\"cmp\":77.48443139912371,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":441.74340681624335,\"prd\":441.74340681624335,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8494.900034180087,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":56.213688418934915,\"dmd\":37.26359816255127,\"dmdR\":[20,90],\"cmp\":44.944530971688636,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":441.74340681624335,\"prd\":441.74340681624335,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3140.759481559558,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":85.98405436256508,\"dmdR\":[80,90],\"cmp\":83.62099414009614,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8737.305775671302,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":68137.50333983182,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":97.77147386205797,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":32765.18721189768,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":118673,\"qlt\":0,\"dmd\":16.871476067738573,\"dmdR\":[5,99],\"cmp\":29.80815864515396,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80857.48609590945,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 164.4<br>Energy: 22.4<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":10,\"sizeUsed\":846.7335619185004,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":435.2130470579248,\"loc\":\"Sector-12\",\"size\":1200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":3287.00581598537,\"qlt\":0,\"dmd\":67.40288400229433,\"dmdR\":[65,85],\"cmp\":57.93166289456247,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":217.6065235289624,\"sll\":0,\"prd\":-217.6065235289624,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1296.6239752772829,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2238.3271119231895,\"qlt\":0,\"dmd\":86.49981172816251,\"dmdR\":[80,99],\"cmp\":75.71048066000347,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":217.6065235289624,\"sll\":0,\"prd\":-217.6065235289624,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1871.993696172353,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":55.83374124762993,\"dmd\":82.5646589133505,\"dmdR\":[70,90],\"cmp\":51.33474205848532,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":435.2130470579248,\"prd\":435.2130470579248,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2157.805670535917,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":55.83374124762993,\"dmd\":70.27182570180511,\"dmdR\":[20,90],\"cmp\":37.71461292054386,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":435.2130470579248,\"prd\":435.2130470579248,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3632.518722227605,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":true,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":81.88233640181568,\"dmdR\":[80,90],\"cmp\":81.35464596261968,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9004.721972491945,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":63609.74643077346,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":81.97974295559402,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8950.33709524014,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":122609,\"qlt\":0,\"dmd\":24.577168967835636,\"dmdR\":[5,99],\"cmp\":26.94190605154489,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":90081.44260912463,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 109.8<br>Energy: 22.0<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":10,\"sizeUsed\":791.7694944007746,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":426.548460070807,\"loc\":\"New Tokyo\",\"size\":1200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2196.1582400129105,\"qlt\":0,\"dmd\":75.58464631022477,\"dmdR\":[65,85],\"cmp\":40.68321346728737,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":213.2742300354035,\"sll\":0,\"prd\":-213.2742300354035,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1621.2337481248771,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2196.1582400129105,\"qlt\":0,\"dmd\":92.74380290491752,\"dmdR\":[80,99],\"cmp\":79.14344478368196,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":213.2742300354035,\"sll\":0,\"prd\":-213.2742300354035,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1800.9297837521924,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":55.627709802050674,\"dmd\":84.18907171481463,\"dmdR\":[70,90],\"cmp\":45.07450634487789,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":426.548460070807,\"prd\":426.548460070807,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4744.017890147802,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":55.627709802050674,\"dmd\":63.45531822690951,\"dmdR\":[20,90],\"cmp\":58.99216911741067,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":426.548460070807,\"prd\":426.548460070807,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3162.918048164028,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":88.9755016935658,\"dmdR\":[80,90],\"cmp\":65.60472271279005,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7770.6415010380815,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":91670.95745951528,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":84.54027458903951,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":17431.94975535431,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":88020,\"qlt\":0,\"dmd\":78.25114275282317,\"dmdR\":[5,99],\"cmp\":25.185343979879818,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":189319.65143120787,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 108.9<br>Energy: 21.8<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":10,\"sizeUsed\":790.625141354233,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":423.2180182580358,\"loc\":\"Ishima\",\"size\":1200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2177.0856892372176,\"qlt\":0,\"dmd\":68.61742338030011,\"dmdR\":[65,85],\"cmp\":41.51622727719031,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":211.6090091290179,\"sll\":0,\"prd\":-211.6090091290179,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1547.185075153115,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2177.0856892372176,\"qlt\":0,\"dmd\":95.49355671290895,\"dmdR\":[80,99],\"cmp\":82.75459378303304,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":211.6090091290179,\"sll\":0,\"prd\":-211.6090091290179,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2005.3543767834783,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":53.868842488207655,\"dmd\":89.48685847282027,\"dmdR\":[70,90],\"cmp\":36.51449508041176,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":423.2180182580358,\"prd\":423.2180182580358,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7057.91687868102,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":53.868842488207655,\"dmd\":31.24590392598817,\"dmdR\":[20,90],\"cmp\":30.136194143317827,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":423.2180182580358,\"prd\":423.2180182580358,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2721.365082279073,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":81.6227735121094,\"dmdR\":[80,90],\"cmp\":76.5817312306591,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7614.350835770346,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":97494.67304304692,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":81.93040057915483,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10256.968157501342,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":87740,\"qlt\":0,\"dmd\":23.92967265213859,\"dmdR\":[5,99],\"cmp\":46.96658907421949,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":81131.78297981009,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 110.0<br>Energy: 22.0<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":10,\"sizeUsed\":792.023842707754,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":427.8892105057139,\"loc\":\"Volhaven\",\"size\":1200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2200.3973784625678,\"qlt\":0,\"dmd\":73.8729856819516,\"dmdR\":[65,85],\"cmp\":57.86157560606107,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":213.94460525285695,\"sll\":0,\"prd\":-213.94460525285695,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1294.756876603172,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2200.3973784625678,\"qlt\":0,\"dmd\":98.29447795278583,\"dmdR\":[80,99],\"cmp\":75.62636983169261,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":213.94460525285695,\"sll\":0,\"prd\":-213.94460525285695,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1935.6645092337849,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":54.878007468028215,\"dmd\":75.08252660257874,\"dmdR\":[70,90],\"cmp\":48.42896510794694,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":427.8892105057139,\"prd\":427.8892105057139,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9023.642810832362,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":54.878007468028215,\"dmd\":72.56176494587034,\"dmdR\":[20,90],\"cmp\":45.28711810574571,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":427.8892105057139,\"prd\":427.8892105057139,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2782.966980820842,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":83.33775305065805,\"dmdR\":[80,90],\"cmp\":72.62506774726533,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9752.413844482482,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":60033.82915675032,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":80.75631161616182,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":11845.304366075132,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":87460,\"qlt\":0,\"dmd\":27.786150901238745,\"dmdR\":[5,99],\"cmp\":37.396733448214725,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":69056.95190398315,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 110.1<br>Energy: 22.0<br>Hardware: 60.0<br>Robots: 500.0<br>AICores: 100.0<br>RealEstate: 0.0<br>\",\"level\":10,\"sizeUsed\":792.0937226786898,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":427.74495540291053,\"loc\":\"Chongqing\",\"size\":1200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":2201.5620446448293,\"qlt\":0,\"dmd\":72.82812162181433,\"dmdR\":[65,85],\"cmp\":46.98843781181697,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":213.87247770145527,\"sll\":0,\"prd\":-213.87247770145527,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1564.3273691320885,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":2201.5620446448293,\"qlt\":0,\"dmd\":89.71724922894035,\"dmdR\":[80,99],\"cmp\":84.31758308852781,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":213.87247770145527,\"sll\":0,\"prd\":-213.87247770145527,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2016.82320278466,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":56.250672543281354,\"dmd\":79.71093100201611,\"dmdR\":[70,90],\"cmp\":37.19102789759755,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":427.74495540291053,\"prd\":427.74495540291053,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9109.805236687953,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":56.250672543281354,\"dmd\":44.63869956033813,\"dmdR\":[20,90],\"cmp\":46.415649477473686,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":427.74495540291053,\"prd\":427.74495540291053,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3416.8996130621977,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":1000,\"qlt\":0,\"dmd\":87.23639984281876,\"dmdR\":[80,90],\"cmp\":66.45217876768146,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7343.9563196280515,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":1000,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":85133.25714182026,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":1000,\"qlt\":0,\"dmd\":97.98742446552993,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":10104.57311911907,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":88800,\"qlt\":0,\"dmd\":9.0117509132082,\"dmdR\":[5,99],\"cmp\":39.159711584130974,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":63321.40400597651,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}},{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"StTCO4q\",\"mor\":100,\"hap\":86.79745052687697,\"ene\":86.79503653683248,\"int\":68,\"cha\":65.45,\"exp\":113.97100000000138,\"cre\":79.89999999999999,\"eff\":65.45,\"sal\":1068.45,\"pro\":0,\"cyclesUntilRaise\":193,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5R2GLNK\",\"mor\":100,\"hap\":86.82732669717252,\"ene\":86.82595475074234,\"int\":71.10000000000001,\"cha\":45.9,\"exp\":96.92100000000138,\"cre\":65.7,\"eff\":90,\"sal\":999,\"pro\":0,\"cyclesUntilRaise\":193,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8CyNPkh\",\"mor\":100,\"hap\":86.7467594557351,\"ene\":86.74489775894916,\"int\":65.57000000000001,\"cha\":79,\"exp\":99.82100000000139,\"cre\":48.190000000000005,\"eff\":79,\"sal\":1004.88,\"pro\":0,\"cyclesUntilRaise\":193,\"loc\":\"\",\"pos\":\"Management\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oFjuFx7\",\"mor\":100,\"hap\":45.03120971512782,\"ene\":86.73472100515363,\"int\":48.96,\"cha\":96,\"exp\":89.859000000001,\"cre\":88.32,\"eff\":67.2,\"sal\":1091.52,\"pro\":0,\"cyclesUntilRaise\":367,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"QODt7QV\",\"mor\":55.00000000000001,\"hap\":75.69996245915976,\"ene\":68.28185453407731,\"int\":68.25,\"cha\":70.07000000000001,\"exp\":92.92900000000101,\"cre\":91,\"eff\":86.45,\"sal\":1146.6000000000001,\"pro\":0,\"cyclesUntilRaise\":367,\"loc\":\"\",\"pos\":\"Business\",\"salary\":1050}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"afbzLJm\",\"mor\":100,\"hap\":83.62995307896769,\"ene\":50.644208565734,\"int\":48.5,\"cha\":52.379999999999995,\"exp\":83.726000000001,\"cre\":80.50999999999999,\"eff\":77.6,\"sal\":948.66,\"pro\":0,\"cyclesUntilRaise\":368,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":1050}}],\"employeeProd\":{\"Operations\":459.0681221070125,\"Engineer\":359.4240842641749,\"Business\":68.5723554318666,\"Management\":409.177706844726,\"Research & Development\":184.23820794947574,\"total\":1480.4804765972556,\"Unassigned\":0}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"name\":\"Food Co.\",\"type\":\"Food\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":2383.867115569066,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prodMats\":[],\"products\":{\"Three Star\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Three Star\",\"dmd\":18.03274625780869,\"cmp\":34.90919999999577,\"mku\":19.46781823838696,\"pCost\":19193.033823088575,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":50.803051974760706,\"qlt\":57.578264749166465,\"per\":64.62127665281939,\"dur\":38.582485596264526,\"rel\":48.76568913765358,\"aes\":33.20009045358866,\"fea\":59.27573351969148,\"data\":{\"Aevum\":[0,0.6485965799460731,0.6485965799460731],\"Chongqing\":[0,0.6485965799460731,0.6485965799460731],\"Ishima\":[0,0.6485965799460731,0.6485965799460731],\"New Tokyo\":[0,0.6485965799460731,0.6485965799460731],\"Sector-12\":[0,0.7542959994306041,0.7542959994306041],\"Volhaven\":[0,0.6485965799460731,0.6485965799460731]},\"loc\":\"\",\"siz\":0.042,\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Four Star\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Four Star\",\"dmd\":18.883753199796764,\"cmp\":7.365599999999391,\"mku\":19.339389704631415,\"pCost\":19193.033823088575,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":50.63538840758762,\"qlt\":57.4179263218807,\"per\":64.53219069978842,\"dur\":38.47868965952608,\"rel\":48.510490511043145,\"aes\":32.97485508159262,\"fea\":59.09051626142694,\"data\":{\"Aevum\":[0,0.6485965799460731,0.6485965799460731],\"Chongqing\":[0,0.6485965799460731,0.6485965799460731],\"Ishima\":[0,0.6485965799460731,0.6485965799460731],\"New Tokyo\":[0,0.6485965799460731,0.6485965799460731],\"Sector-12\":[0,0.7542959994306041,0.7542959994306041],\"Volhaven\":[0,0.6485965799460731,0.6485965799460731]},\"loc\":\"\",\"siz\":0.042,\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}},\"Five Star\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Five Star\",\"dmd\":19.788291527909355,\"cmp\":38.84879999998637,\"mku\":19.113035660991283,\"pCost\":19193.033823088575,\"sCost\":\"MP\",\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":50.64552022992121,\"qlt\":57.46747599081869,\"per\":64.6961496227594,\"dur\":38.49764081269665,\"rel\":48.39495616569514,\"aes\":32.84261477539227,\"fea\":59.10286731433301,\"data\":{\"Aevum\":[0,0.6485965799460731,0.6485965799460731],\"Chongqing\":[0,0.6485965799460731,0.6485965799460731],\"Ishima\":[0,0.6485965799460731,0.6485965799460731],\"New Tokyo\":[0,0.6485965799460731,0.6485965799460731],\"Sector-12\":[0,0.7542959994306041,0.7542959994306041],\"Volhaven\":[0,0.6485965799460731,0.6485965799460731]},\"loc\":\"\",\"siz\":0.042,\"reqMats\":{\"Food\":0.5,\"Water\":0.5,\"Energy\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":128.1903989143101,\"popularity\":34.81688520839142,\"startingCost\":10000000000,\"reFac\":0.05,\"sciFac\":0.12,\"hwFac\":0.15,\"robFac\":0.3,\"aiFac\":0.25,\"advFac\":0.25,\"prodMult\":1.0911768065826186,\"lastCycleRevenue\":\"43437.627955767314\",\"lastCycleExpenses\":\"14945.500361074732\",\"thisCycleRevenue\":\"0\",\"thisCycleExpenses\":\"149183.28777666712\",\"upgrades\":[14,8],\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Aevum\":0,\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 1.0<br>Energy: 0.1<br>Food: 0.4<br>RealEstate: 0.0<br>\",\"level\":1,\"sizeUsed\":1.3939658424814239,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":2.2628879982918124,\"loc\":\"Sector-12\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":19.391591923034408,\"qlt\":0,\"dmd\":77.88565416048657,\"dmdR\":[65,85],\"cmp\":53.96253190418242,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":1.1314439991459062,\"sll\":0,\"prd\":-1.1314439991459062,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1424.0197682261642,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":6.7566367692131735,\"qlt\":0,\"dmd\":87.7062777957154,\"dmdR\":[80,99],\"cmp\":76.19346278011773,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0.45257759965836253,\"sll\":0,\"prd\":-0.4525775996583624,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2055.280969330789,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":11.893995954585728,\"qlt\":0,\"dmd\":85.69438810573502,\"dmdR\":[70,90],\"cmp\":39.4464768352265,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":1.1314439991459062,\"sll\":0,\"prd\":-1.1314439991459062,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5407.113417135108,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":0,\"dmd\":70,\"dmdR\":[20,90],\"cmp\":50,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":81.6185555816329,\"dmdR\":[80,90],\"cmp\":70.74573080415875,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8242.93431688773,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86189.55264971861,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":83.7488213156313,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16411.44176653791,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":4960,\"qlt\":0,\"dmd\":92.6823922727935,\"dmdR\":[5,99],\"cmp\":55.44937726713147,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80651.53646491261,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}},{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":6,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"VgBnYv7\",\"mor\":100,\"hap\":93.98591420620059,\"ene\":88.185726169693,\"int\":55,\"cha\":53,\"exp\":103.65000000000063,\"cre\":66,\"eff\":57,\"sal\":954,\"pro\":0,\"cyclesUntilRaise\":50,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"LZFMTrj\",\"mor\":100,\"hap\":93.87385044528862,\"ene\":72.59181552507943,\"int\":47.85,\"cha\":66.12,\"exp\":74.06700000000063,\"cre\":52.2,\"eff\":45.24,\"sal\":806.49,\"pro\":0,\"cyclesUntilRaise\":51,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"jfvw9LP\",\"mor\":100,\"hap\":93.92789977341177,\"ene\":93.9252380438389,\"int\":53.76,\"cha\":71.03999999999999,\"exp\":85.76700000000064,\"cre\":60.48,\"eff\":55.68,\"sal\":930.24,\"pro\":0,\"cyclesUntilRaise\":51,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8i7549j\",\"mor\":100,\"hap\":93.94928465631575,\"ene\":93.94733465078343,\"int\":77.28,\"cha\":75.6,\"exp\":66.20400000000062,\"cre\":52.08,\"eff\":63,\"sal\":952.56,\"pro\":0,\"cyclesUntilRaise\":52,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6tdXxHA\",\"mor\":100,\"hap\":94.01093135715553,\"ene\":94.00999991381605,\"int\":75.60000000000001,\"cha\":86.4,\"exp\":75.14400000000063,\"cre\":46.800000000000004,\"eff\":70.2,\"sal\":1012.5,\"pro\":0,\"cyclesUntilRaise\":52,\"loc\":\"\",\"pos\":\"Business\",\"salary\":450}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"HprdtIX\",\"mor\":100,\"hap\":93.85676549955615,\"ene\":93.85607605859845,\"int\":66.36,\"cha\":79.8,\"exp\":73.76400000000062,\"cre\":51.239999999999995,\"eff\":63,\"sal\":952.56,\"pro\":0,\"cyclesUntilRaise\":52,\"loc\":\"\",\"pos\":\"Management\",\"salary\":450}}],\"employeeProd\":{\"Operations\":599.3248289645143,\"Engineer\":211.59246043341562,\"Business\":239.37812136084352,\"Management\":440.1081863469961,\"Research & Development\":347.9807530870217,\"total\":1838.384350192791,\"Unassigned\":0}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"name\":\"Tobac Co.\",\"type\":\"Tobacco\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":2084.467509269127,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{},\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prodMats\":[],\"products\":{\"Product 1\":{\"ctor\":\"Product\",\"data\":{\"name\":\"Product 1\",\"dmd\":23.18946656512887,\"cmp\":11.448000000001526,\"mku\":0,\"pCost\":14398.108468671298,\"sCost\":15000,\"fin\":true,\"prog\":0,\"createCity\":\"\",\"designCost\":0,\"advCost\":0,\"rat\":26.809652436748856,\"qlt\":30.474483431609023,\"per\":27.741912373706672,\"dur\":38.21131834550948,\"rel\":16.732051233102098,\"aes\":18.15592574191464,\"fea\":24.12318584691873,\"data\":{\"Aevum\":[0,0.7409517640406331,0.7409517640406331],\"Chongqing\":[0,0.7409517640406331,0.7409517640406331],\"Ishima\":[0,0.7409517640406331,0.7409517640406331],\"New Tokyo\":[0,0.7409517640406331,0.7409517640406331],\"Sector-12\":[0,0.7175412367458756,0.7175412367458756],\"Volhaven\":[0,0.7409517640406331,0.7409517640406331]},\"loc\":\"\",\"siz\":0.060000000000000005,\"reqMats\":{\"Plants\":1,\"Water\":0.2},\"prdman\":{\"Aevum\":[false,0],\"Chongqing\":[false,0],\"Ishima\":[false,0],\"New Tokyo\":[false,0],\"Sector-12\":[false,0],\"Volhaven\":[false,0]},\"sllman\":{\"Aevum\":[true,\"MAX\"],\"Chongqing\":[true,\"MAX\"],\"Ishima\":[true,\"MAX\"],\"New Tokyo\":[true,\"MAX\"],\"Sector-12\":[true,\"MAX\"],\"Volhaven\":[true,\"MAX\"]},\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":{\"Aevum\":0,\"Chongqing\":0,\"Ishima\":0,\"New Tokyo\":0,\"Sector-12\":0,\"Volhaven\":0}}}},\"makesProducts\":true,\"awareness\":44.42400000000151,\"popularity\":10.550800000001262,\"startingCost\":20000000000,\"reFac\":0.15,\"sciFac\":0.75,\"hwFac\":0.15,\"robFac\":0.2,\"aiFac\":0.15,\"advFac\":0.2,\"prodMult\":1,\"lastCycleRevenue\":\"10763.118551188134\",\"lastCycleExpenses\":\"7674.6181751881115\",\"thisCycleRevenue\":\"0\",\"thisCycleExpenses\":\"76747.029791530094\",\"upgrades\":[9,0],\"state\":\"PURCHASE\",\"newInd\":false,\"warehouses\":{\"Aevum\":0,\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"Water: 0.1<br>Plants: 0.4<br>\",\"level\":1,\"sizeUsed\":0.4459610731440955,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":0.7175412367458756,\"loc\":\"Sector-12\",\"size\":120,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":1.48653691048027,\"qlt\":0,\"dmd\":75.95522358993439,\"dmdR\":[65,85],\"cmp\":44.686027852344736,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":0.1435082473491751,\"sll\":0,\"prd\":-0.1435082473491751,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1567.214178680486,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":90,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[70,90],\"cmp\":60,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":7.432684552401639,\"qlt\":0,\"dmd\":72.7437905733881,\"dmdR\":[20,90],\"cmp\":67.8457301155315,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0.7175412367458756,\"sll\":0,\"prd\":-0.7175412367458756,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2566.3261215493903,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":86.99766827579192,\"dmdR\":[80,90],\"cmp\":69.34612055980749,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8872.795824455594,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":59750.64619216436,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":91.50090053846685,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16859.43228571277,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":0,\"qlt\":0,\"dmd\":37.013997142717756,\"dmdR\":[5,99],\"cmp\":41.08841797385395,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":74680.32336746667,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0}}}],\"funds\":\"379383849917.55436648\",\"revenue\":\"31163698.892432907748\",\"expenses\":\"6069971.4913578492535\",\"fundingRound\":2,\"public\":true,\"totalShares\":1800000000,\"numShares\":553100000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":50,\"dividendTaxPercentage\":50,\"issuedShares\":237900000,\"sharePrice\":847.2199979901783,\"storedCycles\":877868,\"unlockUpgrades\":[1,1,1,1,1,0,0],\"upgrades\":[8,2,2,0,8,10,10,10,1,10],\"upgradeMultipliers\":[1.24,1.2,1.002,1,1.8,2,2,2,1.01,1.5],\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":2}}}},\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":3,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1560403312135,\"totalPlaytime\":5183961200,\"playtimeSinceLastAug\":16976800,\"playtimeSinceLastBitnode\":392634200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":58274953098.63523,\"crime\":0,\"gang\":0,\"hacking\":2261868760,\"hacknetnode\":3135462546.1257453,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":63672284405.617966,\"work\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":75000000,\"corporation\":null,\"crime\":11064768,\"gang\":0,\"hacking\":10020077887.807823,\"hacknetnode\":48920874265.327515,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":null,\"work\":169395.19999986747}},\"scriptProdSinceLastAug\":2261868760,\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0,\"factionWorkType\":\"Faction Hacking Work\"}}","AllServersSave":"{\"60.8.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"60.8.2.2\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"SQLInject.exe\",\"HTTPWorm.exe\",\"relaySMTP.exe\",\"FTPCrack.exe\",\"DeepscanV2.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\"],\"ramUsed\":23.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/master/hacking/director-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16604.410000025346,\"ramUsage\":9.75,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",8],\"dataMap\":{},\"filename\":\"/master/buy_server/buy_server-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16603.610000025343,\"ramUsage\":10.5,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[300,\"tprint\"],\"dataMap\":{},\"filename\":\"/master/hacking/monitor-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16603.01000002534,\"ramUsage\":3,\"server\":\"60.8.2.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var equipment = gang.getTaskNames();\\n\\nfor (i=0; i < equipment.length; i++) {\\n    tprint(equipment[i]);\\n}\\n\\n\\n\\ntprint(\\\"Done!\\\");\",\"filename\":\"/temp/scratch.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"clear(1);\\n\\ni=0;\\nvar success = true;\\n\\nwhile(success)\\n{\\n    success = tryWrite(1, i);\\n    print(\\\"Tried to write \\\" + i + \\\" to port 1. Success: \\\" + success);\\n    i++;\\n}\\n\\nclear(1);\",\"filename\":\"/temp/port_write_script_test.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/scripts/hacking_2_0/helpers/hack_target.script\\\";\\nvar growScript = \\\"/scripts/hacking_2_0/helpers/grow_target.script\\\";\\nvar weakenScript = \\\"/scripts/hacking_2_0/helpers/weaken_target.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/temp/copy_test/scripts/hacking_2_0/run.script\",\"module\":\"\",\"ramUsage\":4.9,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"filename\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"module\":\"\",\"ramUsage\":0,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    \\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/_getScriptList-ns2.js\\\", \\\"/pull/_getScriptList-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/pull_scripts-ns2.js\\\", \\\"/pull/pull_scripts-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/destroy_scripts-ns2.js\\\", \\\"/pull/destroy_scripts-ns2.js\\\");\\n\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait ns.run(\\\"/pull/pull_scripts-ns2.js\\\", 1, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t\\tns.tprint(\\\"===== ALERT ===== Valid values: master, beta\\\");\\n\\t}\\n\\n\\tns.tprint(\\\"Pull complete!\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait pull(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function pull(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\n\\t// gitHub Setup\\n\\tvar gitHubBranchPath = branch;\\n\\tvar gitHubPrjectURL = \\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/\\\";\\n\\tvar gitHubScriptsPath = \\\"/home/scripts\\\";\\n\\t\\n\\t// bitBurner setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar sourcePath = gitHubPrjectURL + gitHubBranchPath + gitHubScriptsPath + scriptPath;\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.wget(sourcePath, destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait destroy(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function destroy(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\tvar deprecatedScripts = getDrecatedScriptList();\\n\\t\\n\\t// bitBurner path setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n\\t\\n\\tfor(var i = 0; i < deprecatedScripts.length; i++) {\\n\\t\\tvar scriptPath = deprecatedScripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/destroy_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"run(\\\"./../path_bravo/test.script\\\");\",\"filename\":\"/temp/rel_dir_test/path_alpha/test.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"tprint(\\\"Test successful\\\");\",\"filename\":\"/temp/rel_dir_test/path_bravo/test.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_getScriptList : true,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getScriptList(){\\n\\tvar scripts = [\\n\\t\\t// buy_server\\n\\t\\t\\\"/buy_server/buy_server-ns1.script\\\",\\n\\t\\t\\\"/buy_server/buy_server-ns2.js\\\",\\n\\t\\t// hacknet\\n\\t\\t\\\"/character/hacknet/hashmanager-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/node_autobuy-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/server_autobuy-ns2.js\\\",\\n\\t\\t// walet\\n\\t\\t\\\"/character/wallet-ns2.js\\\",\\n\\t\\t// deploy\\n\\t\\t\\\"/deploy/kill_all-ns2.js\\\",\\n\\t\\t\\\"/deploy/server_steal_basic-ns2.js\\\",\\n\\t\\t// functions\\n\\t\\t\\\"/functions/buildServerInfoArray-ns2.js\\\",\\n\\t\\t\\\"/functions/enumLib-ns1.script\\\",\\n\\t\\t\\\"/functions/enumLib-ns2.js\\\",\\n\\t\\t\\\"/functions/getNumOpenablePorts-ns2.js\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns2.js\\\",\\n\\t\\t\\\"/functions/getServerRamObj-ns2.js\\\",\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/advanced/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/advanced/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_harakiri-sushi-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_joesguns-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_template-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/deployHackBots-ns2.js\\\",\\n\\t\\t\\\"/hacking/director-ns2.js\\\",\\n\\t\\t\\\"/hacking/monitor-ns2.js\\\",\\n\\t\\t// pserv\\n\\t\\t\\\"/pserv/deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall_and_deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall-ns1.script\\\",\\n\\t\\t// restart_run\\n\\t\\t\\\"/restart_run/restart_run-ns1.script\\\",\\n\\t\\t// templates\\n\\t\\t\\\"/templates/ns1_template.js\\\",\\n\\t\\t\\\"/templates/ns2_template.js\\\",\\n\\t\\t// world\\n\\t\\t\\\"/world/contracts/foreman-ns2.js\\\",\\n\\t\\t\\\"/world/gang/godfather-ns2.js\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\nexport function getDrecatedScriptList(){\\n\\tvar scripts = [\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/director-ns1.script\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_getScriptList)\\n\\t\\ttest_getScriptList(ns);\\n}\\n\\nfunction test_getScriptList(ns) {\\n\\tns.print(\\\"==== TEST: test_getScriptList ====\\\");\\n\\n\\tscripts = getScriptList();\\n\\tfor (var i = 0; i < scripts.length; i++) {\\n\\t\\tns.print(scripts[i]);\\n\\t}\\n}\",\"filename\":\"/pull/_getScriptList-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\thashReserve : 0,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_TotalHacknetProductionEnabled : false,\\n\\ttestEnabled_getTotalHashCapacity : false,\\n\\ttestEnabled_evaluateMinimumHacknetProduction : false,\\n\\ttestEnabled_evaluateImporoveStudying : false,\\n};\\n\\nvar eUpgradeName = {\\n\\tsellForMoney : \\\"Sell for Money\\\",\\n\\tsellForCorporationFunds : \\\"Sell for Corporation Funds\\\",\\n\\treduceMinimumSecurity : \\\"Reduce Minimum Security\\\",\\n\\tincreaseMaximumMoney : \\\"Increase Maximum Money\\\",\\n\\timproveStudying : \\\"Improve Studying\\\",\\n\\timproveGymTraining : \\\"Improve Gym Training\\\",\\n\\texchangeForCorporationResearch : \\\"Exchange for Corporation Research\\\",\\n\\texchangeForBladeburnerRank : \\\"Exchange for Bladeburner Rank\\\",\\n\\texchangeForBladeburnerSkillPpoints : \\\"Exchange for Bladeburner SP\\\",\\n\\tgenerateCodingContract : \\\"Generate Coding Contract\\\",\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\t// Real Logic\\n\\tif (!tests.disableMain) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.print(\\\"Starting main function\\\");\\n\\t\\tvar upgradeToBuy = eUpgradeName.sellForMoney;\\n\\n\\t\\twhile(true) {\\n\\t\\t\\tupgradeToBuy = decideWhatToBuy(ns);\\n\\t\\t\\tns.print(\\\"Decided to buy: \\\" + upgradeToBuy);\\n\\t\\t\\tawait buyUpgrade(ns, upgradeToBuy);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getTotalHashCapacity(ns) {\\n\\tvar hashCapacity = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\thashCapacity += 64 * Math.pow(2, ns.hacknet.getNodeStats(i).cache - 1);\\n\\t}\\n\\t\\n\\t\\n\\t// see how many hacknet nodes we have \\n\\t// see how many cache upgrades we have \\n\\t\\n\\treturn hashCapacity;\\n}\\n\\nfunction getTotalHacknetHashProduction(ns) {\\n\\tvar totalHacknetProduction = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\ttotalHacknetProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\t\\n\\treturn totalHacknetProduction;\\n}\\n\\nfunction decideWhatToBuy(ns) {\\n\\tvar upgradeNameToPurchase = eUpgradeName.sellForMoney; // if nothing else, we'll decide to convert to cash\\n\\t\\n\\t/* Purchase Priority goals - Go down the list, and do the first thing that is true\\n\\t\\t1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\t\\t2) We should then start spending some on University upgrades \\n\\t\\tZ) Convert to cash (which we defaulted to when declaring the return variable)\\n\\t*/\\n\\t\\n\\t// 1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\tif (evaluateMinimumHacknetProduction(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.sellForMoney; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\t// 2) We should then start spending some on University upgrades \\n\\tif (evaluateImporoveStudying(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.improveStudying; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\treturn upgradeNameToPurchase;\\n}\\n\\nasync function buyUpgrade(ns, upgradeToBuy) {\\n\\tvar upgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\tvar desiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\n\\twhile (desiredHashCount < upgradeHashCost){\\n\\t\\tns.print(\\\"Waiting for more hashes (Have: \\\" + ns.nFormat(desiredHashCount, \\\"0,0\\\") + \\\" / Want: \\\" + ns.nFormat(upgradeHashCost, \\\"0,0\\\") + \\\")\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tupgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\t\\tdesiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\t}\\n\\t\\n\\tif ((ns.hacknet.numHashes()-sVars.hashReserve) > ns.hacknet.hashCost(upgradeToBuy)) {\\n\\t\\tns.print(\\\"Spending hashes on: \\\" + upgradeToBuy);\\n\\t\\tns.hacknet.spendHashes(upgradeToBuy);\\n\\t}\\n}\\n\\nfunction evaluateMinimumHacknetProduction(ns) {\\n\\tif (getTotalHacknetHashProduction(ns) < 1) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nfunction evaluateImporoveStudying(ns) {\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tvar hashCapacityPcnt = 0.50;\\n\\n\\tif (imporoveStudyingCost < hashCapacity * hashCapacityPcnt) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_TotalHacknetProductionEnabled)\\n\\t\\ttest_getTotalHacknetHashProduction(ns);\\n\\tif (tests.testEnabled_getTotalHashCapacity)\\n\\t\\ttest_getTotalHashCapacity(ns);\\n\\tif (tests.testEnabled_evaluateMinimumHacknetProduction)\\n\\t\\ttest_evaluateMinimumHacknetProduction(ns);\\n\\tif (tests.testEnabled_evaluateImporoveStudying)\\n\\t\\ttest_evaluateImporoveStudying(ns);\\n}\\n\\nfunction test_getTotalHacknetHashProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHacknetHashProduction ====\\\");\\n\\tvar totalHashProduction = getTotalHacknetHashProduction(ns);\\n\\tns.print(\\\"Total Hash Production: \\\" + totalHashProduction);\\n}\\n\\nfunction test_getTotalHashCapacity(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHashCapacity ====\\\");\\n\\tvar hashCapactiy = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapactiy: \\\" + hashCapactiy);\\n}\\n\\nfunction test_evaluateMinimumHacknetProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateMinimumHacknetProduction ====\\\");\\n\\tvar resultOfEvaluation = evaluateMinimumHacknetProduction(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\nfunction test_evaluateImporoveStudying(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateImporoveStudying ====\\\");\\n\\t\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tns.print(\\\"imporoveStudyingCost: \\\" + imporoveStudyingCost);\\n\\t\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapacity: \\\" + hashCapacity);\\t\\n\\t\\n\\tvar resultOfEvaluation = evaluateImporoveStudying(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\n// ===== REFERENCE ============\\n/* Function Reference\\nnumHashes()\\nhashCost(upgName)\\nspendHashes(upgName, upgTarget)\\n*/\\n\\n/* Hash Upgrade Table\\nSell for Money\\t\\t\\t\\t\\t\\t\\tBase Cost: 4.000\\t\\tSell hashes for $1m\\nSell for Corporation Funds\\t\\t\\t\\tBase Cost: 100.000\\t\\tSell hashes for $1b in Corporation funds\\nReduce Minimum Security\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to decrease the minimum security of a single server by 2%. Note that a server's minimum security cannot go below 1.\\nIncrease Maximum Money\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to increase the maximum amount of money on a single server by 2%\\nImprove Studying\\t\\t\\t\\t\\t\\tBase Cost: 100.000\\t\\tUse hashes to improve the experience earned when studying at a university by 20%. This effect persists until you install Augmentations\\nImprove Gym Training\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to improve the experience earned when training at the gym by 20%. This effect persists until you install Augmentations\\nExchange for Corporation Research\\t\\tBase Cost: 200.000\\t\\tExchange hashes for 1k Scientific Research in all of your Corporation's Industries\\nExchange for Bladeburner Rank\\t\\t\\tBase Cost: 250.000\\t\\tExchange hashes for 100 Bladeburner Rank\\nExchange for Bladeburner SP\\t\\t\\t\\tBase Cost: 250.000\\t\\tExchanges hashes for 10 Bladeburner Skill Points\\nGenerate Coding Contract\\t\\t\\t\\tBase Cost: 200.000\\t\\tGenerate a random Coding Contract somewhere on the network\\n*/\",\"filename\":\"/master/character/hacknet/hashmanager-ns2.js\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 1024,\\n\\tnodeCoresLimit: 16,\\n\\tnodeCacheLimit: 5,\\n\\tmoneySpendLimitPercent: 0.90,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n\\tcache: 4,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cache:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CACHES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCacheAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.001;\\n    var ramModifier = Math.pow(1.07, Math.log2(ram));\\n    var coresModifier = (cores + 4) / 5;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction convertHashProductionToMoney(hashProduction){\\n\\tvar moneyProduction = 1000000/(4/hashProduction);\\n\\treturn moneyProduction;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Improving the cache size doesn't get us more production, but can be nice to have\\n\\t// Because there is no comparitive math here, we just early out by claiming we're going to buy a cache level\\n\\tif (evaluateImprovingCaches(ns)){\\n\\t\\tns.print(\\\"Choosing to buy cache upgrades\\\");\\n\\t\\treturn buy.cache;\\n\\t}\\n\\t\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction evaluateImprovingCaches(ns) {\\n\\tns.print(\\\"Evauluating if we should buy caches\\\");\\n\\tvar shouldBuy = false;\\n\\tvar baseNode = 0;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar levelUpgradeCost = ns.hacknet.getLevelUpgradeCost(baseNode, 1);\\n\\tvar ramUpgradeCost = ns.hacknet.getRamUpgradeCost(baseNode, 1);\\n\\tvar coreUpgradeCost = ns.hacknet.getCoreUpgradeCost(baseNode, 1);\\n\\tvar cacheUpgradeCost = ns.hacknet.getCacheUpgradeCost(baseNode, 1);\\n\\t // Multipliers on cost to be less than, lower means longer time between buying caches\\n\\tvar levelCostModifier = 0.50;\\n\\tvar ramCostModifier = 0.50;\\n\\tvar coreCostModifier = 0.50;\\n\\tvar cacheCostModifier = 0.50;\\n\\t\\n\\tif (cacheUpgradeCost < newNodeCost*levelCostModifier &&\\n\\t\\tcacheUpgradeCost < levelUpgradeCost*ramCostModifier &&\\n\\t\\tcacheUpgradeCost < ramUpgradeCost*coreCostModifier &&\\n\\t\\tcacheUpgradeCost < coreUpgradeCost*cacheCostModifier \\n\\t) {\\n\\t\\tshouldBuy = true;\\n\\t}\\n\\t\\n\\treturn shouldBuy;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/convertHashProductionToMoney(bareNodeProduction);\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/convertHashProductionToMoney(upgradedNodeProduction);\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/convertHashProductionToMoney(nextLevelProductionDelta);\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/convertHashProductionToMoney(nextRamProductionDelta);\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/convertHashProductionToMoney(nextCoreProductionDelta);\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCacheAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCache = ns.hacknet.getNodeStats(0).cache + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCacheAsync(ns, i, desiredCache);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCacheAsync(ns, nodeIndex, desiredCache) {\\n    // Keep going until we hit the desired cache amount\\n    while (ns.hacknet.getNodeStats(nodeIndex).cache < desiredCache) {\\n        var cost = ns.hacknet.getCacheUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cache\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a cache upgrade\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCache(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/server_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n    \\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n    hackingTarget : \\\"max-hardware\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n\\t\\t\\tns.killall(thisServer.name);\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/kill_all-ns2.js\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : true, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_nameDump : false,\\n\\ttestEnabled_nameAndPortsDump : false, \\n    testEnabled_dataDump : false,\\n    testEnabled_testScanArrayDump : false,\\n    testEnabled_sortByRequiredHackShowMaxMoney : true,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n    \\n\\t// - Tests ----------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.print(\\\"Starting main function\\\");\\n}\\n\\n// ===== FUNCTIONS ============\\nexport async function buildServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport async function buildHackableServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tif (returnedServerInfo[i].isHackable === true) {\\n\\t\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t\\t}\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport function getTargetInfo(ns, target, parent, depth) {\\n\\t//ns.print(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetIsHacknet = target.startsWith(\\\"hacknet\\\");\\n\\tvar targetIsPserv = target.startsWith(\\\"pserv\\\");\\n    var targetInfo;\\n\\t\\n\\tif (target === \\\"home\\\") {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : true,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsHacknet) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : true,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : 0,\\n\\t\\t\\tmaxMoney : 0,\\n\\t\\t\\tgrowth : 0,\\n\\t\\t\\tsecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tbaseSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tminSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\trequiredHackingLevel : Number.MAX_VALUE,\\n\\t\\t\\tnumPortsRequired : Number.MAX_VALUE,\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsPserv) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : true,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : false,\\n\\t\\t\\tisHackable : true,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\t\\n\\treturn targetInfo;\\n}\\n\\nexport async function processScanResultsRecursive(ns, serverListArray, parentServer, calledDepth) {\\n\\t// ns.print(\\\"---- Calling processScanResultsRecursive @ depth \\\" + calledDepth + \\\" ----\\\"); //DEBUG\\n\\tvar currentDepth = calledDepth + 1;\\n\\t\\n\\tvar returningTargetInfoArray = [];\\n\\t// Loop over all elements of serverListArray\\n\\tfor (var i = 0; i < serverListArray.length; i++) {\\n\\t\\tvar currentServerName = serverListArray[i];\\n\\t\\n\\t\\t// assign it's data to the array we're going to return\\n\\t\\treturningTargetInfoArray.push(getTargetInfo(ns, currentServerName, parentServer.name, currentDepth));\\n\\t\\t\\n\\t\\t// scan for more servers\\n\\t\\tvar neighboringServerArray = ns.scan(currentServerName);\\n\\t\\t// ns.print(\\\"== dumping neighboring servers pre-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, neighboringServerArray); //DEBUG\\n\\t\\t\\n\\t\\t// remove the parent from the list\\n\\t\\tvar parentNeighborIndex;\\n\\t\\t\\n\\t\\tfor (var j = 0; j < neighboringServerArray.length; j++) {\\n\\t\\t\\tif (neighboringServerArray[j] === parentServer.name) {\\n\\t\\t\\t\\tparentNeighborIndex = j;\\n\\t\\t\\t}\\n\\t\\t\\t// await ns.sleep(100);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// ns.print(\\\"parentNeighborIndex: \\\" + parentNeighborIndex); //DEBUG\\n\\t\\tvar childServerArray = neighboringServerArray;\\n\\t\\tchildServerArray.splice(parentNeighborIndex, 1);\\n\\t\\t\\n\\t\\t// ns.print(\\\"== dumping childServerArray servers post-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, childServerArray); //DEBUG\\n\\t\\t// ns.print(\\\"== childServerArray.length: \\\" + childServerArray.length); //DEBUG\\n\\t\\t\\n\\t\\t// call process scan results for the children\\n\\t\\tvar childServerInfoArray;\\n\\t\\t\\n\\t\\tif (childServerArray.length !== 0) {\\n\\t\\t\\t// ns.print(\\\"Attempting to call processScanResultsRecursive again\\\"); //DEBUG\\n\\t\\t\\tchildServerInfoArray = await processScanResultsRecursive(ns, childServerArray, getTargetInfo(ns, currentServerName, parentServer.name, currentDepth), currentDepth);\\n\\t\\t\\t// ns.print(\\\"childServerInfoArray.length :\\\" + childServerInfoArray.length); //DEBUG\\n\\t\\t\\t\\n\\t\\t\\t// push all the results from the children into the array\\n\\t\\t\\tfor (var k = 0; k < childServerInfoArray.length; k++) {\\n\\t\\t\\t\\treturningTargetInfoArray.push(childServerInfoArray[k]);\\n\\t\\t\\t\\t// await ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t// ns.print(\\\"== Skipped Recursion ===\\\"); //DEBUG\\n\\t\\t}\\n\\t\\t\\n\\t\\t// await ns.sleep(100);\\n\\t}\\n\\t\\n\\treturn returningTargetInfoArray;\\n}\\n\\n// ===== TESTS ================\\nasync function executeTests(ns) {\\n    var serverInfoArray = await buildServerInfoArray(ns);\\n\\n    if (tests.testEnabled_nameDump) { testNameDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_nameAndPortsDump) { testNameAndPortsDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_dataDump) { testDataDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_testScanArrayDump) { testScanArrayDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_sortByRequiredHackShowMaxMoney) { test_sortByRequiredHackShowMaxMoney(ns, serverInfoArray); }\\n}\\n\\nfunction testNameDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tns.print(serverInfoArray[i].name);\\n\\t}\\n} \\n\\nfunction testNameAndPortsDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameAndPortsDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"/Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testDataDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testDataDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"    /    Parent: \\\" + serverInfoArray[i].parent + \\\"    /    Depth: \\\" + serverInfoArray[i].depth + \\\"    /    Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testScanArrayDump(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: testScanArrayDump ====\\\");\\n\\tfor (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.print(\\\"Index: \\\" + i + \\\"/SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\nfunction test_sortByRequiredHackShowMaxMoney(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: test_sortByRequiredHackShowMaxMoney ====\\\");\\n    \\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / numPortsRequired: \\\" + serverListArray[i].numPortsRequired + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\",\"filename\":\"/master/functions/buildServerInfoArray-ns2.js\",\"module\":\"\",\"ramUsage\":2.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getEnumPortIndexVersion (version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns1.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n    \\n    var hackablePortNumber = getNumOpenablePorts(ns);\\n\\n    // figure out how many ports I can steal\\n    // build get the list of servers\\n    // based on how many ports I can open, use the install and run script    \\n\\n    ns.print(hackablePortNumber);\\n}\\n\\n// ========= FUNCTIONS ========= \\nexport function getNumOpenablePorts(ns) {\\n    var numOpenablePorts = 0;\\n    \\n    if(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    \\n    return numOpenablePorts;\\n}\\n\\n// =========== TESTS ===========\",\"filename\":\"/master/functions/getNumOpenablePorts-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getRootAccess (ns, target)\\n{\\n\\tif (ns.hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(target);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(target);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(target);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(target);\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        ns.nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns2.js\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args\\nvar destServ = args[0];\\nvar hackTargetServ = args[1];\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/master/functions/getRootAccess-ns1.script\\\",\\n    \\\"/master/hacking/advanced/run-ns1.script\\\",\\n    \\\"/master/hacking/helpers/grow_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/hack_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/weaken_target-ns1.script\\\"\\n    ];\\n\\nvar primaryScript = \\\"/master/hacking/advanced/run-ns1.script\\\";\\n\\nvar sourceServer = \\\"home\\\";\\n\\nscp(scripts, sourceServer, destServ);\\nexec(primaryScript, destServ, 1, hackTargetServ);\",\"filename\":\"/master/hacking/advanced/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/master/hacking/helpers/hack_target-ns1.script\\\";\\nvar growScript = \\\"/master/hacking/helpers/grow_target-ns1.script\\\";\\nvar weakenScript = \\\"/master/hacking/helpers/weaken_target-ns1.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/master/hacking/advanced/run-ns1.script\",\"module\":\"\",\"ramUsage\":4.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Get root access on the destServ & hackTargetServ\\n\\tgetRootAccess(sArgs.destServ);\\n\\tgetRootAccess(sArgs.hackTargetServ);\\n\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\tif (threadCount <= 0) {\\n\\t\\ttprint(\\\"ERROR: Desired thread count to low to run exec()! threadCount: \\\" + threadCount + \\\", sArgs.destServ: \\\" + sArgs.destServ)\\n\\t\\texit();\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":4.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"harakiri-sushi\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_harakiri-sushi-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"joesguns\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_joesguns-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_template-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\ngrow(serv);\",\"filename\":\"/master/hacking/helpers/grow_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nhack(serv);\",\"filename\":\"/master/hacking/helpers/hack_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nweaken(serv);\",\"filename\":\"/master/hacking/helpers/weaken_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/deploy-ns1.script\",\"module\":\"\",\"ramUsage\":4.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/killall_and_deploy-ns1.script\",\"module\":\"\",\"ramUsage\":5.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n}\",\"filename\":\"/master/pserv/killall-ns1.script\",\"module\":\"\",\"ramUsage\":4.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ========== ARGS ============ \\n\\n// ========== VARS ============\\nvar sVars = {\\n    // PSERV settings\\n    pservStartingRamAmount: 8,\\n    pservHackTarget: \\\"joesguns\\\",\\n};\\n\\n// ========= FUNCTIONS ========= \\n\\n// ========== LOGIC ==========\\n// For BN-9 when we go back...\\n// run(\\\"/master/character/hacknet/server_autobuy-ns2.js\\\");\\n// run(\\\"/master/character/hacknet/hashmanager-ns2.js\\\");\\n\\nclear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\nrun(\\\"/master/hacking/director-ns2.js\\\");\\nrun(\\\"/master/character/hacknet/node_autobuy-ns2.js\\\");\\nrun(\\\"/master/buy_server/buy_server-ns2.js\\\", 1, sVars.pservHackTarget, sVars.pservStartingRamAmount);\\nrun(\\\"/master/world/gang/godfather-ns2.js\\\");\\nrun(\\\"/master/hacking/monitor-ns2.js\\\", 1, 300, \\\"tprint\\\");\",\"filename\":\"/master/restart_run/restart_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/templates/ns2_template.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs() {\\n    var scriptArgs = {\\n        hackTarget : args[0],\\n        desiredRam : args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    availableCashMod : 0.70,\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tprint(\\\"Starting script...\\\");\\n    disableLog(\\\"ALL\\\");\\n    \\n    if(sArgs.desiredRam > getPurchasedServerMaxRam()) {\\n        tprint(\\\"buy_server.script: sArgs.desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.\\\");\\n        exit();\\n    }\\n    \\n    // loop to buy initial round of servers\\n    // while: server count < max servers\\n    print(\\\"DEBUG: server count:\\\" + getPurchasedServers().length);\\n    print(\\\"DEBUG: server limit:\\\" + getPurchasedServerLimit());\\n    while(getPurchasedServers().length < getPurchasedServerLimit())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // wait to have enough money to buy\\n        if(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(sArgs.desiredRam))\\n        {\\n            // create a server name\\n            var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n            \\n            // buy a server\\n            var hostname = \\\"\\\"\\n            while (hostname === \\\"\\\") {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                hostname = purchaseServer(servName, sArgs.desiredRam);\\n            }\\n            \\n            // copy and run script\\n            run(sVars.setupScriptName, 1, hostname, sArgs.hackTarget);\\n        }\\n    }\\n    \\n    //increase the desireRam count as a one off\\n    sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n    \\n    // loop to upgrade servers\\n    while (sArgs.desiredRam <= getPurchasedServerMaxRam())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // call get purchased servers\\n        var purchasedServers = getPurchasedServers();\\n        \\n        for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)\\n        {\\n            var oldHostname = purchasedServers[servIndex];\\n            print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n            \\n            if(getServerRam(oldHostname)[0] < sArgs.desiredRam)\\n            {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                \\n                // kill all scripts on the old server\\n                print(\\\"DEBUG: Killing all scripts on: \\\" + oldHostname);\\n                killall(oldHostname);\\n                sleep(10000);\\n                \\n                // delete the old server\\n                print(\\\"DEBUG: Deleting: \\\" + oldHostname);\\n                deleteServer(oldHostname);\\n                \\n                // buy a server\\n                var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n                var newHostname = \\\"\\\";\\n    \\n                while (newHostname === \\\"\\\") {\\n                    while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                    {\\n                        print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                        sleep(60*1000);\\n                    }\\n                    newHostname = purchaseServer(servName, sArgs.desiredRam);\\n                    sleep(1000);\\n                }\\n                print(\\\"DEBUG: New server named: \\\" + newHostname);\\n                \\n                // copy and run scripts\\n                run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n            }\\n        }\\n        \\n        // increase ram for the next loop\\n        sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n        \\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests() {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction();\\n}\\n\\nfunction test_exampleFunction() {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\n// ===== REFERENCE ==============================\\n// Useful functions:\\n// ==================\\n// getPurchasedServers - array of servers that you won\\n// getPurchasedServerLimit - max number of servers you can purchase\\n// getPurchasedServerCost - cost of a server based on a RAM amount\\n// getPurchasedServerMaxRam - max ram you can purchse\\n// purchaseServer(name, RAM) - buys a server with the specified RAM\\n// getServerRam - returns max ram, used ram\\n// getServerMoneyAvailable(\\\"home\\\")\\n// ==================\",\"filename\":\"/master/buy_server/buy_server-ns1.script\",\"module\":\"\",\"ramUsage\":10.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns)\\n{\\n    var sArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return sArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n          thisServer.isHacknet === false &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n            var waitingToInstall = true;\\n            while(waitingToInstall) {\\n                var homeRam = ns.getServerRam(ns.getHostname());\\n                var homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n                if (homeFreeRam >= ns.getScriptRam(sVars.installScript)) {\\n                    ns.run(sVars.installScript, 1, thisServer.name, sArgs.hackingTarget);\\n                    waitingToInstall = false;\\n                }\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/server_steal_basic-ns2.js\",\"module\":\"\",\"ramUsage\":4.3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEnumPortIndexVersion(version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as dhb from \\\"/master/hacking/deployHackBots-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tscanFrequency : 60 * 1000, // 60 seconds in milliseconds\\n\\thackbotDeployServerMinRam : 8,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_serverArrayBuilder : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Build server lists\\n\\tvar hackableServerListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tvar deployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\n\\t// Establish initial target & deploy the hackbots\\n\\tns.print(\\\"Picking initial target and deploying the hackbots\\\");\\n\\tvar primaryHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET); // Could start out as NULL PORT DATA\\n\\tif(primaryHackTarget !== \\\"NULL PORT DATA\\\") {\\n\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\t}\\n\\t\\n\\n\\t// Sort the server list by money, high -> low\\n    hackableServerListArray.sort(function(a, b) {\\n        return b.maxMoney - a.maxMoney;\\n    });\\n\\n\\t// Start loopin' to find & update target\\n\\twhile(true) {\\n\\t\\tns.print(\\\"Scanning for a new target...\\\");\\n\\t\\tvar currentBestTarget = getBestHackableTarget(ns, hackableServerListArray);\\n\\n\\t\\t// If the best option is different from our current option, update the port\\n\\t\\tif (currentBestTarget !== primaryHackTarget)\\n\\t\\t{\\n\\t\\t\\tns.print(\\\"Updating primaryHackTarget to: \\\" + currentBestTarget);\\n\\t\\t\\tprimaryHackTarget = currentBestTarget;\\n\\t\\t\\tns.clear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\t\\t\\tns.write(ePortIndex.PRIMARY_HACKING_TARGET, currentBestTarget);\\n\\n\\t\\t\\t// Re-deploy the hackbots at the new target\\n\\t\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\n\\t\\t}\\n\\n\\t\\t// Sleep for like...a minute or something.\\n\\t\\tawait ns.sleep(sVars.scanFrequency);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getBestHackableTarget(ns, serverListArray) {\\n\\t// Figure out my hacking ability & port opening ability\\n\\tvar hackingSkillLevel = ns.getHackingLevel();\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\t// Iterate thru the list, finding the first option that can be hacked (skill & ports opening\\n\\tfor (var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i];\\n\\n\\t\\tif(hackingSkillLevel >= server.requiredHackingLevel && portBreakingLevel >= server.numPortsRequired) {\\n\\t\\t\\treturn server.name;\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nasync function executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n\\tif (tests.testEnabled_serverArrayBuilder)\\n\\t\\tawait test_serverArrayBuilder(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\nasync function test_serverArrayBuilder(ns) {\\n\\tns.print(\\\"==== TEST: test_serverArrayBuilder ====\\\");\\n\\n\\tvar serverListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tprint(typeof serverListArray);\\n\\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\n/* ===== REFERENCE ==============================\\nns.write()\\nns.trywrite()\\nns.read()\\nns.peek()\\nns.clear()\\n\\t*/\",\"filename\":\"/master/hacking/director-ns2.js\",\"module\":{},\"ramUsage\":9.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/functions/enumLib-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\nvar portEmpty = \\\"NULL PORT DATA\\\";\\n\\n// ===== ARGS ===================================\\nvar sArgs = {\\n\\tinitialHackTarget : args[0],\\t// Initial to hack\\n};\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\n\\tvar hackTarget = sArgs.initialHackTarget;\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\n\\t// - Real Script Logic ----------------------\\n\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t// Get root access if I don't have it\\n\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\tgetRootAccess(hackTarget);\\n\\t}\\n\\n\\twhile(true) {\\n\\t\\tvar updateResults = updateHackTarget(hackTarget);\\n\\t\\tif(updateResults.updated === true) {\\n\\t\\t\\thackTarget = updateResults.hackTarget;\\n\\t\\t\\tmoneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\t\\t\\tsecurityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t\\t\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\t\\t\\tgetRootAccess(hackTarget);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (getServerSecurityLevel(hackTarget) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(hackTarget);\\n\\t\\t} else if (getServerMoneyAvailable(hackTarget) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(hackTarget);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(hackTarget);\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction updateHackTarget(currentTarget) {\\n\\tvar results = {\\n\\t\\tupdated: false,\\n\\t\\thackTarget: currentTarget,\\n\\t};\\n\\n\\tprimaryHackTarget = peek(ePortIndex.PRIMARY_HACK_TARGET);\\n\\n\\tif(primaryHackTarget !== portEmpty && currentTarget !== primaryHackTarget) {\\n\\n\\t\\tresults.hackTarget = primaryHackTarget;\\n\\t}\\n\\n\\treturn results;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":3.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 64,\\n\\tnodeCoresLimit: 16,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\n\\t\\t// Wait for enough money\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\t\\t\\n\\t\\t// Buy the node\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\tawait upgradeAllToMatchBaseNodeAsync(ns);\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Wait for enough money\\n\\t\\t\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tawait purchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=========================== Ready to make a decision ===========================\\\");\\n\\tns.print(\\\"--- maxRecoupTime:\\\" + ns.nFormat(sVars.recoupTimeCap, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(sVars.recoupTimeCap/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--------------------------------------------------------------------------------\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"================================================================================\\\");\\n\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction;\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction;\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\t\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    var newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/node_autobuy-ns2.js\",\"module\":{},\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg: ns.args[0]\\n    };\\n\\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n    enabled: false, // Master override for all tests\\n    disableMain: false, // Disables all non-testing logic in main\\n    testEnabled_exampleFunction: false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\n    // - Tests ----------------------------------\\n    if (tests.enabled)\\n        executeTests(ns);\\n\\n    // - Early out ------------------------------\\n    if (tests.disableMain) {\\n        ns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n        ns.exit();\\n    }\\n\\n    // - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getServerRamObject(ns, server) {\\n    // Get the server's RAM, total and used\\n    var targetServRam = ns.getServerRam(server);\\n    var targetServTotalRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServTotalRam - targetServUsedRam;\\n\\n    var serverRamObj = {\\n        total: targetServRam,\\n        used: targetServUsedRam,\\n        free: targetServFreeRam,\\n    }\\n\\n    return serverRamObj;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n    ns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/functions/getServerRamObj-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n\\t\\tdeployTarget : ns.args[0],\\n        fallbackHackTarget : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Set the best target\\n\\tvar bestHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\tif(bestHackTarget === \\\"NULL PORT DATA\\\") {\\n\\t\\tbestHackTarget = sArgs.fallbackHackTarget;\\n\\t}\\n\\n\\t// Function is built around a server array, so we build a simple one\\n\\tvar serverInfoArray = [bsi.getTargetInfo(ns, sArgs.deployTarget, null, 0)];\\n\\n\\t// Deploy the hackbots\\n\\tawait deployHackBots(ns, serverInfoArray, bestHackTarget);\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport async function deployHackBots(ns, deployServerListArray, hackTargetServer) {\\n\\tns.print(\\\"Beggining to deploy the hack bots! Targeting: \\\" + hackTargetServer);\\n\\n\\t// Ensure we have root access on the hack target\\n\\tgra.getRootAccess(ns, hackTargetServer);\\n\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\tfor (var i = 0; i < deployServerListArray.length; i++) {\\n\\t\\tvar deployServer = deployServerListArray[i];\\n\\t\\tns.print(\\\"Evaluating server: \\\" + deployServer.name);\\n\\n\\t\\tvar hackHelperScript = \\\"/master/hacking/helpers/hack_target_loop-ns1.script\\\";\\n\\t\\tvar growHelperScript = \\\"/master/hacking/helpers/grow_target_loop-ns1.script\\\";\\n\\t\\tvar weakenHelperScript = \\\"/master/hacking/helpers/weaken_target_loop-ns1.script\\\";\\n\\n\\t\\tvar minRequiredRam = ns.getScriptRam(hackHelperScript) + ns.getScriptRam(growHelperScript) + ns.getScriptRam(weakenHelperScript);\\n\\n\\t\\ttry {\\n\\t\\t\\tif ((portBreakingLevel >= deployServer.numPortsRequired && deployServer.ram >= minRequiredRam && deployServer.isHome === false) || deployServer.isPserv) {\\n\\t\\t\\t\\tns.print(\\\"Preparing to deploy the hack bots to: \\\" + deployServer.name);\\n\\t\\t\\t\\tgra.getRootAccess(ns, deployServer.name);\\n\\n\\t\\t\\t\\t// ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n\\t\\t\\t\\twhile (ns.killall(deployServer.name)) {\\n\\t\\t\\t\\t\\tns.print(\\\"Sleeping after trying to killall on \\\" + deployServer.name);\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar freeRam = gsr.getServerRamObject(ns, deployServer.name).free;\\n\\t\\t\\t\\t// Algorithm v2\\n\\t\\t\\t\\t// Weakening and hacking should make up at least 10% of the RAM pool, the remainder goes towards growing\\n\\t\\t\\t\\tvar ramPerWeakenHelperThread = ns.getScriptRam(weakenHelperScript);\\n\\t\\t\\t\\tvar weakenReservedRamMinimumModifier = 0.15;\\n\\t\\t\\t\\tvar weakenMinThreads = 1;\\n\\t\\t\\t\\tvar weakenRamMinRequirement = freeRam * weakenReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar weakenThreads = Math.ceil(weakenRamMinRequirement / ramPerWeakenHelperThread);\\n\\t\\t\\t\\tif (weakenThreads < weakenMinThreads) {\\n\\t\\t\\t\\t\\tweakenThreads = weakenMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar weakenRamUsage = weakenThreads * ramPerWeakenHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerHackHelperThread = ns.getScriptRam(hackHelperScript);\\n\\t\\t\\t\\tvar hackReservedRamMinimumModifier = 0.10;\\n\\t\\t\\t\\tvar hackMaxStealPercent = 0.01;\\n\\t\\t\\t\\tvar hackPercentPerThread = ns.hackAnalyzePercent(hackTargetServer)/100;\\n\\t\\t\\t\\tvar hackMaxThreadsRaw = hackMaxStealPercent/hackPercentPerThread;\\n\\t\\t\\t\\tvar hackMaxThreads = Math.floor(hackMaxThreadsRaw);\\n\\t\\t\\t\\tvar hackMinThreads = 1;\\n\\t\\t\\t\\tvar hackRamMinRequirement = freeRam * hackReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar hackThreads = Math.ceil(hackRamMinRequirement / ramPerHackHelperThread);\\n\\t\\t\\t\\tif (hackThreads > hackMaxThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMaxThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (hackThreads < hackMinThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar hackRamUsage = hackThreads * ramPerHackHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerGrowHelperThread = ns.getScriptRam(growHelperScript);\\n\\t\\t\\t\\tvar growRamPool = freeRam - (weakenRamUsage + hackRamUsage);\\n\\t\\t\\t\\tvar growThreads = Math.floor(growRamPool / ramPerGrowHelperThread);\\n\\n\\t\\t\\t\\tns.print(\\\"=========== Thread Count Dump ===========\\\");\\n\\t\\t\\t\\tns.print(\\\"weakenThreads: \\\" + weakenThreads);\\n\\t\\t\\t\\tns.print(\\\"growThreads: \\\" + growThreads);\\n\\t\\t\\t\\tns.print(\\\"hackThreads: \\\" + hackThreads);\\n\\t\\t\\t\\tns.print(\\\"============= End Debug Dump ============\\\");\\n\\n\\t\\t\\t\\t// Copy the scripts\\n\\t\\t\\t\\tns.print(\\\"Copying scripts...\\\");\\n\\t\\t\\t\\tns.scp(hackHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(growHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(weakenHelperScript, \\\"home\\\", deployServer.name);\\n\\n\\t\\t\\t\\t// Run the scripts\\n\\t\\t\\t\\tns.print(\\\"Launching the hack bots!\\\");\\n\\t\\t\\t\\tawait ns.exec(weakenHelperScript, deployServer.name, weakenThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(growHelperScript, deployServer.name, growThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(hackHelperScript, deployServer.name, hackThreads, hackTargetServer, ns.getServerMaxMoney(hackTargetServer));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch(error)\\n\\t\\t{\\n\\t\\t\\tns.tprint(error);\\n\\t\\t\\tns.tprint(\\\"Likely a server stopped existing\\\");\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/deployHackBots-ns2.js\",\"module\":{},\"ramUsage\":7.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        scanFrequency : ns.args[0],\\n        mode : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    if (sArgs.mode === \\\"print\\\") {\\n        await monitorModePrint(ns, sArgs.scanFrequency);\\n    }\\n    else if (sArgs.mode === \\\"tprint\\\") {\\n        await monitorModeTPrint(ns, sArgs.scanFrequency);\\n    }\\n    else {\\n        await monitorModePrint(ns);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function monitorModePrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.print(\\\"scanTarget: \\\" + scanTarget);\\n            ns.print(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.print(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\nasync function monitorModeTPrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.tprint(\\\"scanTarget: \\\" + scanTarget);\\n            ns.tprint(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.tprint(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/monitor-ns2.js\",\"module\":{},\"ramUsage\":3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    \\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    while(true) {\\n        await recruitmentMembers(ns);\\n        updateGangMemberCombatEquipment(ns);\\n        updateGangMemberHackingEquipment(ns);\\n        updateGangMemberTasks(ns);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function recruitmentMembers(ns) {\\n    while (ns.gang.canRecruitMember()) {\\n        var currentDateTime = new Date();\\n        // $TODO: Someday name a gang member \\\"Android-function getMilliseconds() { [native code] }\\\", for the funny\\n        var newGangMemberName = \\\"Android-\\\" + currentDateTime.getTime();\\n        ns.gang.recruitMember(newGangMemberName);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nfunction updateGangMemberCombatEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === false) {\\n        ns.print(\\\"Buying combat equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n\\n            if(ns.gang.getEquipmentType(equipment) !== \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberHackingEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === true) {\\n        ns.print(\\\"Buying hacking equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n    \\n            if(ns.gang.getEquipmentType(equipment) === \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberTasks(ns) {\\n    // Determine if the gang is a hacking gang or not\\n\\n    if (ns.gang.getGangInformation().isHacking === true) {\\n        assignHackingTasks(ns);\\n    }\\n    else if (ns.gang.getGangInformation().isHacking === false) {\\n        assignCombatTasks(ns);\\n    }\\n}\\n\\nfunction assignHackingTasks(ns) {\\n\\n}\\n\\nfunction assignCombatTasks(ns) {\\n    // Task will be \\\"Unassigned\\\" if not assigned\\n    // Build a list of gang members\\n    var gangMemberNamesArray = ns.gang.getMemberNames()\\n\\n    // iterate thru the gang members\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMemberName = gangMemberNamesArray[i];\\n        var gangMemberTask = getMemberInformation(gangMemberName).task;\\n        // if \\\"Unassigned\\\" set to \\\"Vigalante Justice\\\"\\n        if (gangMemberTask === \\\"Unassigned\\\") {\\n            setMemberTask(gangMemberName, \\\"Vigalante Justice\\\")\\n        }\\n\\n    }    \\n}\\n\\nfunction purchaseEquipmentForAllGangMembers(ns, equipment) {\\n    var gangMemberNamesArray = ns.gang.getMemberNames();\\n\\n    var equipmentCost = ns.gang.getEquipmentCost(equipment);\\n\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMember = gangMemberNamesArray[i];\\n        var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.gangEquipment)\\n\\n        if(availableMoney > equipmentCost) {\\n            ns.gang.purchaseEquipment(gangMember, equipment);\\n        }\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/gang/godfather-ns2.js\",\"module\":{},\"ramUsage\":20.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nexport var spendLimits = {\\n    newServer : 0.70,\\n    hacknet : 0.20,\\n    gangEquipment : 0.10,\\n};\\n\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nexport function getAvailableMoney(ns, spendLimit) {\\n    var myMoney = getMyMoney(ns);\\n    var availableMoney = myMoney * spendLimit;\\n\\n    return availableMoney;\\n}\\n\\nexport function getSpendLimits() {\\n    return spendLimits;\\n}\\n\\nexport async function async_waitForEnoughMoney(ns, spendLimitModifier, desiredMoney) {\\n    var availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n\\n    while (availableMoney < desiredMoney) {\\n        debugDumpMoneyStats(ns, availableMoney, desiredMoney);\\n        await ns.sleep(10 * 1000);\\n        availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n    }\\n}\\n\\nexport function debugDumpMoneyStats(ns, availableMoney, desiredMoney) {\\n    var percentageOfNeeded = (availableMoney/desiredMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! \\\" +\\n        \\\"Available: \\\" + ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        \\\"Desired: \\\" + ns.nFormat(desiredMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/wallet-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n\\n\\nexport async function main(ns) {\\n    var someNumber = 123456789.98765431;\\n    \\n    ns.tprint(ns.nFormat(wallet.spendLimits.newServer, \\\"0,0.00\\\"));\\n    ns.tprint(ns.nFormat(someNumber, \\\"0,0.00\\\"));\\n    \\n    ns.tprint(ns.heart.break());\\n    \\n    \\n    ns.tprint(\\\"Done!\\\");\\n}\",\"filename\":\"/temp/ns2_scratch.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackTarget : ns.args[0],\\n        desiredStartingRam : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n\\n    var desiredRam = sArgs.desiredStartingRam;\\n    \\n    while(desiredRam <= ns.getPurchasedServerMaxRam()) {\\n        await fillEmptyServerSlots(ns, sArgs, desiredRam);\\n        await upgradeExisitngServers(ns, sArgs, desiredRam);\\n        desiredRam = incrementDesiredRam(desiredRam, sVars.ramIncreaseFactor);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function fillEmptyServerSlots(ns, sArgs, desiredRam) {\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        ns.print(\\\"DEBUG: Buying at \\\" + desiredRam + \\\"GB\\\");\\n\\n        // create a server name\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n\\n        // Attempt to buy a server\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n        var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n        // Run setup script on the new server\\n        await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function upgradeExisitngServers(ns, sArgs, desiredRam) {\\n    ns.print(\\\"DEBUG: Upgrading to \\\" + desiredRam + \\\"GB\\\");\\n\\n    // call get purchased servers\\n    var purchasedServers = ns.getPurchasedServers();\\n\\n    for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++) {\\n        var oldHostname = purchasedServers[servIndex];\\n        ns.print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n\\n        var oldHostRam = ns.getServerRam(oldHostname)[0];\\n\\n        if (oldHostRam < desiredRam) {\\n            // Wait for enough money\\n            await waitForEnoughMoney(ns, desiredRam);\\n\\n            // delete the old server\\n            await deleteOldServer(ns, oldHostname);\\n\\n            // buy a server\\n            var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n            var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n            ns.print(\\\"DEBUG: New server named: \\\" + newHostname);\\n\\n            // Run setup script on the new server\\n            await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n        }\\n    }\\n}\\n\\nasync function deleteOldServer(ns, server) {\\n    while(ns.serverExists(server)) {\\n        // kill all scripts on the old server\\n        // ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n        while (ns.killall(server)) {\\n            ns.print(\\\"Sleeping after trying to killall on \\\" + server);\\n            await ns.sleep(1000);\\n        }\\n    \\n        // delete the old server\\n        ns.print(\\\"DEBUG: Deleting: \\\" + server);\\n        ns.deleteServer(server);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function purchaseNewServer(ns, desiredServerName, desiredRam) {\\n    var newHostname = \\\"\\\";\\n\\n    while (newHostname === \\\"\\\") {\\n        // Wait for enough money\\n        await waitForEnoughMoney(ns, desiredRam);\\n\\n        newHostname = ns.purchaseServer(desiredServerName, desiredRam);\\n        await ns.sleep(1000);\\n    }\\n\\n    return newHostname;\\n}\\n\\nasync function waitForEnoughMoney(ns, desiredRam) {\\n    while (wallet.getAvailableMoney(ns, wallet.spendLimits.newServer) < ns.getPurchasedServerCost(desiredRam)) {\\n        debugDumpMoneyStats(ns, desiredRam);\\n        await ns.sleep(60 * 1000);\\n    }\\n}\\n\\nfunction incrementDesiredRam(currentDesiredRam, ramMultiplier) {\\n    var newDesiredRam = currentDesiredRam * ramMultiplier;\\n\\n    return newDesiredRam;\\n}\\n\\nfunction debugDumpMoneyStats(ns, desiredRam) {\\n    var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.newServer);\\n    var neededMoney = ns.getPurchasedServerCost(desiredRam);\\n    var percentageOfNeeded = (availableMoney/neededMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! Available / Needed / %: \\\" +\\n        ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(neededMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/buy_server/buy_server-ns2.js\",\"module\":{},\"ramUsage\":10.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar e_contractTypes = {\\n\\tfindLargestPrimeFactor : \\\"Find Largest Prime Factor\\\",\\n\\tsubarrayWithMaximumSum : \\\"Subarray with Maximum Sum\\\",\\n\\ttotalWaysToSum : \\\"Total Ways to Sum\\\",\\n\\tspiralizeMatrix : \\\"Spiralize Matrix\\\",\\n\\tarrayJumpingGame : \\\"Array Jumping Game\\\",\\n\\tmergeOverlappingIntervals : \\\"Merge Overlapping Intervals\\\",\\n\\tgenerateIPAddresses : \\\"Generate IP Addresses\\\",\\n\\talgorithmicStockTraderI : \\\"Algorithmic Stock Trader I\\\",\\n\\talgorithmicStockTraderII : \\\"Algorithmic Stock Trader II\\\",\\n\\talgorithmicStockTraderIII : \\\"Algorithmic Stock Trader III\\\",\\n\\talgorithmicStockTraderIV : \\\"Algorithmic Stock Trader IV\\\",\\n\\tminimumPathSumInATriangle : \\\"Minimum Path Sum in a Triangle\\\",\\n\\tuniquePathsInAGridI : \\\"Unique Paths in a Grid I\\\",\\n\\tuniquePathsInAGridII : \\\"Unique Paths in a Grid II\\\",\\n\\tsanitizeParenthesesInExpression : \\\"Sanitize Parentheses in Expression\\\",\\n\\tfindAllValidMathExpressions : \\\"Find All Valid Math Expressions\\\",\\n};\\n\\nvar e_allowedToSolve = {\\n\\tfindLargestPrimeFactor : true,\\n\\tsubarrayWithMaximumSum : true,\\n\\ttotalWaysToSum : true,\\n\\tspiralizeMatrix : true,\\n\\tarrayJumpingGame : true,\\n\\tmergeOverlappingIntervals : true,\\n\\tgenerateIPAddresses : true,\\n\\talgorithmicStockTraderI : true,\\n\\talgorithmicStockTraderII : true,\\n\\talgorithmicStockTraderIII : true,\\n\\talgorithmicStockTraderIV : true,\\n\\tminimumPathSumInATriangle : true,\\n\\tuniquePathsInAGridI : true,\\n\\tuniquePathsInAGridII : true,\\n\\tsanitizeParenthesesInExpression : true,\\n\\tfindAllValidMathExpressions : true,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile(true) {\\n\\t\\tawait async_findContractsAndLaunchSolver(ns);\\n\\n\\t\\tawait ns.sleep(60*1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function async_findContractsAndLaunchSolver(ns) {\\n\\t// Build a server list\\n\\tvar serverListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\n\\t// Iterate thru the list of servers\\n\\tfor(var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i].name;\\n\\n\\t\\t// Do an ls() on the server\\n\\t\\tvar lsResults = ns.ls(server, \\\".cct\\\");\\n\\n\\t\\t// If there are results matching the contract extension, spit info out to the terminal window\\n\\t\\tif(lsResults.length > 0) {\\n\\t\\t\\tfor(var j=0; j<lsResults.length; j++) {\\n\\t\\t\\t\\tvar contractName = lsResults[j];\\n\\t\\t\\t\\tlaunchRelevantSolver(ns, contractName, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction launchRelevantSolver (ns, contractName, server) {\\n\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\n\\t// buy the right thing\\n\\tswitch(contractType){\\n\\t\\tcase e_contractTypes.algorithmicStockTraderI:\\n\\t\\t\\tsolver_algorithmicStockTraderI(ns, contractName, server);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(\\\"No solver for type [\\\" + contractType + \\\"] on server [\\\" + server + \\\"] for contract [\\\" + contractName + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_findLargestPrimeFactor(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_subarrayWithMaximumSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_totalWaysToSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_spiralizeMatrix(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_arrayJumpingGame(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_mergeOverlappingIntervals(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_generateIPAddresses(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderI(ns, contractName, server) {\\n\\t/* ===== Problem Definition ====================================================================================================== **\\n\\tYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\t\\tEx. 169,81,124,99,97,182,81,176,32,172,135\\n\\tDetermine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once).\\n\\tIf no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\n\\t** =============================================================================================================================== */\\n\\tif (e_allowedToSolve.algorithmicStockTraderI) {\\n\\t\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\t\\tvar contractData = ns.codingcontract.getData(contractName, server);\\n\\t\\n\\t\\tvar stockPriceList = contractData;\\n\\t\\tvar maxBuyIndex = stockPriceList.length - 1;\\n\\t\\tvar maxSellIndex = stockPriceList.length;\\n\\t\\n\\t\\tvar bestProfit = 0;\\n\\t\\n\\t\\tfor(var buyPriceIndex = 0; buyPriceIndex < maxBuyIndex; buyPriceIndex++) {\\n\\t\\t\\tfor(var sellPriceIndex = buyPriceIndex + 1; sellPriceIndex < maxSellIndex; sellPriceIndex++) {\\n\\t\\t\\t\\tvar buyPrice = stockPriceList[buyPriceIndex];\\n\\t\\t\\t\\tvar sellPrice = stockPriceList[sellPriceIndex];\\n\\t\\t\\t\\tvar testProfit = sellPrice - buyPrice;\\n\\t\\n\\t\\t\\t\\tif (testProfit > bestProfit) {\\n\\t\\t\\t\\t\\tbestProfit = testProfit;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\tvar result = ns.codingcontract.attempt(bestProfit, contractName, server, {returnReward : true});\\n\\n\\t\\tif(result === false || result === \\\"\\\") {\\n\\t\\t\\te_allowedToSolve.algorithmicStockTraderI = false;\\n\\t\\t\\tns.tprint(\\\"CONTRACT FAILED: Type: [\\\" + contractType + \\\"], FileName: [\\\" + contractName + \\\"], Server: [\\\" + server + \\\"]\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.tprint(\\\"Completed Completed: Type: [\\\" + contractType + \\\"], fileName: [\\\" + contractName + \\\"], Server [\\\" + server + \\\"]\\\");\\n\\t\\t\\tns.tprint(result);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"Solver disabled for type: [\\\" + contractType + \\\"]\\\");\\n\\t\\tns.tprint(\\\"There is a contract of this type named [\\\" + contractName + \\\"] on server [\\\" + server + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_algorithmicStockTraderII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIV(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_minimumPathSumInATriangle(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridI(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_sanitizeParenthesesInExpression(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_findAllValidMathExpressions(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/contracts/foreman-ns2.js\",\"module\":\"\",\"ramUsage\":22.95,\"server\":\"60.8.2.2\"}}],\"serversOnNetwork\":[\"11.5.3.6\",\"53.0.8.1\",\"17.5.7.5\",\"77.6.0.2\",\"95.8.6.0\",\"77.0.1.5\",\"67.2.9.2\",\"1.4.4.8\",\"19.3.7.5\",\"66.5.9.6\",\"28.0.8.9\",\"72.9.0.6\",\"14.0.1.5\",\"9.2.0.7\",\"7.3.3.4\",\"15.8.0.9\",\"67.8.3.7\",\"90.3.4.2\",\"68.7.9.4\",\"47.3.0.9\",\"48.7.6.3\",\"71.8.6.7\",\"40.5.1.2\",\"80.8.9.4\",\"7.0.5.5\",\"36.7.0.6\",\"94.6.3.4\",\"64.2.6.7\",\"55.1.3.2\",\"16.0.1.6\",\"26.5.9.3\",\"42.8.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"// TODO Create a file copying script, assuming the libraries allow it\\n// TODO Create a script for buying up hacknet nodes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/configs/hack_target.txt\",\"text\":\"harakiri-sushi\"}}],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"37.6.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"37.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"8.5.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":12934651249.2,\"moneyMax\":64673256246,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1373,\"serverGrowth\":99}},\"43.4.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"43.4.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"67.8.0.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":9369141898,\"moneyMax\":46845709490,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1261,\"serverGrowth\":99}},\"95.0.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"95.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"22.1.1.9\",\"72.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":73,\"hackDifficulty\":73,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":5945006785.200001,\"moneyMax\":29725033926.000008,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1123,\"serverGrowth\":78}},\"44.0.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"44.0.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":254.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,22]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":717.0566340633281,\"onlineMoneyMade\":0,\"onlineRunningTime\":6910.009999995907,\"ramUsage\":1.75,\"server\":\"44.0.5.4\",\"threads\":22}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,756,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24640.673425085282,\"onlineMoneyMade\":0,\"onlineRunningTime\":6910.009999995907,\"ramUsage\":1.75,\"server\":\"44.0.5.4\",\"threads\":108}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[3253215,135,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4644.571379728375,\"onlineMoneyMade\":3253215,\"onlineRunningTime\":6910.009999995907,\"ramUsage\":1.8,\"server\":\"44.0.5.4\",\"threads\":15}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"44.0.5.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"44.0.5.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"44.0.5.4\"}}],\"serversOnNetwork\":[\"54.1.6.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":7066436052,\"moneyMax\":35332180260,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1117,\"serverGrowth\":82}},\"66.4.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"66.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"New World Order\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"54.1.6.8\",\"68.0.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":5633055710.400001,\"moneyMax\":28165278552,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1020,\"serverGrowth\":87}},\"8.5.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"8.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"54.1.6.8\",\"37.6.7.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":54,\"hackDifficulty\":54,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":4609493721,\"moneyMax\":23047468605,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1160,\"serverGrowth\":74}},\"54.1.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"54.1.6.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":510.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,44]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1434.1132681266563,\"onlineMoneyMade\":0,\"onlineRunningTime\":6913.009999995904,\"ramUsage\":1.75,\"server\":\"54.1.6.8\",\"threads\":44}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,1526,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49737.65561730176,\"onlineMoneyMade\":0,\"onlineRunningTime\":6913.009999995904,\"ramUsage\":1.75,\"server\":\"54.1.6.8\",\"threads\":218}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[4252328,145,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6143.871614588061,\"onlineMoneyMade\":4252328,\"onlineRunningTime\":6913.009999995904,\"ramUsage\":1.8,\"server\":\"54.1.6.8\",\"threads\":29}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"54.1.6.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"54.1.6.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"54.1.6.8\"}}],\"serversOnNetwork\":[\"75.1.1.2\",\"44.0.5.4\",\"66.4.7.9\",\"8.5.4.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":3167641599,\"moneyMax\":15838207995,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1100,\"serverGrowth\":95}},\"11.6.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"11.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"FourSigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.1.1.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":4100431823.6000004,\"moneyMax\":20502159118.000004,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":956,\"serverGrowth\":75}},\"42.4.9.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"42.4.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"6.2.7.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":98,\"hackDifficulty\":98,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":4882175969.400001,\"moneyMax\":24410879847.000004,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1164,\"serverGrowth\":98}},\"67.5.3.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"67.5.3.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1023.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,88]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2868.2265362533126,\"onlineMoneyMade\":0,\"onlineRunningTime\":6928.20999999589,\"ramUsage\":1.75,\"server\":\"67.5.3.7\",\"threads\":88}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,2628,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":85655.67428720121,\"onlineMoneyMade\":0,\"onlineRunningTime\":6928.20999999589,\"ramUsage\":1.75,\"server\":\"67.5.3.7\",\"threads\":438}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[8842068,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13933.714139185127,\"onlineMoneyMade\":8842068,\"onlineRunningTime\":6928.20999999589,\"ramUsage\":1.8,\"server\":\"67.5.3.7\",\"threads\":57}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"67.5.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.5.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.5.3.7\"}}],\"serversOnNetwork\":[\"98.2.4.7\",\"22.1.1.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":89,\"hackDifficulty\":89,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":321603697.40000004,\"moneyMax\":1608018487.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1216,\"serverGrowth\":85}},\"72.2.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"72.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies Assets\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"95.0.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1159,\"serverGrowth\":1}},\"75.1.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"75.1.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.2.4.7\",\"54.1.6.8\",\"11.6.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":208265059.8,\"moneyMax\":1041325299,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":985,\"serverGrowth\":68}},\"26.1.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"26.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.3.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":169097826.4,\"moneyMax\":845489132,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":947,\"serverGrowth\":61}},\"29.7.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"29.7.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.5.5\",\"34.3.7.5\",\"98.2.4.7\",\"15.2.9.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":72,\"hackDifficulty\":72,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":138768572.20000002,\"moneyMax\":693842861.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":905,\"serverGrowth\":65}},\"6.2.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"6.2.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6900.609999995915,\"ramUsage\":1.75,\"server\":\"6.2.7.5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,371,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12092.182328977035,\"onlineMoneyMade\":0,\"onlineRunningTime\":6900.609999995915,\"ramUsage\":1.75,\"server\":\"6.2.7.5\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[834040,32,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.3002348596858,\"onlineMoneyMade\":834040,\"onlineRunningTime\":6900.609999995915,\"ramUsage\":1.8,\"server\":\"6.2.7.5\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"6.2.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"6.2.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"6.2.7.5\"}}],\"serversOnNetwork\":[\"98.2.4.7\",\"42.4.9.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":110520726.60000001,\"moneyMax\":552603633,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":851,\"serverGrowth\":72}},\"78.5.8.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-176049.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,3,2,9,2,10,1,4,10,4,9,10,0,4,10,0,5,9,0,9,0,5,0],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-317753-Netburners.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,5],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"78.5.8.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6897.609999995918,\"ramUsage\":1.75,\"server\":\"78.5.8.7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,371,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12092.182328977035,\"onlineMoneyMade\":0,\"onlineRunningTime\":6897.609999995918,\"ramUsage\":1.75,\"server\":\"78.5.8.7\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[792728,32,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1499.300234859686,\"onlineMoneyMade\":792728,\"onlineRunningTime\":6897.609999995918,\"ramUsage\":1.8,\"server\":\"78.5.8.7\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"78.5.8.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"78.5.8.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"78.5.8.7\"}}],\"serversOnNetwork\":[\"98.2.4.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":89,\"hackDifficulty\":89,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":152749042.20000002,\"moneyMax\":763745211.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":801,\"serverGrowth\":68}},\"15.2.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52868.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,4,10,6,4,1,8,9,1,4,8,5,5,5,6,3,5,0,8,10,9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"15.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.3.8.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":94,\"hackDifficulty\":94,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":188735808.4,\"moneyMax\":943679042,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":912,\"serverGrowth\":85}},\"10.6.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"10.6.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6937.409999995882,\"ramUsage\":1.75,\"server\":\"10.6.5.5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,265,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8637.273092126454,\"onlineMoneyMade\":0,\"onlineRunningTime\":6937.409999995882,\"ramUsage\":1.75,\"server\":\"10.6.5.5\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[959808,40,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1694.8611350587757,\"onlineMoneyMade\":959808,\"onlineRunningTime\":6937.409999995882,\"ramUsage\":1.8,\"server\":\"10.6.5.5\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"10.6.5.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.5.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.5.5\"}}],\"serversOnNetwork\":[\"93.9.1.9\",\"29.7.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":85,\"hackDifficulty\":85,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":239476803.20000002,\"moneyMax\":1197384016,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":813,\"serverGrowth\":86}},\"34.3.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"34.3.7.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6934.409999995884,\"ramUsage\":1.75,\"server\":\"34.3.7.5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,265,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8637.273092126454,\"onlineMoneyMade\":0,\"onlineRunningTime\":6934.409999995884,\"ramUsage\":1.75,\"server\":\"34.3.7.5\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[1429120,40,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1760.0481017918055,\"onlineMoneyMade\":1429120,\"onlineRunningTime\":6934.409999995884,\"ramUsage\":1.8,\"server\":\"34.3.7.5\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"34.3.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.3.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.3.7.5\"}}],\"serversOnNetwork\":[\"29.7.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":74,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":150801205.4,\"moneyMax\":754006027,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":859,\"serverGrowth\":61}},\"98.2.4.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"98.2.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6931.409999995887,\"ramUsage\":1.75,\"server\":\"98.2.4.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,30,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.8045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6931.409999995887,\"ramUsage\":1.75,\"server\":\"98.2.4.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[249792,10,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.2315753484067,\"onlineMoneyMade\":249792,\"onlineRunningTime\":6931.409999995887,\"ramUsage\":1.8,\"server\":\"98.2.4.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"98.2.4.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"98.2.4.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"98.2.4.7\"}}],\"serversOnNetwork\":[\"29.7.8.8\",\"67.5.3.7\",\"75.1.1.2\",\"6.2.7.5\",\"78.5.8.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":105198002.80000001,\"moneyMax\":525990014.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":866,\"serverGrowth\":70}},\"83.5.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"83.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"20.9.9.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":169891337.4,\"moneyMax\":849456687,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":938,\"serverGrowth\":70}},\"52.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"52.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"63.8.0.2\",\"93.9.1.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":63,\"hackDifficulty\":63,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":158319762.20000002,\"moneyMax\":791598811.0000001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":866,\"serverGrowth\":73}},\"19.2.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"19.2.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"31.4.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":86,\"hackDifficulty\":86,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":207223765.8,\"moneyMax\":1036118829,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":912,\"serverGrowth\":56}},\"1.3.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"1.3.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6869.809999995943,\"ramUsage\":1.75,\"server\":\"1.3.8.1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,42,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.9263013936265,\"onlineMoneyMade\":0,\"onlineRunningTime\":6869.809999995943,\"ramUsage\":1.75,\"server\":\"1.3.8.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[73734,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":187.41252935746076,\"onlineMoneyMade\":73734,\"onlineRunningTime\":6869.809999995943,\"ramUsage\":1.8,\"server\":\"1.3.8.1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"1.3.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.3.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.3.8.1\"}}],\"serversOnNetwork\":[\"83.7.9.1\",\"26.1.9.9\",\"15.2.9.6\",\"20.9.9.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":95,\"hackDifficulty\":95,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":194231515.60000002,\"moneyMax\":971157578.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":904,\"serverGrowth\":66}},\"35.5.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"35.5.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"20.9.9.4\",\"94.2.6.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":57,\"hackDifficulty\":57,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":191211213.60000002,\"moneyMax\":956056068.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":788,\"serverGrowth\":65}},\"94.2.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"94.2.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"35.5.3.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":176860231.4,\"moneyMax\":884301157,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":844,\"serverGrowth\":70}},\"20.9.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"20.9.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6863.609999995949,\"ramUsage\":1.75,\"server\":\"20.9.9.4\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,318,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10364.727710551744,\"onlineMoneyMade\":0,\"onlineRunningTime\":6863.609999995949,\"ramUsage\":1.75,\"server\":\"20.9.9.4\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[976072,48,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1890.422035257865,\"onlineMoneyMade\":976072,\"onlineRunningTime\":6863.609999995949,\"ramUsage\":1.8,\"server\":\"20.9.9.4\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.9.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.9.4\"}}],\"serversOnNetwork\":[\"1.3.8.1\",\"83.5.3.5\",\"35.5.3.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":140773821.6,\"moneyMax\":703869108,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":756,\"serverGrowth\":78}},\"93.9.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"93.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Delta One\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"52.6.3.4\",\"10.6.5.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":274494887,\"moneyMax\":1372474435,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":855,\"serverGrowth\":54}},\"83.7.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"83.7.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32.59348336651492,\"onlineMoneyMade\":0,\"onlineRunningTime\":6872.80999999594,\"ramUsage\":1.75,\"server\":\"83.7.9.1\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":456.3087671312089,\"onlineMoneyMade\":0,\"onlineRunningTime\":6872.80999999594,\"ramUsage\":1.75,\"server\":\"83.7.9.1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[75852,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":146.6706751493171,\"onlineMoneyMade\":75852,\"onlineRunningTime\":6872.80999999594,\"ramUsage\":1.8,\"server\":\"83.7.9.1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"83.7.9.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"83.7.9.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"83.7.9.1\"}}],\"serversOnNetwork\":[\"36.5.4.0\",\"1.3.8.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":84,\"hackDifficulty\":84,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":335113421.20000005,\"moneyMax\":1675567106.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":807,\"serverGrowth\":83}},\"46.6.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"46.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"17.2.6.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":68,\"hackDifficulty\":68,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":247379316.4,\"moneyMax\":1236896582,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":790,\"serverGrowth\":80}},\"17.2.6.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"17.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.6.3.6\",\"46.6.7.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":72,\"hackDifficulty\":72,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":265844552,\"moneyMax\":1329222760,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":832,\"serverGrowth\":74}},\"70.6.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"70.6.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6857.409999995954,\"ramUsage\":1.75,\"server\":\"70.6.3.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,36,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1173.365401194537,\"onlineMoneyMade\":0,\"onlineRunningTime\":6857.409999995954,\"ramUsage\":1.75,\"server\":\"70.6.3.6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[146576,6,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":244.45112524886184,\"onlineMoneyMade\":146576,\"onlineRunningTime\":6857.409999995954,\"ramUsage\":1.8,\"server\":\"70.6.3.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"70.6.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.6.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.6.3.6\"}}],\"serversOnNetwork\":[\"13.4.4.2\",\"17.2.6.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":71,\"hackDifficulty\":71,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":216106961.60000002,\"moneyMax\":1080534808.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":810,\"serverGrowth\":71}},\"31.4.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"31.4.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Lexo Corporation\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.5609001990895,\"onlineMoneyMade\":0,\"onlineRunningTime\":6962.209999995859,\"ramUsage\":1.75,\"server\":\"31.4.7.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,208,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6779.444540235104,\"onlineMoneyMade\":0,\"onlineRunningTime\":6962.209999995859,\"ramUsage\":1.75,\"server\":\"31.4.7.1\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[614108,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.8045009954474,\"onlineMoneyMade\":614108,\"onlineRunningTime\":6962.209999995859,\"ramUsage\":1.8,\"server\":\"31.4.7.1\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"31.4.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"31.4.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"31.4.7.1\"}}],\"serversOnNetwork\":[\"50.4.2.0\",\"19.2.9.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":154356691.8,\"moneyMax\":771783459.0000001,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":711,\"serverGrowth\":64}},\"36.5.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"36.5.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6876.0099999959375,\"ramUsage\":1.75,\"server\":\"36.5.4.0\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6876.0099999959375,\"ramUsage\":1.75,\"server\":\"36.5.4.0\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[376042,16,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":570.3859589140111,\"onlineMoneyMade\":376042,\"onlineRunningTime\":6876.0099999959375,\"ramUsage\":1.8,\"server\":\"36.5.4.0\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"36.5.4.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.5.4.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.5.4.0\"}}],\"serversOnNetwork\":[\"65.3.5.7\",\"83.7.9.1\",\"13.4.4.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":60,\"hackDifficulty\":60,\"manuallyHacked\":false,\"minDifficulty\":20,\"moneyAvailable\":131912699.80000001,\"moneyMax\":659563499.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":493,\"serverGrowth\":46}},\"11.8.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"11.8.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.5609001990895,\"onlineMoneyMade\":0,\"onlineRunningTime\":6946.809999995873,\"ramUsage\":1.75,\"server\":\"11.8.2.0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,130,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4237.15283764694,\"onlineMoneyMade\":0,\"onlineRunningTime\":6946.809999995873,\"ramUsage\":1.75,\"server\":\"11.8.2.0\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[322712,12,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":651.8696673302984,\"onlineMoneyMade\":322712,\"onlineRunningTime\":6946.809999995873,\"ramUsage\":1.8,\"server\":\"11.8.2.0\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"11.8.2.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"11.8.2.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"11.8.2.0\"}}],\"serversOnNetwork\":[\"46.1.5.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":68,\"hackDifficulty\":68,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":143120769,\"moneyMax\":715603845,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":577,\"serverGrowth\":54}},\"12.7.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"12.7.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6851.40999999596,\"ramUsage\":1.75,\"server\":\"12.7.8.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,42,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.9263013936265,\"onlineMoneyMade\":0,\"onlineRunningTime\":6851.40999999596,\"ramUsage\":1.75,\"server\":\"12.7.8.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[118820,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.56090019908947,\"onlineMoneyMade\":118820,\"onlineRunningTime\":6851.40999999596,\"ramUsage\":1.8,\"server\":\"12.7.8.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"12.7.8.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.7.8.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.7.8.2\"}}],\"serversOnNetwork\":[\"65.3.5.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":71,\"hackDifficulty\":71,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":67163514.8,\"moneyMax\":335817574,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":407,\"serverGrowth\":35}},\"58.4.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"58.4.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University Network\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.5609001990895,\"onlineMoneyMade\":0,\"onlineRunningTime\":6971.609999995851,\"ramUsage\":1.75,\"server\":\"58.4.4.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,208,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6779.444540235104,\"onlineMoneyMade\":0,\"onlineRunningTime\":6971.609999995851,\"ramUsage\":1.75,\"server\":\"58.4.4.1\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[660824,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":977.8045009954476,\"onlineMoneyMade\":660824,\"onlineRunningTime\":6971.609999995851,\"ramUsage\":1.8,\"server\":\"58.4.4.1\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"58.4.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"58.4.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"58.4.4.1\"}}],\"serversOnNetwork\":[\"91.3.9.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":44482559.800000004,\"moneyMax\":222412799,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":423,\"serverGrowth\":37}},\"57.4.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"57.4.8.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology Network\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6879.009999995935,\"ramUsage\":1.75,\"server\":\"57.4.8.2\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,371,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12092.182328977035,\"onlineMoneyMade\":0,\"onlineRunningTime\":6879.009999995935,\"ramUsage\":1.75,\"server\":\"57.4.8.2\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[946376,40,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1694.8611350587757,\"onlineMoneyMade\":946376,\"onlineRunningTime\":6879.009999995935,\"ramUsage\":1.8,\"server\":\"57.4.8.2\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"57.4.8.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"57.4.8.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"57.4.8.2\"}}],\"serversOnNetwork\":[\"51.0.1.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":191005458.60000002,\"moneyMax\":955027293.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":749,\"serverGrowth\":83}},\"97.7.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"97.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6968.4099999958535,\"ramUsage\":1.75,\"server\":\"97.7.3.5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,104,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.722270117552,\"onlineMoneyMade\":0,\"onlineRunningTime\":6968.4099999958535,\"ramUsage\":1.75,\"server\":\"97.7.3.5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[261678,12,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.60550881446636,\"onlineMoneyMade\":261678,\"onlineRunningTime\":6968.4099999958535,\"ramUsage\":1.8,\"server\":\"97.7.3.5\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"97.7.3.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.7.3.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.7.3.5\"}}],\"serversOnNetwork\":[\"91.3.9.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":62,\"hackDifficulty\":62,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":51223081.800000004,\"moneyMax\":256115409,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":437,\"serverGrowth\":44}},\"65.3.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"65.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"51.0.1.3\",\"36.5.4.0\",\"12.7.8.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":77,\"hackDifficulty\":77,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":97612297.4,\"moneyMax\":488061487,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":568,\"serverGrowth\":61}},\"46.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"46.1.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":358.5283170316641,\"onlineMoneyMade\":0,\"onlineRunningTime\":6949.80999999587,\"ramUsage\":1.75,\"server\":\"46.1.5.7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,265,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8637.273092126454,\"onlineMoneyMade\":0,\"onlineRunningTime\":6949.80999999587,\"ramUsage\":1.75,\"server\":\"46.1.5.7\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[680792,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.926301393627,\"onlineMoneyMade\":680792,\"onlineRunningTime\":6949.80999999587,\"ramUsage\":1.8,\"server\":\"46.1.5.7\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.1.5.7\"}}],\"serversOnNetwork\":[\"53.6.3.6\",\"11.8.2.0\",\"63.8.0.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":66,\"hackDifficulty\":22,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":503419924.0000001,\"moneyMax\":503419924.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":403,\"serverGrowth\":32}},\"51.0.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"51.0.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6882.009999995932,\"ramUsage\":1.75,\"server\":\"51.0.1.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6882.009999995932,\"ramUsage\":1.75,\"server\":\"51.0.1.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[212230,6,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.23157534840664,\"onlineMoneyMade\":212230,\"onlineRunningTime\":6882.009999995932,\"ramUsage\":1.8,\"server\":\"51.0.1.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"51.0.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.0.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.0.1.3\"}}],\"serversOnNetwork\":[\"71.0.8.0\",\"57.4.8.2\",\"65.3.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":35,\"hackDifficulty\":12,\"manuallyHacked\":false,\"minDifficulty\":12,\"moneyAvailable\":183505666.00000003,\"moneyMax\":183505666.00000003,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":304,\"serverGrowth\":45}},\"43.1.5.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"43.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"55.4.9.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":64,\"hackDifficulty\":21,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":222369579,\"moneyMax\":222369579,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":342,\"serverGrowth\":45}},\"91.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"91.3.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Netlink Technologies\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6974.609999995848,\"ramUsage\":1.75,\"server\":\"91.3.9.5\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,48,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.487201592716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6974.609999995848,\"ramUsage\":1.75,\"server\":\"91.3.9.5\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[50576,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138.5223043076884,\"onlineMoneyMade\":50576,\"onlineRunningTime\":6974.609999995848,\"ramUsage\":1.8,\"server\":\"91.3.9.5\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"91.3.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"91.3.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"91.3.9.5\"}}],\"serversOnNetwork\":[\"40.5.6.6\",\"58.4.4.1\",\"97.7.3.5\",\"50.4.2.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":71,\"hackDifficulty\":198.96800000000002,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":395,\"serverGrowth\":72}},\"53.6.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418133.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[6,15,9,24,24,4,39,16],[2,30,26,3,32,9,47,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-836357.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((((()\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"53.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"41.3.3.9\",\"46.1.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":48,\"hackDifficulty\":48,\"manuallyHacked\":false,\"minDifficulty\":16,\"moneyAvailable\":15662266.200000001,\"moneyMax\":78311331,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":270,\"serverGrowth\":61}},\"11.5.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"11.5.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Food N Stuff Supermarket\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":7005.00999999582,\"ramUsage\":1.75,\"server\":\"11.5.3.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,42,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.9263013936265,\"onlineMoneyMade\":0,\"onlineRunningTime\":7005.00999999582,\"ramUsage\":1.75,\"server\":\"11.5.3.6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[143998,6,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":236.30275440723318,\"onlineMoneyMade\":143998,\"onlineRunningTime\":7005.00999999582,\"ramUsage\":1.8,\"server\":\"11.5.3.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"11.5.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"11.5.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"11.5.3.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":3,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":880950.0947839698,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"53.0.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"53.0.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":7002.009999995823,\"ramUsage\":1.75,\"server\":\"53.0.8.1\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,42,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.9263013936265,\"onlineMoneyMade\":0,\"onlineRunningTime\":7002.009999995823,\"ramUsage\":1.75,\"server\":\"53.0.8.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[112182,5,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":220.0060127239757,\"onlineMoneyMade\":112182,\"onlineRunningTime\":7002.009999995823,\"ramUsage\":1.8,\"server\":\"53.0.8.1\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"53.0.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.0.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.0.8.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":10,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"17.5.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"17.5.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6999.009999995826,\"ramUsage\":1.75,\"server\":\"17.5.7.5\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,48,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.487201592716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6999.009999995826,\"ramUsage\":1.75,\"server\":\"17.5.7.5\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[93743,3,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":171.11578767420326,\"onlineMoneyMade\":93743,\"onlineRunningTime\":6999.009999995826,\"ramUsage\":1.8,\"server\":\"17.5.7.5\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"17.5.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.5.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.5.7.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"37.4.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-524167.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,27,11,27,22,39,18],[26,16,10,38,1,40,42],[43,8,23,10,27,16,24],[47,22,30,39,19,31,44],[42,24,48,8,22,23,40],[1,4,8,2,31,50,35],[38,23,30,23,16,42,21],[23,42,40,39,35,49,44],[8,36,43,40,47,25,38],[3,29,19,20,11,12,10],[24,29,38,27,10,43,31]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"37.4.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6980.809999995842,\"ramUsage\":1.75,\"server\":\"37.4.7.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,104,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3389.722270117552,\"onlineMoneyMade\":0,\"onlineRunningTime\":6980.809999995842,\"ramUsage\":1.75,\"server\":\"37.4.7.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[338986,12,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":488.9022504977237,\"onlineMoneyMade\":338986,\"onlineRunningTime\":6980.809999995842,\"ramUsage\":1.8,\"server\":\"37.4.7.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"37.4.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"37.4.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"37.4.7.1\"}}],\"serversOnNetwork\":[\"95.8.6.0\",\"40.5.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"41.4.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"41.4.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6956.009999995865,\"ramUsage\":1.75,\"server\":\"41.4.7.9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,36,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1173.365401194537,\"onlineMoneyMade\":0,\"onlineRunningTime\":6956.009999995865,\"ramUsage\":1.75,\"server\":\"41.4.7.9\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[64523,2,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":138.5223043076884,\"onlineMoneyMade\":64523,\"onlineRunningTime\":6956.009999995865,\"ramUsage\":1.8,\"server\":\"41.4.7.9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"41.4.7.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"41.4.7.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"41.4.7.9\"}}],\"serversOnNetwork\":[\"95.8.6.0\",\"41.3.3.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":9.243999999999994,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":2687060,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"40.5.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"40.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6977.809999995845,\"ramUsage\":1.75,\"server\":\"40.5.6.6\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6977.809999995845,\"ramUsage\":1.75,\"server\":\"40.5.6.6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[298520,12,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.60550881446625,\"onlineMoneyMade\":298520,\"onlineRunningTime\":6977.809999995845,\"ramUsage\":1.8,\"server\":\"40.5.6.6\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"40.5.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"40.5.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"40.5.6.6\"}}],\"serversOnNetwork\":[\"37.4.7.1\",\"91.3.9.5\",\"48.2.9.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"55.4.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"55.4.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.5609001990895,\"onlineMoneyMade\":0,\"onlineRunningTime\":6990.009999995834,\"ramUsage\":1.75,\"server\":\"55.4.9.6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,208,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6779.444540235104,\"onlineMoneyMade\":0,\"onlineRunningTime\":6990.009999995834,\"ramUsage\":1.75,\"server\":\"55.4.9.6\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[576828,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.2110176289325,\"onlineMoneyMade\":576828,\"onlineRunningTime\":6990.009999995834,\"ramUsage\":1.8,\"server\":\"55.4.9.6\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"55.4.9.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"55.4.9.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"55.4.9.6\"}}],\"serversOnNetwork\":[\"25.6.4.6\",\"43.1.5.9\",\"92.3.7.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"77.6.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"77.6.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6996.009999995828,\"ramUsage\":1.75,\"server\":\"77.6.0.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,48,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.487201592716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6996.009999995828,\"ramUsage\":1.75,\"server\":\"77.6.0.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[146643,5,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":220.0060127239757,\"onlineMoneyMade\":146643,\"onlineRunningTime\":6996.009999995828,\"ramUsage\":1.8,\"server\":\"77.6.0.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"77.6.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"77.6.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"77.6.0.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"25.6.4.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"95.8.6.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"95.8.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6983.8099999958395,\"ramUsage\":1.75,\"server\":\"95.8.6.0\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,48,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.487201592716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6983.8099999958395,\"ramUsage\":1.75,\"server\":\"95.8.6.0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[97810,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":187.4125293574608,\"onlineMoneyMade\":97810,\"onlineRunningTime\":6983.8099999958395,\"ramUsage\":1.8,\"server\":\"95.8.6.0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"95.8.6.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.8.6.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.8.6.0\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"37.4.7.1\",\"41.4.7.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"71.0.8.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"71.0.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6885.009999995929,\"ramUsage\":1.75,\"server\":\"71.0.8.0\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6885.009999995929,\"ramUsage\":1.75,\"server\":\"71.0.8.0\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[255286,12,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472.60550881446625,\"onlineMoneyMade\":255286,\"onlineRunningTime\":6885.009999995929,\"ramUsage\":1.8,\"server\":\"71.0.8.0\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"71.0.8.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"71.0.8.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"71.0.8.0\"}}],\"serversOnNetwork\":[\"66.4.1.5\",\"51.0.1.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":20,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":4800000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"66.4.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"66.4.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6888.209999995926,\"ramUsage\":1.75,\"server\":\"66.4.1.5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6888.209999995926,\"ramUsage\":1.75,\"server\":\"66.4.1.5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[480292,14,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":537.7924755474962,\"onlineMoneyMade\":480292,\"onlineRunningTime\":6888.209999995926,\"ramUsage\":1.8,\"server\":\"66.4.1.5\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"66.4.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.4.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.4.1.5\"}}],\"serversOnNetwork\":[\"77.0.1.5\",\"71.0.8.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"41.3.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"41.3.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6953.0099999958675,\"ramUsage\":1.75,\"server\":\"41.3.3.9\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,65,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2118.57641882347,\"onlineMoneyMade\":0,\"onlineRunningTime\":6953.0099999958675,\"ramUsage\":1.75,\"server\":\"41.3.3.9\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[316848,14,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":521.4957338642388,\"onlineMoneyMade\":316848,\"onlineRunningTime\":6953.0099999958675,\"ramUsage\":1.8,\"server\":\"41.3.3.9\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"41.3.3.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"41.3.3.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"41.3.3.9\"}}],\"serversOnNetwork\":[\"41.4.7.9\",\"53.6.3.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":29,\"hackDifficulty\":29,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":12467979.8,\"moneyMax\":62339899,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":219,\"serverGrowth\":30}},\"92.3.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"92.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"55.4.9.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":42,\"hackDifficulty\":42,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":8487609.4,\"moneyMax\":42438047,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":261,\"serverGrowth\":31}},\"77.0.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"77.0.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6891.4099999959235,\"ramUsage\":1.75,\"server\":\"77.0.1.5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,91,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2966.006986352858,\"onlineMoneyMade\":0,\"onlineRunningTime\":6891.4099999959235,\"ramUsage\":1.75,\"server\":\"77.0.1.5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[181974,8,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":374.8250587149216,\"onlineMoneyMade\":181974,\"onlineRunningTime\":6891.4099999959235,\"ramUsage\":1.8,\"server\":\"77.0.1.5\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"77.0.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"77.0.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"77.0.1.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"66.4.1.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":10.076,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":19474878,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"63.8.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"63.8.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6943.609999995876,\"ramUsage\":1.75,\"server\":\"63.8.0.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,65,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2118.57641882347,\"onlineMoneyMade\":0,\"onlineRunningTime\":6943.609999995876,\"ramUsage\":1.75,\"server\":\"63.8.0.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[524426,14,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":537.7924755474962,\"onlineMoneyMade\":524426,\"onlineRunningTime\":6943.609999995876,\"ramUsage\":1.8,\"server\":\"63.8.0.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"63.8.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"63.8.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"63.8.0.2\"}}],\"serversOnNetwork\":[\"46.1.5.7\",\"52.6.3.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":50,\"hackDifficulty\":50,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":497,\"serverGrowth\":31}},\"67.8.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"67.8.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.5609001990895,\"onlineMoneyMade\":0,\"onlineRunningTime\":6919.009999995898,\"ramUsage\":1.75,\"server\":\"67.8.0.4\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,182,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5932.013972705716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6919.009999995898,\"ramUsage\":1.75,\"server\":\"67.8.0.4\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[563296,24,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945.2110176289325,\"onlineMoneyMade\":563296,\"onlineRunningTime\":6919.009999995898,\"ramUsage\":1.8,\"server\":\"67.8.0.4\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"67.8.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.8.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.8.0.4\"}}],\"serversOnNetwork\":[\"22.1.1.9\",\"43.4.5.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1044,\"serverGrowth\":51}},\"13.4.4.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"13.4.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"36.5.4.0\",\"70.6.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":40,\"hackDifficulty\":40,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":685,\"serverGrowth\":60}},\"15.2.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"15.2.9.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":510.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,44]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1434.1132681266563,\"onlineMoneyMade\":0,\"onlineRunningTime\":6894.409999995921,\"ramUsage\":1.75,\"server\":\"15.2.9.4\",\"threads\":44}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,1308,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42632.27624340151,\"onlineMoneyMade\":0,\"onlineRunningTime\":6894.409999995921,\"ramUsage\":1.75,\"server\":\"15.2.9.4\",\"threads\":218}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[3668587,145,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6143.871614588062,\"onlineMoneyMade\":3668587,\"onlineRunningTime\":6894.409999995921,\"ramUsage\":1.8,\"server\":\"15.2.9.4\",\"threads\":29}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"15.2.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.9.4\"}}],\"serversOnNetwork\":[\"29.7.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":549,\"serverGrowth\":0}},\"50.4.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-424995.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[168,104,76,44,67,200,119,45,32,50,106,71,131,182,18,174,59,125,107,26,123,21,169,161,81,49,2,191,65,74,117,100,52,142,167,193,48,48,141,91,6,148],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"50.4.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6965.409999995856,\"ramUsage\":1.75,\"server\":\"50.4.2.0\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,48,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1564.487201592716,\"onlineMoneyMade\":0,\"onlineRunningTime\":6965.409999995856,\"ramUsage\":1.75,\"server\":\"50.4.2.0\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[87763,4,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":187.41252935746076,\"onlineMoneyMade\":87763,\"onlineRunningTime\":6965.409999995856,\"ramUsage\":1.8,\"server\":\"50.4.2.0\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"50.4.2.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.4.2.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.4.2.0\"}}],\"serversOnNetwork\":[\"91.3.9.5\",\"31.4.7.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"48.2.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"48.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97.78045009954475,\"onlineMoneyMade\":0,\"onlineRunningTime\":6959.009999995862,\"ramUsage\":1.75,\"server\":\"48.2.9.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,65,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2118.57641882347,\"onlineMoneyMade\":0,\"onlineRunningTime\":6959.009999995862,\"ramUsage\":1.75,\"server\":\"48.2.9.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[346764,14,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":537.7924755474962,\"onlineMoneyMade\":346764,\"onlineRunningTime\":6959.009999995862,\"ramUsage\":1.8,\"server\":\"48.2.9.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"48.2.9.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"48.2.9.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"48.2.9.1\"}}],\"serversOnNetwork\":[\"40.5.6.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":1,\"manuallyHacked\":true,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":216,\"serverGrowth\":0}},\"22.1.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"22.1.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65.18696673302983,\"onlineMoneyMade\":0,\"onlineRunningTime\":6925.209999995893,\"ramUsage\":1.75,\"server\":\"22.1.1.9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,42,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1368.9263013936265,\"onlineMoneyMade\":0,\"onlineRunningTime\":6925.209999995893,\"ramUsage\":1.75,\"server\":\"22.1.1.9\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[63737,3,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":171.11578767420332,\"onlineMoneyMade\":63737,\"onlineRunningTime\":6925.209999995893,\"ramUsage\":1.8,\"server\":\"22.1.1.9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"22.1.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"22.1.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"22.1.1.9\"}}],\"serversOnNetwork\":[\"67.5.3.7\",\"95.0.3.6\",\"67.8.0.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"purchasedByPlayer\":false,\"requiredHackingSkill\":514,\"serverGrowth\":0}},\"25.6.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"25.6.4.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32.59348336651492,\"onlineMoneyMade\":0,\"onlineRunningTime\":6993.009999995831,\"ramUsage\":1.75,\"server\":\"25.6.4.6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,16,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":521.4957338642388,\"onlineMoneyMade\":0,\"onlineRunningTime\":6993.009999995831,\"ramUsage\":1.75,\"server\":\"25.6.4.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[191184,6,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":244.4511252488619,\"onlineMoneyMade\":191184,\"onlineRunningTime\":6993.009999995831,\"ramUsage\":1.8,\"server\":\"25.6.4.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"25.6.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"25.6.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"25.6.4.6\"}}],\"serversOnNetwork\":[\"77.6.0.2\",\"55.4.9.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"68.0.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"68.0.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.4.7.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"95.3.3.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"95.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"67.2.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"67.2.9.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"1.4.4.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-12\",\"httpPortOpen\":false,\"ip\":\"1.4.4.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6826.609999995982,\"ramUsage\":1.75,\"server\":\"1.4.4.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,3508,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114337.93964973433,\"onlineMoneyMade\":0,\"onlineRunningTime\":6826.609999995982,\"ramUsage\":1.75,\"server\":\"1.4.4.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[13965228,570,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25080.685450533227,\"onlineMoneyMade\":13965228,\"onlineRunningTime\":6826.609999995982,\"ramUsage\":1.8,\"server\":\"1.4.4.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"1.4.4.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.4.4.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.4.4.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"19.3.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-13\",\"httpPortOpen\":false,\"ip\":\"19.3.7.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6823.609999995985,\"ramUsage\":1.75,\"server\":\"19.3.7.5\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,5262,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":171506.90947460147,\"onlineMoneyMade\":0,\"onlineRunningTime\":6823.609999995985,\"ramUsage\":1.75,\"server\":\"19.3.7.5\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[21675276,912,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33440.91393404431,\"onlineMoneyMade\":21675276,\"onlineRunningTime\":6823.609999995985,\"ramUsage\":1.8,\"server\":\"19.3.7.5\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"19.3.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.3.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.3.7.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"66.5.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-14\",\"httpPortOpen\":false,\"ip\":\"66.5.9.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6820.609999995988,\"ramUsage\":1.75,\"server\":\"66.5.9.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,5262,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":171506.90947460147,\"onlineMoneyMade\":0,\"onlineRunningTime\":6820.609999995988,\"ramUsage\":1.75,\"server\":\"66.5.9.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[22442610,798,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30654.17110620728,\"onlineMoneyMade\":22442610,\"onlineRunningTime\":6820.609999995988,\"ramUsage\":1.8,\"server\":\"66.5.9.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"66.5.9.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.5.9.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.5.9.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"28.0.8.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-15\",\"httpPortOpen\":false,\"ip\":\"28.0.8.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6817.409999995991,\"ramUsage\":1.75,\"server\":\"28.0.8.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,5262,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":171506.90947460147,\"onlineMoneyMade\":0,\"onlineRunningTime\":6817.409999995991,\"ramUsage\":1.75,\"server\":\"28.0.8.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[13794570,570,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24151.771174587553,\"onlineMoneyMade\":13794570,\"onlineRunningTime\":6817.409999995991,\"ramUsage\":1.8,\"server\":\"28.0.8.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"28.0.8.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.0.8.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.0.8.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"72.9.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-16\",\"httpPortOpen\":false,\"ip\":\"72.9.0.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6814.4099999959935,\"ramUsage\":1.75,\"server\":\"72.9.0.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,4385,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":142922.4245621679,\"onlineMoneyMade\":0,\"onlineRunningTime\":6814.4099999959935,\"ramUsage\":1.75,\"server\":\"72.9.0.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[7448988,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18578.285518913504,\"onlineMoneyMade\":7448988,\"onlineRunningTime\":6814.4099999959935,\"ramUsage\":1.8,\"server\":\"72.9.0.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"72.9.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.9.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.9.0.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"14.0.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-17\",\"httpPortOpen\":false,\"ip\":\"14.0.1.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6811.209999995996,\"ramUsage\":1.75,\"server\":\"14.0.1.5\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,3508,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114337.93964973433,\"onlineMoneyMade\":0,\"onlineRunningTime\":6811.209999995996,\"ramUsage\":1.75,\"server\":\"14.0.1.5\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[24857814,798,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30654.17110620728,\"onlineMoneyMade\":24857814,\"onlineRunningTime\":6811.209999995996,\"ramUsage\":1.8,\"server\":\"14.0.1.5\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"14.0.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"14.0.1.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"14.0.1.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"9.2.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-18\",\"httpPortOpen\":false,\"ip\":\"9.2.0.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6808.209999995999,\"ramUsage\":1.75,\"server\":\"9.2.0.7\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,2631,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":85753.45473730075,\"onlineMoneyMade\":0,\"onlineRunningTime\":6808.209999995999,\"ramUsage\":1.75,\"server\":\"9.2.0.7\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[12179304,570,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24151.771174587557,\"onlineMoneyMade\":12179304,\"onlineRunningTime\":6808.209999995999,\"ramUsage\":1.8,\"server\":\"9.2.0.7\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"9.2.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"9.2.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"9.2.0.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"7.3.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-19\",\"httpPortOpen\":false,\"ip\":\"7.3.3.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6805.009999996002,\"ramUsage\":1.75,\"server\":\"7.3.3.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,3508,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114337.93964973433,\"onlineMoneyMade\":0,\"onlineRunningTime\":6805.009999996002,\"ramUsage\":1.75,\"server\":\"7.3.3.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[16991358,570,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25080.685450533227,\"onlineMoneyMade\":16991358,\"onlineRunningTime\":6805.009999996002,\"ramUsage\":1.8,\"server\":\"7.3.3.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"7.3.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.3.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.3.3.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"15.8.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-20\",\"httpPortOpen\":false,\"ip\":\"15.8.0.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6801.809999996005,\"ramUsage\":1.75,\"server\":\"15.8.0.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,4385,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":142922.4245621679,\"onlineMoneyMade\":0,\"onlineRunningTime\":6801.809999996005,\"ramUsage\":1.75,\"server\":\"15.8.0.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[23149410,912,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32511.99965809863,\"onlineMoneyMade\":23149410,\"onlineRunningTime\":6801.809999996005,\"ramUsage\":1.8,\"server\":\"15.8.0.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"15.8.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.8.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.8.0.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"67.8.3.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-21\",\"httpPortOpen\":false,\"ip\":\"67.8.3.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6798.809999996008,\"ramUsage\":1.75,\"server\":\"67.8.3.7\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,4385,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":142922.4245621679,\"onlineMoneyMade\":0,\"onlineRunningTime\":6798.809999996008,\"ramUsage\":1.75,\"server\":\"67.8.3.7\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[17854794,684,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27867.42827837026,\"onlineMoneyMade\":17854794,\"onlineRunningTime\":6798.809999996008,\"ramUsage\":1.8,\"server\":\"67.8.3.7\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"67.8.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.8.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"67.8.3.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"90.3.4.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-22\",\"httpPortOpen\":false,\"ip\":\"90.3.4.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6795.80999999601,\"ramUsage\":1.75,\"server\":\"90.3.4.2\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,4385,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":142922.4245621679,\"onlineMoneyMade\":0,\"onlineRunningTime\":6795.80999999601,\"ramUsage\":1.75,\"server\":\"90.3.4.2\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[6700350,342,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18578.285518913504,\"onlineMoneyMade\":6700350,\"onlineRunningTime\":6795.80999999601,\"ramUsage\":1.8,\"server\":\"90.3.4.2\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"90.3.4.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.3.4.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.3.4.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"68.7.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-23\",\"httpPortOpen\":false,\"ip\":\"68.7.9.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5736.453072506625,\"onlineMoneyMade\":0,\"onlineRunningTime\":6792.609999996013,\"ramUsage\":1.75,\"server\":\"68.7.9.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,4385,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":142922.4245621679,\"onlineMoneyMade\":0,\"onlineRunningTime\":6792.609999996013,\"ramUsage\":1.75,\"server\":\"68.7.9.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[18269184,684,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27867.428278370255,\"onlineMoneyMade\":18269184,\"onlineRunningTime\":6792.609999996013,\"ramUsage\":1.8,\"server\":\"68.7.9.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"68.7.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"68.7.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"68.7.9.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"47.3.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB\",\"httpPortOpen\":false,\"ip\":\"47.3.0.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2809]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":91555.0947765404,\"onlineMoneyMade\":0,\"onlineRunningTime\":6789.609999996016,\"ramUsage\":1.75,\"server\":\"47.3.0.9\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,29390,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":957922.4761418734,\"onlineMoneyMade\":0,\"onlineRunningTime\":6789.609999996016,\"ramUsage\":1.75,\"server\":\"47.3.0.9\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[282935718,8302,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":318910.9379996652,\"onlineMoneyMade\":282935718,\"onlineRunningTime\":6789.609999996016,\"ramUsage\":1.8,\"server\":\"47.3.0.9\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"47.3.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.3.0.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.3.0.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"48.7.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-0\",\"httpPortOpen\":false,\"ip\":\"48.7.6.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,19663]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":640885.6634357828,\"onlineMoneyMade\":0,\"onlineRunningTime\":6786.409999996019,\"ramUsage\":1.75,\"server\":\"48.7.6.3\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14695,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478961.2380709367,\"onlineMoneyMade\":0,\"onlineRunningTime\":6786.409999996019,\"ramUsage\":1.75,\"server\":\"48.7.6.3\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[117090222,4744,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":231935.22763612017,\"onlineMoneyMade\":117090222,\"onlineRunningTime\":6786.409999996019,\"ramUsage\":1.8,\"server\":\"48.7.6.3\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"48.7.6.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"48.7.6.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"48.7.6.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"71.8.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-1\",\"httpPortOpen\":false,\"ip\":\"71.8.6.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,22472]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":732440.7582123232,\"onlineMoneyMade\":0,\"onlineRunningTime\":6783.409999996022,\"ramUsage\":1.75,\"server\":\"71.8.6.7\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14695,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478961.2380709367,\"onlineMoneyMade\":0,\"onlineRunningTime\":6783.409999996022,\"ramUsage\":1.75,\"server\":\"71.8.6.7\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[242871452,9488,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":338238.87363600853,\"onlineMoneyMade\":242871452,\"onlineRunningTime\":6783.409999996022,\"ramUsage\":1.8,\"server\":\"71.8.6.7\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"71.8.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"71.8.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"71.8.6.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"40.5.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-2\",\"httpPortOpen\":false,\"ip\":\"40.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,22472]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":732440.7582123232,\"onlineMoneyMade\":0,\"onlineRunningTime\":6780.209999996025,\"ramUsage\":1.75,\"server\":\"40.5.1.2\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14695,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478961.2380709367,\"onlineMoneyMade\":0,\"onlineRunningTime\":6780.209999996025,\"ramUsage\":1.75,\"server\":\"40.5.1.2\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[54559558,2372,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":164287.45290891844,\"onlineMoneyMade\":54559558,\"onlineRunningTime\":6780.209999996025,\"ramUsage\":1.8,\"server\":\"40.5.1.2\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"40.5.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"40.5.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"40.5.1.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"80.8.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-3\",\"httpPortOpen\":false,\"ip\":\"80.8.9.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,22472]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":732440.7582123232,\"onlineMoneyMade\":0,\"onlineRunningTime\":6777.209999996027,\"ramUsage\":1.75,\"server\":\"80.8.9.4\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14695,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478961.2380709367,\"onlineMoneyMade\":0,\"onlineRunningTime\":6777.209999996027,\"ramUsage\":1.75,\"server\":\"80.8.9.4\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[66659130,3558,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193279.35636343347,\"onlineMoneyMade\":66659130,\"onlineRunningTime\":6777.209999996027,\"ramUsage\":1.8,\"server\":\"80.8.9.4\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"80.8.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"80.8.9.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"80.8.9.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"7.0.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-4\",\"httpPortOpen\":false,\"ip\":\"7.0.5.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,22472]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":732440.7582123232,\"onlineMoneyMade\":0,\"onlineRunningTime\":6774.00999999603,\"ramUsage\":1.75,\"server\":\"7.0.5.5\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,14695,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":478961.2380709367,\"onlineMoneyMade\":0,\"onlineRunningTime\":6774.00999999603,\"ramUsage\":1.75,\"server\":\"7.0.5.5\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[213095736,8302,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":309246.97018149355,\"onlineMoneyMade\":213095736,\"onlineRunningTime\":6774.00999999603,\"ramUsage\":1.8,\"server\":\"7.0.5.5\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"7.0.5.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.0.5.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.0.5.5\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"36.7.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-5\",\"httpPortOpen\":false,\"ip\":\"36.7.0.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,19663]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":640885.6634357828,\"onlineMoneyMade\":0,\"onlineRunningTime\":6008.809999996726,\"ramUsage\":1.75,\"server\":\"36.7.0.6\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,73475,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2394806.1903546834,\"onlineMoneyMade\":0,\"onlineRunningTime\":6008.809999996726,\"ramUsage\":1.75,\"server\":\"36.7.0.6\",\"threads\":14695}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[211316736,7116,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":289919.0345451502,\"onlineMoneyMade\":211316736,\"onlineRunningTime\":6008.809999996726,\"ramUsage\":1.8,\"server\":\"36.7.0.6\",\"threads\":1186}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"36.7.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.7.0.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.7.0.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"94.6.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-6\",\"httpPortOpen\":false,\"ip\":\"94.6.3.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4925.409999997712,\"ramUsage\":1.75,\"server\":\"94.6.3.4\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4925.409999997712,\"ramUsage\":1.75,\"server\":\"94.6.3.4\",\"threads\":14042}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[189207363,5463,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":192896.38293387688,\"onlineMoneyMade\":189207363,\"onlineRunningTime\":4925.409999997712,\"ramUsage\":1.8,\"server\":\"94.6.3.4\",\"threads\":1821}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"94.6.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"94.6.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"94.6.3.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"64.2.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-7\",\"httpPortOpen\":false,\"ip\":\"64.2.6.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,16854]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":549330.5686592424,\"onlineMoneyMade\":0,\"onlineRunningTime\":3902.209999998642,\"ramUsage\":1.75,\"server\":\"64.2.6.7\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,62800,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2046870.7554171367,\"onlineMoneyMade\":0,\"onlineRunningTime\":3902.209999998642,\"ramUsage\":1.75,\"server\":\"64.2.6.7\",\"threads\":15700}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[58878017,2299,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81744.45628321942,\"onlineMoneyMade\":58878017,\"onlineRunningTime\":3902.209999998642,\"ramUsage\":1.8,\"server\":\"64.2.6.7\",\"threads\":209}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"64.2.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.2.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.2.6.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"55.1.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-8\",\"httpPortOpen\":false,\"ip\":\"55.1.3.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,11236]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":366220.3791061616,\"onlineMoneyMade\":0,\"onlineRunningTime\":2878.809999999573,\"ramUsage\":1.75,\"server\":\"55.1.3.2\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,31494,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1026499.1651450208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2878.809999999573,\"ramUsage\":1.75,\"server\":\"55.1.3.2\",\"threads\":15747}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[14337154,652,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29220.057838080622,\"onlineMoneyMade\":14337154,\"onlineRunningTime\":2878.809999999573,\"ramUsage\":1.8,\"server\":\"55.1.3.2\",\"threads\":163}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"55.1.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"55.1.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"55.1.3.2\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"16.0.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-9\",\"httpPortOpen\":false,\"ip\":\"16.0.1.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,5618]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":183110.1895530808,\"onlineMoneyMade\":0,\"onlineRunningTime\":1915.4100000002986,\"ramUsage\":1.75,\"server\":\"16.0.1.6\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,47337,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1542877.7221207167,\"onlineMoneyMade\":0,\"onlineRunningTime\":1915.4100000002986,\"ramUsage\":1.75,\"server\":\"16.0.1.6\",\"threads\":15779}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{\"46.1.5.7\":[11450208,396,0,0]},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16133.774266424884,\"onlineMoneyMade\":11450208,\"onlineRunningTime\":1915.4100000002986,\"ramUsage\":1.8,\"server\":\"16.0.1.6\",\"threads\":132}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"16.0.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"16.0.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"16.0.1.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"26.5.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-10\",\"httpPortOpen\":false,\"ip\":\"26.5.9.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,0,2809]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":91555.0947765404,\"onlineMoneyMade\":0,\"onlineRunningTime\":1072.210000000107,\"ramUsage\":1.75,\"server\":\"26.5.9.3\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"46.1.5.7\":[0,0,31590,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1029628.1395482062,\"onlineMoneyMade\":0,\"onlineRunningTime\":1072.210000000107,\"ramUsage\":1.75,\"server\":\"26.5.9.3\",\"threads\":15795}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1906.7187769411225,\"onlineMoneyMade\":0,\"onlineRunningTime\":1072.210000000107,\"ramUsage\":1.8,\"server\":\"26.5.9.3\",\"threads\":117}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"26.5.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"26.5.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"26.5.9.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"42.8.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-32768GB-11\",\"httpPortOpen\":false,\"ip\":\"42.8.8.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":169.00999999999894,\"ramUsage\":1.75,\"server\":\"42.8.8.6\",\"threads\":2809}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":169.00999999999894,\"ramUsage\":1.75,\"server\":\"42.8.8.6\",\"threads\":15798}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\",503419924.0000001],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":169.00999999999894,\"ramUsage\":1.8,\"server\":\"42.8.8.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"42.8.8.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.8.8.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.8.8.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":3,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":3776.2890186087116,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":6,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":164.4082409250827,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":130,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":2,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":51,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":51710.77063933134,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":24,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":164.4082409250827,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":82,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"72.2.4.5\",\"BitRunners Server\":\"15.2.9.4\",\"The Black Hand Server\":\"50.4.2.0\",\"NiteSec Server\":\"48.2.9.1\",\"The Dark Army Server\":\"22.1.1.9\",\"CyberSec Server\":\"25.6.4.6\",\"Daedalus Server\":\"68.0.4.0\",\"w0r1d_d43m0n\":\"95.3.3.7\",\"Darkweb Server\":\"67.2.9.2\"}}","AliasesSave":"{\"dir\":\"ls\",\"nuke\":\"run NUKE.exe\",\"ssh\":\"run BruteSSH.exe\",\"sql\":\"run SQLInject.exe\",\"ftp\":\"run FTPCrack.exe\",\"http\":\"run HTTPWorm.exe\",\"smtp\":\"run relaySMTP.exe\",\"pull\":\"run pull/pull-ns2.js\",\"wallet\":\"nano master/character/wallet-ns2.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableHotkeys\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.47.0\"","AllGangsSave":""}}