{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":409,\"hp\":26,\"max_hp\":26,\"strength\":169,\"defense\":169,\"dexterity\":169,\"agility\":169,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.28,\"hacking_speed_mult\":1.28,\"hacking_money_mult\":1.28,\"hacking_grow_mult\":1.28,\"hacking_exp\":11289272.039550018,\"strength_exp\":31942.40000000694,\"defense_exp\":31942.40000000694,\"dexterity_exp\":31942.40000000694,\"agility_exp\":31942.40000000694,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.28,\"strength_mult\":1.28,\"defense_mult\":1.28,\"dexterity_mult\":1.28,\"agility_mult\":1.28,\"charisma_mult\":1.7141760000000001,\"hacking_exp_mult\":1.28,\"strength_exp_mult\":1.28,\"defense_exp_mult\":1.28,\"dexterity_exp_mult\":1.28,\"agility_exp_mult\":1.28,\"charisma_exp_mult\":1.28,\"company_rep_mult\":1.28,\"faction_rep_mult\":1.28,\"money\":\"886945027.7523692905\",\"homeComputer\":\"60.8.2.2\",\"city\":\"Sector-12\",\"location\":\"The Slums\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"60.8.2.2\",\"purchasedServers\":[\"46.6.1.8\",\"24.4.3.6\",\"49.5.4.4\",\"73.6.8.3\",\"95.1.3.8\",\"12.3.4.6\",\"75.8.1.9\",\"39.8.6.4\",\"49.2.3.4\",\"50.7.7.6\",\"89.7.8.1\",\"64.3.1.9\",\"20.9.0.4\",\"19.9.2.9\",\"42.3.0.3\",\"20.3.1.8\",\"82.3.4.1\",\"46.3.6.6\",\"10.8.9.3\",\"53.7.4.1\",\"60.0.4.6\",\"70.8.5.3\",\"20.0.2.9\",\"3.9.3.3\",\"97.4.1.3\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":301230.80000114185,\"ram\":64,\"totalMoneyGenerated\":13638867.970616348,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":300138.80000113783,\"ram\":64,\"totalMoneyGenerated\":13636816.161119914,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":300043.80000113754,\"ram\":64,\"totalMoneyGenerated\":13636667.681119911,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":299847.8000011368,\"ram\":64,\"totalMoneyGenerated\":13636306.311519906,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":299671.80000113614,\"ram\":64,\"totalMoneyGenerated\":13635846.6379199,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":299343.800001135,\"ram\":64,\"totalMoneyGenerated\":13634950.617439885,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":299125.60000113415,\"ram\":64,\"totalMoneyGenerated\":13633968.376159871,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":298666.6000011325,\"ram\":64,\"totalMoneyGenerated\":13632171.460959844,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141161.20000042877,\"ram\":64,\"totalMoneyGenerated\":12874072.230238033,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141161.00000042876,\"ram\":64,\"totalMoneyGenerated\":12874072.209758032,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141160.60000042876,\"ram\":64,\"totalMoneyGenerated\":12874072.168798033,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141160.40000042875,\"ram\":64,\"totalMoneyGenerated\":12874072.148318034,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141159.40000042875,\"ram\":64,\"totalMoneyGenerated\":12874072.045918033,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":102,\"moneyGainRatePerSecond\":91.23094329954802,\"onlineTimeSeconds\":141159.20000042877,\"ram\":64,\"totalMoneyGenerated\":12874072.025438033,\"name\":\"hacknet-node-13\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Sector-12\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":1,\"n\":2},{\"lvl\":1,\"n\":3}],\"numPeopleKilled\":11978,\"karma\":-35934,\"crime_money_mult\":1.5872,\"crime_success_mult\":1.5872,\"isWorking\":false,\"workType\":\"Committing a crime\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":1.3824,\"hacknet_node_money_mult\":1.28,\"hacknet_node_purchase_cost_mult\":0.72,\"hacknet_node_ram_cost_mult\":0.72,\"hacknet_node_core_cost_mult\":0.72,\"hacknet_node_level_cost_mult\":0.72,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":0,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Fluffy Bunny Inc.\",\"divisions\":[{\"ctor\":\"Industry\",\"data\":{\"offices\":{\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Aevum\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"eD3BD5K\",\"mor\":100,\"hap\":97.89185995253901,\"ene\":97.90448877563337,\"int\":73.92,\"cha\":72.38,\"exp\":73.24100000000072,\"cre\":66.99,\"eff\":58.52,\"sal\":977.13,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"cquu7hD\",\"mor\":100,\"hap\":97.95282185167888,\"ene\":97.9605774084781,\"int\":85.44,\"cha\":94.08,\"exp\":106.70100000000073,\"cre\":69.12,\"eff\":72.96,\"sal\":1226.8799999999999,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hc2d0nD\",\"mor\":100,\"hap\":97.89262528245555,\"ene\":97.90597095934774,\"int\":43.120000000000005,\"cha\":73.15,\"exp\":60.92100000000073,\"cre\":62.370000000000005,\"eff\":73.15,\"sal\":880.11,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"hNJVNhu\",\"mor\":100,\"hap\":97.90964079592138,\"ene\":97.91890329810425,\"int\":77,\"cha\":81,\"exp\":108.34100000000073,\"cre\":74,\"eff\":62,\"sal\":1149,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZizUESz\",\"mor\":100,\"hap\":97.8928719094912,\"ene\":97.90187431543481,\"int\":47.85,\"cha\":57.42,\"exp\":71.54100000000074,\"cre\":59.16,\"eff\":62.64,\"sal\":837.81,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Q2SJWG5\",\"mor\":100,\"hap\":97.92330085947859,\"ene\":97.93238220592029,\"int\":45.39,\"cha\":60.52,\"exp\":72.74100000000072,\"cre\":73.87,\"eff\":56.07,\"sal\":867.75,\"pro\":0,\"cyclesUntilRaise\":353,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9snnzVE\",\"mor\":100,\"hap\":97.87166144773838,\"ene\":97.87910277407732,\"int\":82.56,\"cha\":52.46,\"exp\":76.93700000000054,\"cre\":64.5,\"eff\":73.1,\"sal\":1006.1999999999999,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9zcjk2t\",\"mor\":100,\"hap\":97.9296215203744,\"ene\":97.93734264149653,\"int\":52.44,\"cha\":50.92,\"exp\":53.67700000000054,\"cre\":54.72,\"eff\":59.28,\"sal\":770.64,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZP24zCQ\",\"mor\":100,\"hap\":97.84578661476391,\"ene\":97.8586830385369,\"int\":46.36,\"cha\":64.6,\"exp\":84.07700000000054,\"cre\":45.6,\"eff\":69.16,\"sal\":886.92,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DIpmQtg\",\"mor\":100,\"hap\":97.90861123340495,\"ene\":97.91939714608532,\"int\":58.46,\"cha\":51.35,\"exp\":64.71700000000054,\"cre\":68.73,\"eff\":54.510000000000005,\"sal\":850.83,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"55rJ9zY\",\"mor\":100,\"hap\":97.88003695982897,\"ene\":97.88720531232677,\"int\":72.97999999999999,\"cha\":41.82,\"exp\":95.33700000000053,\"cre\":56.58,\"eff\":69.7,\"sal\":966.78,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"pdl8y5L\",\"mor\":100,\"hap\":97.84325030208296,\"ene\":97.85185117222596,\"int\":89,\"cha\":97,\"exp\":90.15700000000054,\"cre\":84,\"eff\":90,\"sal\":1308,\"pro\":0,\"cyclesUntilRaise\":81,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ABtYHLE\",\"mor\":100,\"hap\":97.91459874348783,\"ene\":97.92795608369282,\"int\":51.839999999999996,\"cha\":78.72,\"exp\":86.87100000000017,\"cre\":88.32,\"eff\":87.36,\"sal\":1166.3999999999999,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"mEPKoAv\",\"mor\":100,\"hap\":97.90103516186221,\"ene\":97.91285698413732,\"int\":61.56,\"cha\":57,\"exp\":66.63100000000016,\"cre\":54.72,\"eff\":67.64,\"sal\":909.72,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"S0zRGZ3\",\"mor\":100,\"hap\":97.91025941253272,\"ene\":97.91896584263333,\"int\":50.74,\"cha\":57.62,\"exp\":49.03100000000016,\"cre\":85.14,\"eff\":49.88,\"sal\":864.3,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"MppWFpZ\",\"mor\":100,\"hap\":97.92969091687912,\"ene\":97.94268653333498,\"int\":54.72,\"cha\":65.28,\"exp\":66.71100000000015,\"cre\":55.68,\"eff\":76.8,\"sal\":944.64,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"GvksqsI\",\"mor\":100,\"hap\":97.92258124618108,\"ene\":97.93315742242892,\"int\":72.2,\"cha\":61.56,\"exp\":66.63100000000016,\"cre\":60.8,\"eff\":67.64,\"sal\":973.5600000000001,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YrnNtUA\",\"mor\":100,\"hap\":97.9001657184876,\"ene\":97.91040155514617,\"int\":74.7,\"cha\":42.33,\"exp\":68.22100000000016,\"cre\":67.22999999999999,\"eff\":81.33999999999999,\"sal\":988.53,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bgf9h02\",\"mor\":100,\"hap\":97.87982551605104,\"ene\":97.89376571521123,\"int\":82.17,\"cha\":64.74,\"exp\":48.30100000000016,\"cre\":53.12,\"eff\":62.25,\"sal\":918.81,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sV2fXLp\",\"mor\":100,\"hap\":89.65088499336927,\"ene\":97.9569117873076,\"int\":79,\"cha\":51.35,\"exp\":63.56100000000016,\"cre\":71.10000000000001,\"eff\":54.510000000000005,\"sal\":945.63,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rzujDM8\",\"mor\":97.2,\"hap\":97.88699828922596,\"ene\":97.89615345318975,\"int\":56.05,\"cha\":59.849999999999994,\"exp\":62.26100000000016,\"cre\":54.15,\"eff\":48.449999999999996,\"sal\":829.3499999999999,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"rRkWzQG\",\"mor\":100,\"hap\":97.88401266088455,\"ene\":89.37078791417728,\"int\":56.09,\"cha\":75.84,\"exp\":82.52100000000017,\"cre\":75.84,\"eff\":40.29,\"sal\":978.8100000000001,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bX8wPeW\",\"mor\":100,\"hap\":97.86014870329795,\"ene\":97.86709451951118,\"int\":49.559999999999995,\"cha\":50.4,\"exp\":79.07100000000015,\"cre\":57.96,\"eff\":44.519999999999996,\"sal\":831.6,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tEW4KsO\",\"mor\":100,\"hap\":97.86229726004034,\"ene\":97.87007242399906,\"int\":51.699999999999996,\"cha\":60.16,\"exp\":79.51100000000015,\"cre\":63.919999999999995,\"eff\":85.53999999999999,\"sal\":1009.56,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fswGg5y\",\"mor\":100,\"hap\":97.88360865540712,\"ene\":97.89591151541866,\"int\":65.28,\"cha\":91.2,\"exp\":95.51100000000017,\"cre\":77.75999999999999,\"eff\":89.28,\"sal\":1244.1599999999999,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Wj0XC1X\",\"mor\":100,\"hap\":97.85221392758169,\"ene\":97.86333655387419,\"int\":61.56,\"cha\":54.27,\"exp\":78.83100000000017,\"cre\":77.76,\"eff\":54.27,\"sal\":967.1400000000001,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IQ3dqIx\",\"mor\":100,\"hap\":91.42896687369223,\"ene\":97.92596968050985,\"int\":83.42,\"cha\":85.14,\"exp\":47.31100000000016,\"cre\":73.96,\"eff\":84.28,\"sal\":1109.4,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"V1ZK6UD\",\"mor\":100,\"hap\":97.88106780087074,\"ene\":97.89637584907229,\"int\":91.08,\"cha\":57.96,\"exp\":94.47100000000017,\"cre\":79.12,\"eff\":58.88,\"sal\":1131.6000000000001,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"XDTpuWz\",\"mor\":100,\"hap\":97.84498870496473,\"ene\":97.85514870230837,\"int\":79.17,\"cha\":80.04,\"exp\":70.43100000000017,\"cre\":77.42999999999999,\"eff\":82.65,\"sal\":1156.23,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gg691QR\",\"mor\":99,\"hap\":97.90892225158542,\"ene\":97.92390098299835,\"int\":91,\"cha\":73,\"exp\":75.31100000000016,\"cre\":78,\"eff\":91,\"sal\":1212,\"pro\":0,\"cyclesUntilRaise\":163,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}}],\"employeeProd\":{\"Operations\":3787.7114054922054,\"Engineer\":552.5014284279918,\"Business\":191.27479931338843,\"Management\":2088.6680388880463,\"Research & Development\":1537.771104546669,\"total\":8157.926776668301,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Chongqing\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZMs4bqM\",\"mor\":100,\"hap\":97.91673494961333,\"ene\":97.920447620873,\"int\":73.08,\"cha\":69.6,\"exp\":88.92900000000073,\"cre\":74.82,\"eff\":43.5,\"sal\":991.8,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"P9vPuHh\",\"mor\":100,\"hap\":97.86643820171466,\"ene\":97.86987306964159,\"int\":62.9,\"cha\":55.25,\"exp\":74.57900000000073,\"cre\":46.75,\"eff\":77.35,\"sal\":892.5,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Xr0BWdY\",\"mor\":100,\"hap\":97.89633220461158,\"ene\":97.89817872914172,\"int\":90.21,\"cha\":56.26,\"exp\":104.68900000000073,\"cre\":62.08,\"eff\":96.03,\"sal\":1169.82,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"p4GVYPK\",\"mor\":100,\"hap\":97.88159598894873,\"ene\":97.88557971621736,\"int\":94.05,\"cha\":67.32,\"exp\":91.59900000000073,\"cre\":57.42,\"eff\":91.08,\"sal\":1146.42,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"EfsZgHx\",\"mor\":100,\"hap\":97.90323350761552,\"ene\":97.90721115229015,\"int\":47.32,\"cha\":60.06,\"exp\":90.30900000000074,\"cre\":83.72,\"eff\":52.78,\"sal\":944.58,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"oBNNGPW\",\"mor\":100,\"hap\":97.97096278090565,\"ene\":97.97422504488316,\"int\":82.81,\"cha\":65.52,\"exp\":106.68900000000073,\"cre\":52.78,\"eff\":60.97,\"sal\":1048.32,\"pro\":0,\"cyclesUntilRaise\":357,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"nqHpx3k\",\"mor\":100,\"hap\":97.88816733531179,\"ene\":97.89238855606355,\"int\":65.60000000000001,\"cha\":40,\"exp\":85.35400000000054,\"cre\":57.6,\"eff\":71.2,\"sal\":916.8000000000001,\"pro\":0,\"cyclesUntilRaise\":82,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Xj4N8pG\",\"mor\":100,\"hap\":97.87063220508006,\"ene\":97.87354003140734,\"int\":51.94,\"cha\":49,\"exp\":103.33400000000053,\"cre\":49,\"eff\":88.2,\"sal\":981.96,\"pro\":0,\"cyclesUntilRaise\":82,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VTFQJKf\",\"mor\":100,\"hap\":97.89924636862791,\"ene\":97.90310687426985,\"int\":52.64,\"cha\":86.47999999999999,\"exp\":96.87400000000054,\"cre\":77.08,\"eff\":58.279999999999994,\"sal\":1071.6,\"pro\":0,\"cyclesUntilRaise\":82,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"1KvrEl9\",\"mor\":100,\"hap\":97.90170309908473,\"ene\":97.90498153660477,\"int\":47,\"cha\":72.38,\"exp\":71.49100000000053,\"cre\":82.72,\"eff\":79.89999999999999,\"sal\":1018.02,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Mh3ek9n\",\"mor\":100,\"hap\":97.8499451794502,\"ene\":97.85224600987894,\"int\":78.85,\"cha\":50.629999999999995,\"exp\":82.21100000000054,\"cre\":78.85,\"eff\":69.72,\"sal\":1038.33,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"OlMaguf\",\"mor\":100,\"hap\":97.9163818334157,\"ene\":97.91984079003092,\"int\":80.99000000000001,\"cha\":80.99000000000001,\"exp\":97.87100000000054,\"cre\":79.17,\"eff\":50.050000000000004,\"sal\":1124.76,\"pro\":0,\"cyclesUntilRaise\":83,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"SjNcyhi\",\"mor\":100,\"hap\":97.91138483189734,\"ene\":82.28108599940538,\"int\":68.8,\"cha\":70.52,\"exp\":82.51400000000017,\"cre\":67.94,\"eff\":67.08,\"sal\":1057.8,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ir5trUH\",\"mor\":100,\"hap\":97.85799974002595,\"ene\":72.39205987034153,\"int\":48.980000000000004,\"cha\":52.14,\"exp\":45.33400000000016,\"cre\":68.73,\"eff\":71.89,\"sal\":848.46,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"yBFoEfw\",\"mor\":100,\"hap\":97.90147528924797,\"ene\":79.4692635427183,\"int\":60.040000000000006,\"cha\":58.46,\"exp\":82.46400000000017,\"cre\":77.42,\"eff\":55.300000000000004,\"sal\":988.2900000000001,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Niud6rK\",\"mor\":100,\"hap\":97.89143109652777,\"ene\":97.89579137020603,\"int\":51.85,\"cha\":43.35,\"exp\":65.45400000000015,\"cre\":43.35,\"eff\":77.35,\"sal\":831.3,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"uS3OsQs\",\"mor\":90,\"hap\":97.95081016718494,\"ene\":85.14599471237072,\"int\":62.9,\"cha\":83.3,\"exp\":59.50400000000016,\"cre\":82.45,\"eff\":50.15,\"sal\":1002.15,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"QI5GRgh\",\"mor\":100,\"hap\":97.91009330463945,\"ene\":97.91499060854487,\"int\":62.98,\"cha\":62.04,\"exp\":85.09400000000015,\"cre\":77.08,\"eff\":65.8,\"sal\":1046.22,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tT6z4x2\",\"mor\":100,\"hap\":97.93965625313794,\"ene\":97.94340367480518,\"int\":83.7,\"cha\":93,\"exp\":84.23400000000017,\"cre\":83.7,\"eff\":80.91000000000001,\"sal\":1263.8700000000001,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"bt64jj4\",\"mor\":100,\"hap\":97.82740586082403,\"ene\":97.83028019011917,\"int\":57.75,\"cha\":50.050000000000004,\"exp\":68.93400000000017,\"cre\":66.22,\"eff\":45.43,\"sal\":852.39,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZIjuxya\",\"mor\":100,\"hap\":97.94593892076527,\"ene\":86.5506113778873,\"int\":51.839999999999996,\"cha\":78.72,\"exp\":76.25400000000016,\"cre\":92.16,\"eff\":59.519999999999996,\"sal\":1062.72,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"KtD9FUO\",\"mor\":100,\"hap\":97.83575885008861,\"ene\":97.83906181854083,\"int\":67.64,\"cha\":69.16,\"exp\":50.61400000000016,\"cre\":39.52,\"eff\":53.96,\"sal\":829.92,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lmtkynk\",\"mor\":100,\"hap\":97.88376416536053,\"ene\":80.85258097860095,\"int\":90.21,\"cha\":53.35,\"exp\":96.40400000000015,\"cre\":84.39,\"eff\":60.14,\"sal\":1140.72,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tc6oKC0\",\"mor\":100,\"hap\":97.91595107410504,\"ene\":97.92084544592045,\"int\":73.86999999999999,\"cha\":68.06,\"exp\":47.41400000000016,\"cre\":45.65,\"eff\":73.86999999999999,\"sal\":913.8299999999999,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"qiTj4sY\",\"mor\":100,\"hap\":97.8752009419771,\"ene\":97.87763282012088,\"int\":86.33,\"cha\":90.21,\"exp\":66.33400000000016,\"cre\":69.84,\"eff\":50.44,\"sal\":1076.7,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ig7jOZy\",\"mor\":99,\"hap\":97.89812647061528,\"ene\":94.9398110316067,\"int\":59.86,\"cha\":53.3,\"exp\":57.55400000000016,\"cre\":46.739999999999995,\"eff\":45.099999999999994,\"sal\":774.9,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"dZ7qeaV\",\"mor\":100,\"hap\":97.86934001051985,\"ene\":97.87254594435726,\"int\":48.379999999999995,\"cha\":68.88,\"exp\":71.49400000000016,\"cre\":74.61999999999999,\"eff\":41,\"sal\":900.3599999999999,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iRt7X68\",\"mor\":100,\"hap\":97.91915435920514,\"ene\":97.91975929702836,\"int\":72.16,\"cha\":73.04,\"exp\":88.73400000000017,\"cre\":80.08,\"eff\":66,\"sal\":1127.28,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iTNpSiI\",\"mor\":100,\"hap\":97.89742441315758,\"ene\":90.73356307129079,\"int\":46.36,\"cha\":63.08,\"exp\":49.85400000000016,\"cre\":65.36,\"eff\":50.92,\"sal\":813.96,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YFaXCa3\",\"mor\":100,\"hap\":97.84632396390911,\"ene\":89.27079307705107,\"int\":77.60000000000001,\"cha\":42.400000000000006,\"exp\":68.25400000000016,\"cre\":64,\"eff\":72,\"sal\":960,\"pro\":0,\"cyclesUntilRaise\":182,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}}],\"employeeProd\":{\"Operations\":3514.6265377492223,\"Engineer\":664.1638233884134,\"Business\":174.59000466645594,\"Management\":2091.823842954251,\"Research & Development\":1555.1447983586188,\"total\":8000.349007116962,\"Unassigned\":0}}},\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Sector-12\",\"cost\":1,\"size\":30,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"RAp2huM\",\"mor\":100,\"hap\":97.87828457423417,\"ene\":97.8810236269491,\"int\":41.82,\"cha\":72.97999999999999,\"exp\":63.64200000000073,\"cre\":61.49999999999999,\"eff\":45.099999999999994,\"sal\":797.04,\"pro\":0,\"cyclesUntilRaise\":346,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZZ2w61Y\",\"mor\":100,\"hap\":97.8352566003464,\"ene\":97.83935870867334,\"int\":48.14,\"cha\":55.61,\"exp\":83.27200000000073,\"cre\":82.17,\"eff\":82.17,\"sal\":996,\"pro\":0,\"cyclesUntilRaise\":346,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"t2DM3jd\",\"mor\":100,\"hap\":97.88403823399126,\"ene\":97.8862281763902,\"int\":76.63,\"cha\":95.06,\"exp\":73.68200000000073,\"cre\":67.89999999999999,\"eff\":85.36,\"sal\":1137.81,\"pro\":0,\"cyclesUntilRaise\":346,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"gZpWyv0\",\"mor\":100,\"hap\":97.92090407736913,\"ene\":97.92353657611052,\"int\":50.160000000000004,\"cha\":72.16,\"exp\":95.91900000000074,\"cre\":48.4,\"eff\":86.24,\"sal\":1000.5600000000001,\"pro\":0,\"cyclesUntilRaise\":347,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ws5MAaG\",\"mor\":100,\"hap\":97.88107193920945,\"ene\":97.8850449485331,\"int\":71.61,\"cha\":59.52,\"exp\":74.22900000000074,\"cre\":73.47,\"eff\":87.42,\"sal\":1040.67,\"pro\":0,\"cyclesUntilRaise\":347,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FiGPM06\",\"mor\":100,\"hap\":97.93292118620442,\"ene\":97.93432177680295,\"int\":72.97999999999999,\"cha\":75.44,\"exp\":66.91900000000072,\"cre\":59.04,\"eff\":61.49999999999999,\"sal\":949.56,\"pro\":0,\"cyclesUntilRaise\":347,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"buOYLey\",\"mor\":100,\"hap\":97.91034857708568,\"ene\":97.91302838430012,\"int\":84.6,\"cha\":71.44,\"exp\":103.47800000000053,\"cre\":87.42,\"eff\":49.82,\"sal\":1147.74,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Ql5U1Ib\",\"mor\":100,\"hap\":97.87050006334513,\"ene\":97.8725697214601,\"int\":63.9,\"cha\":81.9,\"exp\":74.47800000000053,\"cre\":85.5,\"eff\":61.2,\"sal\":1058.4,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ldkDqhR\",\"mor\":100,\"hap\":97.88036398782981,\"ene\":97.8831010365843,\"int\":70.81,\"cha\":72.75,\"exp\":109.23800000000054,\"cre\":54.32,\"eff\":65.96,\"sal\":1076.7,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"K5hbxhM\",\"mor\":100,\"hap\":97.91586744014198,\"ene\":97.9207953934526,\"int\":46.5,\"cha\":57.660000000000004,\"exp\":64.39800000000054,\"cre\":82.77000000000001,\"eff\":71.61,\"sal\":926.2800000000001,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vPWaLIB\",\"mor\":100,\"hap\":97.92295600970355,\"ene\":97.92785594320041,\"int\":69.52,\"cha\":48.4,\"exp\":62.578000000000536,\"cre\":61.6,\"eff\":46.64,\"sal\":823.68,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"FIJThJ5\",\"mor\":100,\"hap\":97.90187512053495,\"ene\":97.90485211202316,\"int\":83.7,\"cha\":69.3,\"exp\":87.97800000000053,\"cre\":80.10000000000001,\"eff\":83.7,\"sal\":1171.8,\"pro\":0,\"cyclesUntilRaise\":74,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"YzSbowg\",\"mor\":100,\"hap\":87.90778289310144,\"ene\":97.9386133244248,\"int\":65.36,\"cha\":62.78,\"exp\":60.98700000000016,\"cre\":83.42,\"eff\":48.16,\"sal\":949.4399999999999,\"pro\":0,\"cyclesUntilRaise\":191,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"L7krxaf\",\"mor\":100,\"hap\":95.10710351877482,\"ene\":90.9874401818765,\"int\":50.220000000000006,\"cha\":65.10000000000001,\"exp\":67.46700000000016,\"cre\":48.36,\"eff\":50.220000000000006,\"sal\":831.4200000000001,\"pro\":0,\"cyclesUntilRaise\":191,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"plenzpY\",\"mor\":100,\"hap\":97.91740779743105,\"ene\":97.91959985033256,\"int\":76.44,\"cha\":96.03999999999999,\"exp\":102.22700000000016,\"cre\":93.1,\"eff\":60.76,\"sal\":1273.02,\"pro\":0,\"cyclesUntilRaise\":191,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vDuOvvj\",\"mor\":100,\"hap\":97.93284816364252,\"ene\":97.93531960771078,\"int\":39.78,\"cha\":70.2,\"exp\":52.58700000000016,\"cre\":56.940000000000005,\"eff\":42.120000000000005,\"sal\":772.2,\"pro\":0,\"cyclesUntilRaise\":191,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tnb1pV0\",\"mor\":100,\"hap\":97.88358166359183,\"ene\":97.88548435379894,\"int\":68.06,\"cha\":81.33999999999999,\"exp\":77.26400000000015,\"cre\":72.21,\"eff\":55.61,\"sal\":1050.78,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"2TsKUPR\",\"mor\":100,\"hap\":97.8488602661899,\"ene\":97.8491419232839,\"int\":57.62,\"cha\":79.12,\"exp\":70.44400000000016,\"cre\":67.94,\"eff\":45.58,\"sal\":949.4399999999999,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"n4ZoObJ\",\"mor\":90,\"hap\":97.93031151330982,\"ene\":97.9343100260096,\"int\":80.04,\"cha\":80.96000000000001,\"exp\":67.70400000000016,\"cre\":68.08,\"eff\":55.2,\"sal\":1043.28,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"teF7FhD\",\"mor\":100,\"hap\":89.71617400873185,\"ene\":97.94614795948327,\"int\":63.64,\"cha\":55.04,\"exp\":59.26400000000016,\"cre\":65.36,\"eff\":71.38,\"sal\":931.38,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fybhUAg\",\"mor\":100,\"hap\":97.92303191214154,\"ene\":87.88152362501454,\"int\":76.44,\"cha\":49.98,\"exp\":88.50400000000016,\"cre\":87.22,\"eff\":94.08,\"sal\":1176,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"WL9FuLU\",\"mor\":100,\"hap\":97.92748801619892,\"ene\":80.12278434977466,\"int\":79.67999999999999,\"cha\":71.03999999999999,\"exp\":69.50400000000016,\"cre\":57.599999999999994,\"eff\":57.599999999999994,\"sal\":993.5999999999999,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"6DRFezu\",\"mor\":100,\"hap\":97.92614685388172,\"ene\":97.92872165233034,\"int\":46.5,\"cha\":49.29,\"exp\":67.46400000000015,\"cre\":87.42,\"eff\":69.75,\"sal\":948.6,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"vIJ77sF\",\"mor\":100,\"hap\":97.89246786581629,\"ene\":97.89563590285822,\"int\":81.7,\"cha\":53.32,\"exp\":70.44400000000016,\"cre\":62.78,\"eff\":61.06,\"sal\":975.24,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"lzkQZjh\",\"mor\":100,\"hap\":97.89624492809858,\"ene\":92.49965467325354,\"int\":56.730000000000004,\"cha\":53.010000000000005,\"exp\":53.51400000000016,\"cre\":53.010000000000005,\"eff\":46.5,\"sal\":775.62,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Management\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ecJyKgI\",\"mor\":100,\"hap\":97.88133645782912,\"ene\":97.88639453433424,\"int\":81.7,\"cha\":73.96,\"exp\":77.32400000000015,\"cre\":70.52,\"eff\":66.22,\"sal\":1096.5,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tUcOub7\",\"mor\":100,\"hap\":97.87975489978314,\"ene\":97.88302217889137,\"int\":79.89999999999999,\"cha\":57.8,\"exp\":64.57400000000015,\"cre\":73.95,\"eff\":67.14999999999999,\"sal\":1017.4499999999999,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"PYe4qeq\",\"mor\":100,\"hap\":97.9323955229881,\"ene\":97.93360471616172,\"int\":43.74,\"cha\":48.6,\"exp\":57.68400000000016,\"cre\":70.47,\"eff\":51.84,\"sal\":804.33,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"4vnQZMO\",\"mor\":100,\"hap\":93.21465772978966,\"ene\":80.03895454524951,\"int\":66.96000000000001,\"cha\":80.91000000000001,\"exp\":86.99400000000017,\"cre\":84.63000000000001,\"eff\":48.36,\"sal\":1090.89,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"H2xmak5\",\"mor\":100,\"hap\":97.96677732312426,\"ene\":97.9683821217801,\"int\":61.49999999999999,\"cha\":49.199999999999996,\"exp\":54.244000000000156,\"cre\":65.6,\"eff\":82,\"sal\":924.9599999999999,\"pro\":0,\"cyclesUntilRaise\":192,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":50}}],\"employeeProd\":{\"Operations\":3655.5163779177665,\"Engineer\":456.91714343297576,\"Business\":160.94802849217268,\"Management\":2003.26779625485,\"Research & Development\":1464.5513957984779,\"total\":7741.200741896243,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"New Tokyo\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"qLpjnEb\",\"mor\":90,\"hap\":90.71900683646827,\"ene\":92.87270790818015,\"int\":85.5,\"cha\":81,\"exp\":107.52300000000074,\"cre\":69.3,\"eff\":75.60000000000001,\"sal\":1198.8,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"a7Bv7IL\",\"mor\":100,\"hap\":92.98830063687633,\"ene\":92.99040834869287,\"int\":42.400000000000006,\"cha\":64,\"exp\":80.92300000000073,\"cre\":54.400000000000006,\"eff\":62.400000000000006,\"sal\":854.4000000000001,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Du8oRhm\",\"mor\":100,\"hap\":92.83539644965172,\"ene\":92.83550703718348,\"int\":76.54,\"cha\":80.99,\"exp\":107.43300000000073,\"cre\":65.86,\"eff\":51.62,\"sal\":1089.3600000000001,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iiVEMlQ\",\"mor\":100,\"hap\":92.96418172670077,\"ene\":89.43064057639407,\"int\":48.36,\"cha\":81.84,\"exp\":88.14300000000074,\"cre\":57.660000000000004,\"eff\":80.91000000000001,\"sal\":1012.7700000000001,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"arW1jPD\",\"mor\":100,\"hap\":92.90764925295358,\"ene\":92.91023370335526,\"int\":78.57,\"cha\":81.48,\"exp\":108.56300000000073,\"cre\":68.87,\"eff\":76.63,\"sal\":1184.37,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"51DyYvt\",\"mor\":100,\"hap\":93.04016368022515,\"ene\":93.04310017806499,\"int\":72.16,\"cha\":44,\"exp\":63.32300000000073,\"cre\":46.64,\"eff\":51.92,\"sal\":776.16,\"pro\":0,\"cyclesUntilRaise\":359,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"8K0cnbg\",\"mor\":100,\"hap\":92.96723870292978,\"ene\":92.97023628799057,\"int\":63,\"cha\":91,\"exp\":108.14800000000054,\"cre\":96,\"eff\":61,\"sal\":1215,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"NlLdaom\",\"mor\":100,\"hap\":92.96792398668596,\"ene\":92.97070717833951,\"int\":46.61,\"cha\":78.21000000000001,\"exp\":60.758000000000536,\"cre\":71.10000000000001,\"eff\":61.620000000000005,\"sal\":912.45,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RXM6I5B\",\"mor\":100,\"hap\":92.86479436882456,\"ene\":92.86579750693315,\"int\":44.46,\"cha\":41.34,\"exp\":85.90800000000054,\"cre\":51.480000000000004,\"eff\":54.6,\"sal\":790.9200000000001,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"IZUL77V\",\"mor\":100,\"hap\":92.95887912477579,\"ene\":92.9606638102668,\"int\":53.58,\"cha\":68.61999999999999,\"exp\":90.28800000000054,\"cre\":56.4,\"eff\":52.64,\"sal\":922.14,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"opmOghB\",\"mor\":100,\"hap\":92.96176394697304,\"ene\":92.96470321393194,\"int\":73.92,\"cha\":67.76,\"exp\":66.06800000000054,\"cre\":57.2,\"eff\":47.52,\"sal\":894.96,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Management\",\"salary\":150}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"sPOmKhl\",\"mor\":100,\"hap\":92.947530411509,\"ene\":92.94969726132405,\"int\":68.8,\"cha\":48.800000000000004,\"exp\":75.74800000000053,\"cre\":72.8,\"eff\":67.2,\"sal\":957.6,\"pro\":0,\"cyclesUntilRaise\":84,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":150}}],\"employeeProd\":{\"Operations\":1124.5071561846298,\"Engineer\":291.5492924054604,\"Business\":146.0000372382994,\"Management\":898.0719082627911,\"Research & Development\":535.1280878748626,\"total\":2995.2564819660433,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Ishima\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"JusZsxk\",\"mor\":95.4,\"hap\":93.049192960331,\"ene\":93.049192960331,\"int\":67.16,\"cha\":50.6,\"exp\":68.07400000000074,\"cre\":56.120000000000005,\"eff\":77.28,\"sal\":899.76,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"RrvbkSw\",\"mor\":100,\"hap\":92.93280504519518,\"ene\":92.93280504519518,\"int\":52.93,\"cha\":46.61,\"exp\":96.73400000000073,\"cre\":50.56,\"eff\":51.35,\"sal\":836.61,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xhWOiPv\",\"mor\":90,\"hap\":92.98927405228352,\"ene\":92.98927405228352,\"int\":51.84,\"cha\":58.32000000000001,\"exp\":79.25400000000073,\"cre\":61.56,\"eff\":60.75000000000001,\"sal\":877.23,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ULm8not\",\"mor\":100,\"hap\":92.94749355099663,\"ene\":92.94749355099663,\"int\":46.02,\"cha\":39.78,\"exp\":79.37400000000073,\"cre\":73.32000000000001,\"eff\":50.7,\"sal\":809.64,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"iPTKwJn\",\"mor\":100,\"hap\":78.25768303468077,\"ene\":93.03131500643805,\"int\":66.88,\"cha\":54.56,\"exp\":82.67400000000073,\"cre\":80.08,\"eff\":48.4,\"sal\":939.84,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"BjSO5Dx\",\"mor\":100,\"hap\":93.05661138970825,\"ene\":93.05661138970825,\"int\":47.6,\"cha\":79.05,\"exp\":100.06400000000073,\"cre\":56.1,\"eff\":48.449999999999996,\"sal\":935.85,\"pro\":0,\"cyclesUntilRaise\":362,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"Y1URFmI\",\"mor\":79,\"hap\":52.93269549200689,\"ene\":49.93269549200689,\"int\":46.02,\"cha\":70.2,\"exp\":80.78700000000046,\"cre\":39.78,\"eff\":48.36,\"sal\":819,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"TAdpmJw\",\"mor\":72,\"hap\":79.94775105355765,\"ene\":63.947751053557646,\"int\":57.339999999999996,\"cha\":56.4,\"exp\":59.14700000000046,\"cre\":91.17999999999999,\"eff\":67.67999999999999,\"sal\":958.8,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ex5WU0W\",\"mor\":61,\"hap\":84.91732339656132,\"ene\":92.91732339656132,\"int\":76,\"cha\":55.099999999999994,\"exp\":60.597000000000456,\"cre\":75.05,\"eff\":79.8,\"sal\":1003.1999999999999,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"9qxu0i4\",\"mor\":63,\"hap\":63.886604397115605,\"ene\":63.886604397115605,\"int\":92.14999999999999,\"cha\":76.63,\"exp\":97.50700000000046,\"cre\":77.6,\"eff\":48.5,\"sal\":1140.72,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Management\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"xbvqC4R\",\"mor\":98,\"hap\":62.91866997598222,\"ene\":91.91866997598196,\"int\":57,\"cha\":90.25,\"exp\":102.39700000000046,\"cre\":50.349999999999994,\"eff\":70.3,\"sal\":1074.45,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Management\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"doPoAqs\",\"mor\":76,\"hap\":78.92421584715383,\"ene\":70.92421584715383,\"int\":47.94,\"cha\":47.94,\"exp\":105.20700000000045,\"cre\":67.67999999999999,\"eff\":55.459999999999994,\"sal\":936.2399999999999,\"pro\":0,\"cyclesUntilRaise\":351,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":200}}],\"employeeProd\":{\"Operations\":703.0006700894439,\"Engineer\":212.32430456105533,\"Business\":99.63752470975741,\"Management\":538.2383778772192,\"Research & Development\":368.4649287094287,\"total\":1921.6658059469044,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"loc\":\"Volhaven\",\"cost\":1,\"size\":12,\"comf\":1,\"beau\":1,\"tier\":\"Basic\",\"minEne\":0,\"maxEne\":100,\"minHap\":0,\"maxHap\":100,\"maxMor\":100,\"employees\":[{\"ctor\":\"Employee\",\"data\":{\"name\":\"F2yJCFe\",\"mor\":100,\"hap\":83.5636424566881,\"ene\":92.96551903899558,\"int\":91,\"cha\":81,\"exp\":91.30500000000073,\"cre\":55,\"eff\":82,\"sal\":1143,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"1oRzZny\",\"mor\":100,\"hap\":85.42836268648588,\"ene\":93.03245271366369,\"int\":80.64,\"cha\":96,\"exp\":91.30500000000073,\"cre\":96,\"eff\":72,\"sal\":1249.9199999999998,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ixioIaT\",\"mor\":100,\"hap\":92.89948985406093,\"ene\":92.89995387444895,\"int\":51.35,\"cha\":60.830000000000005,\"exp\":95.93500000000074,\"cre\":63.2,\"eff\":67.15,\"sal\":957.48,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Engineer\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"t7BF5Yz\",\"mor\":100,\"hap\":92.94071413942461,\"ene\":92.94140100763944,\"int\":78.85,\"cha\":71.38,\"exp\":69.93500000000073,\"cre\":71.38,\"eff\":76.36,\"sal\":1045.8,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Business\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZRIen1U\",\"mor\":100,\"hap\":92.90266339141341,\"ene\":92.90292735047976,\"int\":70.2,\"cha\":71.76,\"exp\":70.78500000000074,\"cre\":46.800000000000004,\"eff\":61.620000000000005,\"sal\":905.58,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Management\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"ZvYwys8\",\"mor\":90,\"hap\":93.0370041033915,\"ene\":83.54058549042757,\"int\":63.7,\"cha\":76.44,\"exp\":110.30500000000073,\"cre\":51.870000000000005,\"eff\":68.25,\"sal\":1053.78,\"pro\":0,\"cyclesUntilRaise\":365,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":600}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"fNEViSK\",\"mor\":56,\"hap\":83.91436438444646,\"ene\":69.91436438444646,\"int\":55.61,\"cha\":64.74,\"exp\":66.91200000000045,\"cre\":73.86999999999999,\"eff\":78.85,\"sal\":983.55,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"DrYWCoA\",\"mor\":84,\"hap\":90.79705614246663,\"ene\":58.79705614246665,\"int\":72.75,\"cha\":84.39,\"exp\":102.34200000000045,\"cre\":88.27,\"eff\":54.32,\"sal\":1169.82,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"tETcsYR\",\"mor\":97,\"hap\":66.88928351987332,\"ene\":78.88928351987332,\"int\":56.96,\"cha\":61.410000000000004,\"exp\":89.56200000000047,\"cre\":75.65,\"eff\":79.21000000000001,\"sal\":1051.98,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Operations\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"VX1Gm7G\",\"mor\":63,\"hap\":93.92307197869236,\"ene\":81.92307197869236,\"int\":48.980000000000004,\"cha\":40.29,\"exp\":76.91200000000046,\"cre\":72.68,\"eff\":60.040000000000006,\"sal\":860.3100000000001,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Management\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"wHfyjeo\",\"mor\":53,\"hap\":50.917804281595416,\"ene\":91.9178042815952,\"int\":55.29,\"cha\":75.66,\"exp\":90.70200000000045,\"cre\":67.89999999999999,\"eff\":72.75,\"sal\":1050.51,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Management\",\"salary\":200}},{\"ctor\":\"Employee\",\"data\":{\"name\":\"5p4KjmA\",\"mor\":55,\"hap\":77.95080245268863,\"ene\":91.95080245268863,\"int\":58.279999999999994,\"cha\":74.25999999999999,\"exp\":86.39200000000045,\"cre\":78.02,\"eff\":79.89999999999999,\"sal\":1094.1599999999999,\"pro\":0,\"cyclesUntilRaise\":356,\"loc\":\"\",\"pos\":\"Research & Development\",\"salary\":200}}],\"employeeProd\":{\"Operations\":873.9497035383735,\"Engineer\":263.96848486332453,\"Business\":145.77858943846798,\"Management\":496.8298917887513,\"Research & Development\":359.3243222597538,\"total\":2139.850991888671,\"Unassigned\":0}}}},\"name\":\"Agro Co.\",\"type\":\"Agriculture\",\"sciResearch\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Scientific Research\",\"qty\":7914.671081809652,\"qlt\":0,\"dmd\":0,\"dmdR\":[0,0],\"cmp\":0,\"cmpR\":[0,0],\"mv\":0,\"mku\":0,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":0,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"researched\":{\"Hi-Tech R&D Laboratory\":true},\"reqMats\":{\"Water\":0.5,\"Energy\":0.5},\"prodMats\":[\"Plants\",\"Food\"],\"products\":{},\"makesProducts\":false,\"awareness\":79.67351443776072,\"popularity\":25.350042133448127,\"startingCost\":40000000000,\"reFac\":0.72,\"sciFac\":0.5,\"hwFac\":0.2,\"robFac\":0.3,\"aiFac\":0.3,\"advFac\":0.04,\"prodMult\":124.70258284206801,\"lastCycleRevenue\":\"12098275.047620685\",\"lastCycleExpenses\":\"2405027.71182724357\",\"thisCycleRevenue\":\"120934059.72537114\",\"thisCycleExpenses\":\"24049994.6533573197\",\"upgrades\":[102,16],\"state\":\"EXPORT\",\"newInd\":false,\"warehouses\":{\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":4,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":274.59337358808665,\"loc\":\"Aevum\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":65.72766298678722,\"dmdR\":[65,85],\"cmp\":49.663846469856544,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":137.29782996396136,\"sll\":0.001143169918032072,\"prd\":-137.29668679404332,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1362.5590592647363,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":94.52916758981651,\"dmdR\":[80,99],\"cmp\":93.12210715735972,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":137.29782996396136,\"sll\":0.001143169918032072,\"prd\":-137.29668679404332,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1952.3920796521093,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":95.0901205911951,\"dmd\":76.53453579036025,\"dmdR\":[70,90],\"cmp\":39.69598225154303,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":274.59337358808665,\"prd\":274.59337358808665,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7537.61454167094,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":95.0901205911951,\"dmd\":88.36468632618606,\"dmdR\":[20,90],\"cmp\":55.09729354447777,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":274.59337358808665,\"prd\":274.59337358808665,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2982.5538598939,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.48380768841722,\"dmdR\":[80,90],\"cmp\":85.85814884191494,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6279.439549270432,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":77684.6054301932,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":97.99771144622856,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":16228.515547029245,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160520,\"qlt\":0,\"dmd\":92.51566007384788,\"dmdR\":[5,99],\"cmp\":70.45723169185798,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":98175.73321555884,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"undefined\":0,\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":5,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":268.9498455157322,\"loc\":\"Sector-12\",\"size\":500,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":81.5418666536058,\"dmdR\":[65,85],\"cmp\":57.98270156268572,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":134.47581729272596,\"sll\":0.0008945348598672354,\"prd\":-134.4749227578661,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1441.2429657740174,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":86.51540706105179,\"dmdR\":[80,99],\"cmp\":75.90074780920021,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":134.47581729272596,\"sll\":0.0008945348598672354,\"prd\":-134.4749227578661,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1996.1730407799628,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":94.03001817621309,\"dmd\":72.90337147288464,\"dmdR\":[70,90],\"cmp\":72.06389583966109,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":268.9498455157322,\"prd\":268.9498455157322,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4036.864276434323,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":94.03001817621309,\"dmd\":77.60141120376194,\"dmdR\":[20,90],\"cmp\":38.8824588493728,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":268.9498455157322,\"prd\":268.9498455157322,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3446.3641857437724,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":84.3318729605611,\"dmdR\":[80,90],\"cmp\":71.68690604108906,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9274.160760867871,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72425.704021635,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":91.84775369159904,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":12242.024453860886,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":159540,\"qlt\":0,\"dmd\":86.89804097914985,\"dmdR\":[5,99],\"cmp\":25.190367939409633,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":131492.46086339376,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":187.81864704676,\"loc\":\"New Tokyo\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":83.8564626716534,\"dmdR\":[65,85],\"cmp\":54.0090393373196,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":93.90996538890718,\"sll\":0.0006418655271772878,\"prd\":-93.90932352338,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1555.6466218775379,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":81.79826948508214,\"dmdR\":[80,99],\"cmp\":84.69170824112226,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":93.90996538890718,\"sll\":0.0006418655271772878,\"prd\":-93.90932352338,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1943.4736197551913,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":92.1935440889177,\"dmd\":81.70932488344968,\"dmdR\":[70,90],\"cmp\":78.48161860550847,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":187.81864704676,\"prd\":187.81864704676,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":4512.519865173386,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":92.1935440889177,\"dmd\":84.94227253821695,\"dmdR\":[20,90],\"cmp\":48.984678397369244,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":187.81864704676,\"prd\":187.81864704676,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3203.641345305407,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":85.71304340880417,\"dmdR\":[80,90],\"cmp\":66.34178996338063,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7570.486270792053,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":71892.3492860146,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":95.88391824390541,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":14358.831289575075,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160530,\"qlt\":0,\"dmd\":26.7251307360848,\"dmdR\":[5,99],\"cmp\":38.65480796134647,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":75474.98836228965,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":157.61674535408883,\"loc\":\"Ishima\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":66.07147562521901,\"dmdR\":[65,85],\"cmp\":52.038732197222224,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":78.80906912681556,\"sll\":0.0006964497711351214,\"prd\":-78.80837267704442,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1496.5600462051295,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":81.5484927456121,\"dmdR\":[80,99],\"cmp\":80.33766007103578,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":78.80906912681556,\"sll\":0.0006964497711351214,\"prd\":-78.80837267704442,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1834.0304352966466,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":91.31383856227772,\"dmd\":74.11869043558504,\"dmdR\":[70,90],\"cmp\":57.36913516888684,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":157.61674535408883,\"prd\":157.61674535408883,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":5937.5564145364,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":91.31383856227772,\"dmd\":73.65221138791159,\"dmdR\":[20,90],\"cmp\":49.26063436728507,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":157.61674535408883,\"prd\":157.61674535408883,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2971.308136925628,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.04715167542301,\"dmdR\":[80,90],\"cmp\":83.66017203098171,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7997.401711877437,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80442.83481472712,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":82.22688291197876,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13053.959170569244,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160530,\"qlt\":0,\"dmd\":84.59758797140823,\"dmdR\":[5,99],\"cmp\":45.97193007380919,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":115652.3241642209,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":2,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":163.74421661895872,\"loc\":\"Volhaven\",\"size\":200,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":68.51333059347891,\"dmdR\":[65,85],\"cmp\":53.18805864965706,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":81.87265579871847,\"sll\":0.0005474892391134744,\"prd\":-81.87210830947936,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1477.1862059515236,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":93.39491015802271,\"dmdR\":[80,99],\"cmp\":74.38325770435469,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":81.87265579871847,\"sll\":0.0005474892391134744,\"prd\":-81.87210830947936,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2117.667891539735,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":91.88813752236572,\"dmd\":75.48238390324998,\"dmdR\":[70,90],\"cmp\":72.96189163231715,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":163.74421661895872,\"prd\":163.74421661895872,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6957.132445548264,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":91.88813752236572,\"dmd\":51.434871666504534,\"dmdR\":[20,90],\"cmp\":34.08754874654154,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":163.74421661895872,\"prd\":163.74421661895872,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3174.6996598497653,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":83.91542148633775,\"dmdR\":[80,90],\"cmp\":86.14486006131214,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":8246.714861938426,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":86037.11946079374,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":80.92163881276151,\"dmdR\":[80,99],\"cmp\":9,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":15051.29804632543,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":160540,\"qlt\":0,\"dmd\":69.27775794840241,\"dmdR\":[5,99],\"cmp\":63.791395422926236,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":80359.94474494018,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"breakdown\":\"RealEstate: 0.0<br>\",\"level\":4,\"sizeUsed\":0,\"smartSupplyEnabled\":true,\"smartSupplyConsiderExports\":false,\"smartSupplyStore\":272.72409948847763,\"loc\":\"Chongqing\",\"size\":400,\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Water\",\"qty\":0,\"qlt\":0,\"dmd\":69.69866821349805,\"dmdR\":[65,85],\"cmp\":47.20207679683918,\"cmpR\":[40,60],\"mv\":0.2,\"mku\":6,\"buy\":136.36313920902393,\"sll\":0.0010894647851273475,\"prd\":-136.36204974423882,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1525.4077212853126,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Energy\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Energy\",\"qty\":0,\"qlt\":0,\"dmd\":92.72196288841643,\"dmdR\":[80,99],\"cmp\":93.91585220544648,\"cmpR\":[65,95],\"mv\":0.2,\"mku\":6,\"buy\":136.36313920902393,\"sll\":0.0010894647851273475,\"prd\":-136.36204974423882,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":1973.5544982219624,\"sCost\":\"MP*0.1\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Food\",\"qty\":0,\"qlt\":96.3317837402005,\"dmd\":88.16156674937433,\"dmdR\":[70,90],\"cmp\":36.57310923653896,\"cmpR\":[35,85],\"mv\":1,\"mku\":3,\"buy\":0,\"sll\":272.72409948847763,\"prd\":272.72409948847763,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":6404.431795902094,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Plants\",\"qty\":0,\"qlt\":96.3317837402005,\"dmd\":83.71017865320917,\"dmdR\":[20,90],\"cmp\":44.52276321330232,\"cmpR\":[30,70],\"mv\":0.6,\"mku\":3.75,\"buy\":0,\"sll\":272.72409948847763,\"prd\":272.72409948847763,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":3420.7669314027844,\"sCost\":\"MP\",\"prdman\":[false,0],\"sllman\":[true,\"MAX\"],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Metal\",\"qty\":0,\"qlt\":0,\"dmd\":80,\"dmdR\":[75,85],\"cmp\":70,\"cmpR\":[60,80],\"mv\":1,\"mku\":6,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":2650,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Hardware\",\"qty\":0,\"qlt\":0,\"dmd\":88.55668348469156,\"dmdR\":[80,90],\"cmp\":87.70193057085906,\"cmpR\":[65,95],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":7197.290882213552,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Chemicals\",\"qty\":0,\"qlt\":0,\"dmd\":55,\"dmdR\":[40,70],\"cmp\":60,\"cmpR\":[40,80],\"mv\":1.2,\"mku\":2,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":9000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Drugs\",\"qty\":0,\"qlt\":0,\"dmd\":60,\"dmdR\":[45,75],\"cmp\":70,\"cmpR\":[40,99],\"mv\":1.6,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":40000,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Robots\",\"qty\":0,\"qlt\":0,\"dmd\":9,\"dmdR\":[80,9],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.5,\"mku\":1,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":72128.69912289332,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"AICores\":{\"ctor\":\"Material\",\"data\":{\"name\":\"AI Cores\",\"qty\":0,\"qlt\":0,\"dmd\":91.97499574578465,\"dmdR\":[80,99],\"cmp\":80,\"cmpR\":[80,9],\"mv\":0.8,\"mku\":0.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":13656.29783082002,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}},\"RealEstate\":{\"ctor\":\"Material\",\"data\":{\"name\":\"Real Estate\",\"qty\":159630,\"qlt\":0,\"dmd\":95.31800117413958,\"dmdR\":[5,99],\"cmp\":45.47031955856049,\"cmpR\":[25,75],\"mv\":1.5,\"mku\":1.5,\"buy\":0,\"sll\":0,\"prd\":0,\"imp\":0,\"exp\":[],\"totalExp\":0,\"bCost\":151422.43661060152,\"sCost\":0,\"prdman\":[false,0],\"sllman\":[false,0],\"marketTa1\":false,\"marketTa2\":false,\"marketTa2Price\":0}}}}}}}}],\"funds\":\"159572157882.10067247\",\"revenue\":\"12098275.047620685\",\"expenses\":\"2405027.71182724357\",\"fundingRound\":0,\"public\":true,\"totalShares\":1800000000,\"numShares\":1000000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendPercentage\":0,\"dividendTaxPercentage\":50,\"issuedShares\":286000000,\"sharePrice\":675.4241580455358,\"storedCycles\":839027,\"unlockUpgrades\":[0,1,0,0,1,0,0],\"upgrades\":[1,0,1,0,3,3,3,3,3,0],\"upgradeMultipliers\":[1.03,1,1.001,1,1.3,1.3,1.3,1.3,1.03,1],\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}}}},\"bladeburner\":0,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":4,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1561223451788,\"totalPlaytime\":6004098000,\"playtimeSinceLastAug\":301264400,\"playtimeSinceLastBitnode\":301264400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":171103334.40001103,\"gang\":0,\"hacking\":3805618585.4260635,\"hacknetnode\":186330028.05040714,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":4163051947.8781633,\"work\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":171103334.40001103,\"gang\":0,\"hacking\":3805618585.4260635,\"hacknetnode\":186330028.05040714,\"hospitalization\":0,\"infiltration\":0,\"stock\":0,\"total\":4163051947.8781633,\"work\":0}},\"scriptProdSinceLastAug\":2934592909,\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null,\"factionWorkType\":\"Faction Hacking Work\"}}","AllServersSave":"{\"60.8.2.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"60.8.2.2\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\"],\"ramUsed\":23.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/master/hacking/director-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":227907.82899999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73324.80999949867,\"ramUsage\":9.75,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[300,\"tprint\"],\"dataMap\":{},\"filename\":\"/master/hacking/monitor-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":227907.834,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73323.60999949869,\"ramUsage\":3,\"server\":\"60.8.2.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",8],\"dataMap\":{},\"filename\":\"/master/buy_server/buy_server-ns2.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":227704.20900000003,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42115.80999994858,\"ramUsage\":10.5,\"server\":\"60.8.2.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var equipment = gang.getTaskNames();\\n\\nfor (i=0; i < equipment.length; i++) {\\n    tprint(equipment[i]);\\n}\\n\\n\\n\\ntprint(\\\"Done!\\\");\",\"filename\":\"/temp/scratch.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"clear(1);\\n\\ni=0;\\nvar success = true;\\n\\nwhile(success)\\n{\\n    success = tryWrite(1, i);\\n    print(\\\"Tried to write \\\" + i + \\\" to port 1. Success: \\\" + success);\\n    i++;\\n}\\n\\nclear(1);\",\"filename\":\"/temp/port_write_script_test.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/scripts/functions/getRootAccess.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/scripts/hacking_2_0/helpers/hack_target.script\\\";\\nvar growScript = \\\"/scripts/hacking_2_0/helpers/grow_target.script\\\";\\nvar weakenScript = \\\"/scripts/hacking_2_0/helpers/weaken_target.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/temp/copy_test/scripts/hacking_2_0/run.script\",\"module\":\"\",\"ramUsage\":4.9,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"filename\":\"/temp/copy_test/scripts/hacking_v20/run.script\",\"module\":\"\",\"ramUsage\":0,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    \\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/_getScriptList-ns2.js\\\", \\\"/pull/_getScriptList-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/pull_scripts-ns2.js\\\", \\\"/pull/pull_scripts-ns2.js\\\");\\n    await ns.wget(\\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/master/home/pull/destroy_scripts-ns2.js\\\", \\\"/pull/destroy_scripts-ns2.js\\\");\\n\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait ns.run(\\\"/pull/pull_scripts-ns2.js\\\", 1, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t\\tns.tprint(\\\"===== ALERT ===== Valid values: master, beta\\\");\\n\\t}\\n\\n\\tns.tprint(\\\"Pull complete!\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait pull(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function pull(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\n\\t// gitHub Setup\\n\\tvar gitHubBranchPath = branch;\\n\\tvar gitHubPrjectURL = \\\"https://raw.githubusercontent.com/FlawlessCow/BitBurner/\\\";\\n\\tvar gitHubScriptsPath = \\\"/home/scripts\\\";\\n\\t\\n\\t// bitBurner setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar sourcePath = gitHubPrjectURL + gitHubBranchPath + gitHubScriptsPath + scriptPath;\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.wget(sourcePath, destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/pull_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport { getScriptList } from \\\"/pull/_getScriptList-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        destination : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n    if(sArgs.destination === \\\"beta\\\" || sArgs.destination === \\\"master\\\") {\\n\\t\\tawait destroy(ns, sArgs.destination);\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"===== ALERT ===== Not a valid argument\\\");\\n\\t\\tns.tprint(\\\"===== ALERT ===== sArgs.destination: \\\" + sArgs.destination);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function destroy(ns, branch){\\n\\tvar scripts = getScriptList();\\n\\tvar deprecatedScripts = getDrecatedScriptList();\\n\\t\\n\\t// bitBurner path setup\\n\\tvar bitBurnerBranchPath = \\\"/\\\" + branch;\\n\\t\\n\\tfor(var i = 0; i < scripts.length; i++) {\\n\\t\\tvar scriptPath = scripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n\\t\\n\\tfor(var i = 0; i < deprecatedScripts.length; i++) {\\n\\t\\tvar scriptPath = deprecatedScripts[i];\\n\\t\\tvar destPath = bitBurnerBranchPath + scriptPath;\\n\\n\\t\\tawait ns.rm(destPath);\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/pull/destroy_scripts-ns2.js\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"run(\\\"./../path_bravo/test.script\\\");\",\"filename\":\"/temp/rel_dir_test/path_alpha/test.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"tprint(\\\"Test successful\\\");\",\"filename\":\"/temp/rel_dir_test/path_bravo/test.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_getScriptList : true,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getScriptList(){\\n\\tvar scripts = [\\n\\t\\t// buy_server\\n\\t\\t\\\"/buy_server/buy_server-ns1.script\\\",\\n\\t\\t\\\"/buy_server/buy_server-ns2.js\\\",\\n\\t\\t// hacknet\\n\\t\\t\\\"/character/hacknet/hashmanager-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/node_autobuy-ns2.js\\\",\\n\\t\\t\\\"/character/hacknet/server_autobuy-ns2.js\\\",\\n\\t\\t// walet\\n\\t\\t\\\"/character/wallet-ns2.js\\\",\\n\\t\\t// deploy\\n\\t\\t\\\"/deploy/kill_all-ns2.js\\\",\\n\\t\\t\\\"/deploy/server_steal_basic-ns2.js\\\",\\n\\t\\t// functions\\n\\t\\t\\\"/functions/buildServerInfoArray-ns2.js\\\",\\n\\t\\t\\\"/functions/enumLib-ns1.script\\\",\\n\\t\\t\\\"/functions/enumLib-ns2.js\\\",\\n\\t\\t\\\"/functions/getNumOpenablePorts-ns2.js\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\\"/functions/getRootAccess-ns2.js\\\",\\n\\t\\t\\\"/functions/getServerRamObj-ns2.js\\\",\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/advanced/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/advanced/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/install_and_run-ns1.script\\\",\\n\\t\\t\\\"/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_harakiri-sushi-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_joesguns-ns1.script\\\",\\n\\t\\t\\\"/hacking/early/early_hack_template-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/grow_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/hack_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target_loop-ns1.script\\\",\\n\\t\\t\\\"/hacking/helpers/weaken_target-ns1.script\\\",\\n\\t\\t\\\"/hacking/deployHackBots-ns2.js\\\",\\n\\t\\t\\\"/hacking/director-ns2.js\\\",\\n\\t\\t\\\"/hacking/monitor-ns2.js\\\",\\n\\t\\t// pserv\\n\\t\\t\\\"/pserv/deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall_and_deploy-ns1.script\\\",\\n\\t\\t\\\"/pserv/killall-ns1.script\\\",\\n\\t\\t// restart_run\\n\\t\\t\\\"/restart_run/restart_run-ns1.script\\\",\\n\\t\\t// templates\\n\\t\\t\\\"/templates/ns1_template.js\\\",\\n\\t\\t\\\"/templates/ns2_template.js\\\",\\n\\t\\t// world\\n\\t\\t\\\"/world/contracts/foreman-ns2.js\\\",\\n\\t\\t\\\"/world/gang/godfather-ns2.js\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\nexport function getDrecatedScriptList(){\\n\\tvar scripts = [\\n\\t\\t// hacking\\n\\t\\t\\\"/hacking/director-ns1.script\\\",\\n\\t];\\n\\n\\treturn scripts;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_getScriptList)\\n\\t\\ttest_getScriptList(ns);\\n}\\n\\nfunction test_getScriptList(ns) {\\n\\tns.print(\\\"==== TEST: test_getScriptList ====\\\");\\n\\n\\tscripts = getScriptList();\\n\\tfor (var i = 0; i < scripts.length; i++) {\\n\\t\\tns.print(scripts[i]);\\n\\t}\\n}\",\"filename\":\"/pull/_getScriptList-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\thashReserve : 0,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_TotalHacknetProductionEnabled : false,\\n\\ttestEnabled_getTotalHashCapacity : false,\\n\\ttestEnabled_evaluateMinimumHacknetProduction : false,\\n\\ttestEnabled_evaluateImporoveStudying : false,\\n};\\n\\nvar eUpgradeName = {\\n\\tsellForMoney : \\\"Sell for Money\\\",\\n\\tsellForCorporationFunds : \\\"Sell for Corporation Funds\\\",\\n\\treduceMinimumSecurity : \\\"Reduce Minimum Security\\\",\\n\\tincreaseMaximumMoney : \\\"Increase Maximum Money\\\",\\n\\timproveStudying : \\\"Improve Studying\\\",\\n\\timproveGymTraining : \\\"Improve Gym Training\\\",\\n\\texchangeForCorporationResearch : \\\"Exchange for Corporation Research\\\",\\n\\texchangeForBladeburnerRank : \\\"Exchange for Bladeburner Rank\\\",\\n\\texchangeForBladeburnerSkillPpoints : \\\"Exchange for Bladeburner SP\\\",\\n\\tgenerateCodingContract : \\\"Generate Coding Contract\\\",\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\t// Real Logic\\n\\tif (!tests.disableMain) {\\n\\t\\tns.disableLog(\\\"ALL\\\");\\n\\t\\tns.print(\\\"Starting main function\\\");\\n\\t\\tvar upgradeToBuy = eUpgradeName.sellForMoney;\\n\\n\\t\\twhile(true) {\\n\\t\\t\\tupgradeToBuy = decideWhatToBuy(ns);\\n\\t\\t\\tns.print(\\\"Decided to buy: \\\" + upgradeToBuy);\\n\\t\\t\\tawait buyUpgrade(ns, upgradeToBuy);\\n\\t\\t\\tawait ns.sleep(100);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\nfunction getTotalHashCapacity(ns) {\\n\\tvar hashCapacity = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\thashCapacity += 64 * Math.pow(2, ns.hacknet.getNodeStats(i).cache - 1);\\n\\t}\\n\\t\\n\\t\\n\\t// see how many hacknet nodes we have \\n\\t// see how many cache upgrades we have \\n\\t\\n\\treturn hashCapacity;\\n}\\n\\nfunction getTotalHacknetHashProduction(ns) {\\n\\tvar totalHacknetProduction = 0;\\n\\tvar nodeCount = ns.hacknet.numNodes();\\n\\t\\n\\tfor (var i = 0; i < nodeCount; i++) {\\n\\t\\ttotalHacknetProduction += ns.hacknet.getNodeStats(i).production;\\n\\t}\\n\\t\\n\\treturn totalHacknetProduction;\\n}\\n\\nfunction decideWhatToBuy(ns) {\\n\\tvar upgradeNameToPurchase = eUpgradeName.sellForMoney; // if nothing else, we'll decide to convert to cash\\n\\t\\n\\t/* Purchase Priority goals - Go down the list, and do the first thing that is true\\n\\t\\t1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\t\\t2) We should then start spending some on University upgrades \\n\\t\\tZ) Convert to cash (which we defaulted to when declaring the return variable)\\n\\t*/\\n\\t\\n\\t// 1) Until our hacknet production is @ 1 hash/sec, we want more money (which will get dumped into more production\\n\\tif (evaluateMinimumHacknetProduction(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.sellForMoney; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\t// 2) We should then start spending some on University upgrades \\n\\tif (evaluateImporoveStudying(ns)) {\\n\\t\\tupgradeNameToPurchase = eUpgradeName.improveStudying; \\n\\t\\treturn upgradeNameToPurchase;\\n\\t}\\n\\t\\n\\treturn upgradeNameToPurchase;\\n}\\n\\nasync function buyUpgrade(ns, upgradeToBuy) {\\n\\tvar upgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\tvar desiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\n\\twhile (desiredHashCount < upgradeHashCost){\\n\\t\\tns.print(\\\"Waiting for more hashes (Have: \\\" + ns.nFormat(desiredHashCount, \\\"0,0\\\") + \\\" / Want: \\\" + ns.nFormat(upgradeHashCost, \\\"0,0\\\") + \\\")\\\");\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tupgradeHashCost = ns.hacknet.hashCost(upgradeToBuy);\\n\\t\\tdesiredHashCount = ns.hacknet.numHashes() + sVars.hashReserve;\\n\\t}\\n\\t\\n\\tif ((ns.hacknet.numHashes()-sVars.hashReserve) > ns.hacknet.hashCost(upgradeToBuy)) {\\n\\t\\tns.print(\\\"Spending hashes on: \\\" + upgradeToBuy);\\n\\t\\tns.hacknet.spendHashes(upgradeToBuy);\\n\\t}\\n}\\n\\nfunction evaluateMinimumHacknetProduction(ns) {\\n\\tif (getTotalHacknetHashProduction(ns) < 1) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\nfunction evaluateImporoveStudying(ns) {\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tvar hashCapacityPcnt = 0.50;\\n\\n\\tif (imporoveStudyingCost < hashCapacity * hashCapacityPcnt) {\\n\\t\\treturn true;\\n\\t}\\n\\telse {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_TotalHacknetProductionEnabled)\\n\\t\\ttest_getTotalHacknetHashProduction(ns);\\n\\tif (tests.testEnabled_getTotalHashCapacity)\\n\\t\\ttest_getTotalHashCapacity(ns);\\n\\tif (tests.testEnabled_evaluateMinimumHacknetProduction)\\n\\t\\ttest_evaluateMinimumHacknetProduction(ns);\\n\\tif (tests.testEnabled_evaluateImporoveStudying)\\n\\t\\ttest_evaluateImporoveStudying(ns);\\n}\\n\\nfunction test_getTotalHacknetHashProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHacknetHashProduction ====\\\");\\n\\tvar totalHashProduction = getTotalHacknetHashProduction(ns);\\n\\tns.print(\\\"Total Hash Production: \\\" + totalHashProduction);\\n}\\n\\nfunction test_getTotalHashCapacity(ns) {\\n\\tns.print(\\\"==== TEST: test_getTotalHashCapacity ====\\\");\\n\\tvar hashCapactiy = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapactiy: \\\" + hashCapactiy);\\n}\\n\\nfunction test_evaluateMinimumHacknetProduction(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateMinimumHacknetProduction ====\\\");\\n\\tvar resultOfEvaluation = evaluateMinimumHacknetProduction(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\nfunction test_evaluateImporoveStudying(ns) {\\n\\tns.print(\\\"==== TEST: test_evaluateImporoveStudying ====\\\");\\n\\t\\n\\tvar imporoveStudyingCost = ns.hacknet.hashCost(eUpgradeName.improveStudying);\\n\\tns.print(\\\"imporoveStudyingCost: \\\" + imporoveStudyingCost);\\n\\t\\n\\tvar hashCapacity = getTotalHashCapacity(ns);\\n\\tns.print(\\\"hashCapacity: \\\" + hashCapacity);\\t\\n\\t\\n\\tvar resultOfEvaluation = evaluateImporoveStudying(ns);\\n\\tns.print(\\\"resultOfEvaluation: \\\" + resultOfEvaluation);\\n}\\n\\n// ===== REFERENCE ============\\n/* Function Reference\\nnumHashes()\\nhashCost(upgName)\\nspendHashes(upgName, upgTarget)\\n*/\\n\\n/* Hash Upgrade Table\\nSell for Money\\t\\t\\t\\t\\t\\t\\tBase Cost: 4.000\\t\\tSell hashes for $1m\\nSell for Corporation Funds\\t\\t\\t\\tBase Cost: 100.000\\t\\tSell hashes for $1b in Corporation funds\\nReduce Minimum Security\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to decrease the minimum security of a single server by 2%. Note that a server's minimum security cannot go below 1.\\nIncrease Maximum Money\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to increase the maximum amount of money on a single server by 2%\\nImprove Studying\\t\\t\\t\\t\\t\\tBase Cost: 100.000\\t\\tUse hashes to improve the experience earned when studying at a university by 20%. This effect persists until you install Augmentations\\nImprove Gym Training\\t\\t\\t\\t\\tBase Cost: 50.000\\t\\tUse hashes to improve the experience earned when training at the gym by 20%. This effect persists until you install Augmentations\\nExchange for Corporation Research\\t\\tBase Cost: 200.000\\t\\tExchange hashes for 1k Scientific Research in all of your Corporation's Industries\\nExchange for Bladeburner Rank\\t\\t\\tBase Cost: 250.000\\t\\tExchange hashes for 100 Bladeburner Rank\\nExchange for Bladeburner SP\\t\\t\\t\\tBase Cost: 250.000\\t\\tExchanges hashes for 10 Bladeburner Skill Points\\nGenerate Coding Contract\\t\\t\\t\\tBase Cost: 200.000\\t\\tGenerate a random Coding Contract somewhere on the network\\n*/\",\"filename\":\"/master/character/hacknet/hashmanager-ns2.js\",\"module\":\"\",\"ramUsage\":5.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 1024,\\n\\tnodeCoresLimit: 16,\\n\\tnodeCacheLimit: 5,\\n\\tmoneySpendLimitPercent: 0.90,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n\\tcache: 4,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\n\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t}\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(nodeCost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\twhile(nodeCost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n\\t\\t\\t\\t\\tawait ns.sleep(5000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tpurchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cache:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CACHES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCacheAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.001;\\n    var ramModifier = Math.pow(1.07, Math.log2(ram));\\n    var coresModifier = (cores + 4) / 5;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction convertHashProductionToMoney(hashProduction){\\n\\tvar moneyProduction = 1000000/(4/hashProduction);\\n\\treturn moneyProduction;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Improving the cache size doesn't get us more production, but can be nice to have\\n\\t// Because there is no comparitive math here, we just early out by claiming we're going to buy a cache level\\n\\tif (evaluateImprovingCaches(ns)){\\n\\t\\tns.print(\\\"Choosing to buy cache upgrades\\\");\\n\\t\\treturn buy.cache;\\n\\t}\\n\\t\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=== Ready to make a decision ===\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction evaluateImprovingCaches(ns) {\\n\\tns.print(\\\"Evauluating if we should buy caches\\\");\\n\\tvar shouldBuy = false;\\n\\tvar baseNode = 0;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar levelUpgradeCost = ns.hacknet.getLevelUpgradeCost(baseNode, 1);\\n\\tvar ramUpgradeCost = ns.hacknet.getRamUpgradeCost(baseNode, 1);\\n\\tvar coreUpgradeCost = ns.hacknet.getCoreUpgradeCost(baseNode, 1);\\n\\tvar cacheUpgradeCost = ns.hacknet.getCacheUpgradeCost(baseNode, 1);\\n\\t // Multipliers on cost to be less than, lower means longer time between buying caches\\n\\tvar levelCostModifier = 0.50;\\n\\tvar ramCostModifier = 0.50;\\n\\tvar coreCostModifier = 0.50;\\n\\tvar cacheCostModifier = 0.50;\\n\\t\\n\\tif (cacheUpgradeCost < newNodeCost*levelCostModifier &&\\n\\t\\tcacheUpgradeCost < levelUpgradeCost*ramCostModifier &&\\n\\t\\tcacheUpgradeCost < ramUpgradeCost*coreCostModifier &&\\n\\t\\tcacheUpgradeCost < coreUpgradeCost*cacheCostModifier \\n\\t) {\\n\\t\\tshouldBuy = true;\\n\\t}\\n\\t\\n\\treturn shouldBuy;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/convertHashProductionToMoney(bareNodeProduction);\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/convertHashProductionToMoney(upgradedNodeProduction);\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/convertHashProductionToMoney(nextLevelProductionDelta);\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/convertHashProductionToMoney(nextRamProductionDelta);\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/convertHashProductionToMoney(nextCoreProductionDelta);\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCacheAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCache = ns.hacknet.getNodeStats(0).cache + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCacheAsync(ns, i, desiredCache);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\t\\tns.print(\\\"Want: $\\\" + ns.nFormat(cost/sVars.moneySpendLimitPercent, \\\"0,0.00\\\"))\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCacheAsync(ns, nodeIndex, desiredCache) {\\n    // Keep going until we hit the desired cache amount\\n    while (ns.hacknet.getNodeStats(nodeIndex).cache < desiredCache) {\\n        var cost = ns.hacknet.getCacheUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cache\\n        while (cost > getMyMoney(ns) * sVars.moneySpendLimitPercent) {\\n            ns.print(\\\"Waiting for more money to buy a cache upgrade\\\");\\n            await ns.sleep(5000);\\n        }\\n        \\n        ns.hacknet.upgradeCache(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    var desiredCache = baseNodeStats.cache;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n\\tawait upgradeNodeToDesiredCacheAsync(ns, newNodeIndex, desiredCache);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/server_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n    \\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n    hackingTarget : \\\"max-hardware\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n\\t\\t\\tns.killall(thisServer.name);\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/kill_all-ns2.js\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : true, // Master override for all tests\\n\\tdisableMain : true, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_nameDump : false,\\n\\ttestEnabled_nameAndPortsDump : false, \\n    testEnabled_dataDump : false,\\n    testEnabled_testScanArrayDump : false,\\n    testEnabled_sortByRequiredHackShowMaxMoney : true,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n    \\n\\t// - Tests ----------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----\\n    ns.disableLog(\\\"ALL\\\");\\n    ns.print(\\\"Starting main function\\\");\\n}\\n\\n// ===== FUNCTIONS ============\\nexport async function buildServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport async function buildHackableServerInfoArray(ns) {\\n    // Start with the home server\\n\\tvar serverInfoArray = [getTargetInfo(ns, ns.getHostname(), null, 0)];\\n\\t\\n\\tvar serverListArray = ns.scan(ns.getHostname());\\n\\t\\n\\tvar returnedServerInfo = await processScanResultsRecursive(ns, serverListArray, getTargetInfo(ns, ns.getHostname()), 0);\\n\\t\\t\\n\\tfor (var i=0; i < returnedServerInfo.length; i++) {\\n\\t\\tif (returnedServerInfo[i].isHackable === true) {\\n\\t\\t\\tserverInfoArray.push(returnedServerInfo[i]);\\n\\t\\t}\\n\\t}\\n    \\n    return serverInfoArray;\\n}\\n\\nexport function getTargetInfo(ns, target, parent, depth) {\\n\\t//ns.print(\\\"Getting info for \\\" + target + \\\"...\\\");\\n\\tvar targetIsHacknet = target.startsWith(\\\"hacknet\\\");\\n\\tvar targetIsPserv = target.startsWith(\\\"pserv\\\");\\n    var targetInfo;\\n\\t\\n\\tif (target === \\\"home\\\") {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : true,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsHacknet) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : true,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : 0,\\n\\t\\t\\tmaxMoney : 0,\\n\\t\\t\\tgrowth : 0,\\n\\t\\t\\tsecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tbaseSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\tminSecurityLevel : Number.MAX_VALUE,\\n\\t\\t\\trequiredHackingLevel : Number.MAX_VALUE,\\n\\t\\t\\tnumPortsRequired : Number.MAX_VALUE,\\n\\t\\t};\\n\\t}\\n\\telse if (targetIsPserv) {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : true,\\n\\t\\t\\tisPlayerOwned : true,\\n\\t\\t\\tisHackable : false,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\telse {\\n\\t\\ttargetInfo = {\\n\\t\\t\\tname : target,\\n\\t\\t\\tparent : parent,\\n\\t\\t\\tdepth : depth,\\n\\t\\t\\tisHome : false,\\n\\t\\t\\tisHacknet : false,\\n\\t\\t\\tisPserv : false,\\n\\t\\t\\tisPlayerOwned : false,\\n\\t\\t\\tisHackable : true,\\n\\t\\t\\tram : ns.getServerRam(target)[0],\\n\\t\\t\\tmoneyAvailable : ns.getServerMoneyAvailable(target),\\n\\t\\t\\tmaxMoney : ns.getServerMaxMoney(target),\\n\\t\\t\\tgrowth : ns.getServerGrowth(target),\\n\\t\\t\\tsecurityLevel : ns.getServerSecurityLevel(target),\\n\\t\\t\\tbaseSecurityLevel : ns.getServerBaseSecurityLevel(target),\\n\\t\\t\\tminSecurityLevel : ns.getServerMinSecurityLevel(target),\\n\\t\\t\\trequiredHackingLevel : ns.getServerRequiredHackingLevel(target),\\n\\t\\t\\tnumPortsRequired : ns.getServerNumPortsRequired(target),\\n\\t\\t};\\n\\t}\\n\\t\\n\\treturn targetInfo;\\n}\\n\\nexport async function processScanResultsRecursive(ns, serverListArray, parentServer, calledDepth) {\\n\\t// ns.print(\\\"---- Calling processScanResultsRecursive @ depth \\\" + calledDepth + \\\" ----\\\"); //DEBUG\\n\\tvar currentDepth = calledDepth + 1;\\n\\t\\n\\tvar returningTargetInfoArray = [];\\n\\t// Loop over all elements of serverListArray\\n\\tfor (var i = 0; i < serverListArray.length; i++) {\\n\\t\\tvar currentServerName = serverListArray[i];\\n\\t\\n\\t\\t// assign it's data to the array we're going to return\\n\\t\\treturningTargetInfoArray.push(getTargetInfo(ns, currentServerName, parentServer.name, currentDepth));\\n\\t\\t\\n\\t\\t// scan for more servers\\n\\t\\tvar neighboringServerArray = ns.scan(currentServerName);\\n\\t\\t// ns.print(\\\"== dumping neighboring servers pre-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, neighboringServerArray); //DEBUG\\n\\t\\t\\n\\t\\t// remove the parent from the list\\n\\t\\tvar parentNeighborIndex;\\n\\t\\t\\n\\t\\tfor (var j = 0; j < neighboringServerArray.length; j++) {\\n\\t\\t\\tif (neighboringServerArray[j] === parentServer.name) {\\n\\t\\t\\t\\tparentNeighborIndex = j;\\n\\t\\t\\t}\\n\\t\\t\\t// await ns.sleep(100);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// ns.print(\\\"parentNeighborIndex: \\\" + parentNeighborIndex); //DEBUG\\n\\t\\tvar childServerArray = neighboringServerArray;\\n\\t\\tchildServerArray.splice(parentNeighborIndex, 1);\\n\\t\\t\\n\\t\\t// ns.print(\\\"== dumping childServerArray servers post-culling ===\\\"); //DEBUG\\n\\t\\t// testScanArrayDump(ns, childServerArray); //DEBUG\\n\\t\\t// ns.print(\\\"== childServerArray.length: \\\" + childServerArray.length); //DEBUG\\n\\t\\t\\n\\t\\t// call process scan results for the children\\n\\t\\tvar childServerInfoArray;\\n\\t\\t\\n\\t\\tif (childServerArray.length !== 0) {\\n\\t\\t\\t// ns.print(\\\"Attempting to call processScanResultsRecursive again\\\"); //DEBUG\\n\\t\\t\\tchildServerInfoArray = await processScanResultsRecursive(ns, childServerArray, getTargetInfo(ns, currentServerName, parentServer.name, currentDepth), currentDepth);\\n\\t\\t\\t// ns.print(\\\"childServerInfoArray.length :\\\" + childServerInfoArray.length); //DEBUG\\n\\t\\t\\t\\n\\t\\t\\t// push all the results from the children into the array\\n\\t\\t\\tfor (var k = 0; k < childServerInfoArray.length; k++) {\\n\\t\\t\\t\\treturningTargetInfoArray.push(childServerInfoArray[k]);\\n\\t\\t\\t\\t// await ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t// ns.print(\\\"== Skipped Recursion ===\\\"); //DEBUG\\n\\t\\t}\\n\\t\\t\\n\\t\\t// await ns.sleep(100);\\n\\t}\\n\\t\\n\\treturn returningTargetInfoArray;\\n}\\n\\n// ===== TESTS ================\\nasync function executeTests(ns) {\\n    var serverInfoArray = await buildServerInfoArray(ns);\\n\\n    if (tests.testEnabled_nameDump) { testNameDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_nameAndPortsDump) { testNameAndPortsDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_dataDump) { testDataDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_testScanArrayDump) { testScanArrayDump(ns, serverInfoArray); }\\n\\tif (tests.testEnabled_sortByRequiredHackShowMaxMoney) { test_sortByRequiredHackShowMaxMoney(ns, serverInfoArray); }\\n}\\n\\nfunction testNameDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tns.print(serverInfoArray[i].name);\\n\\t}\\n} \\n\\nfunction testNameAndPortsDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testNameAndPortsDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"/Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testDataDump(ns, serverInfoArray) {\\n\\tns.print(\\\"==== TEST: testDataDump ====\\\");\\n\\tfor (var i=0; i < serverInfoArray.length; i++) {\\n\\t\\tif(!serverInfoArray[i].isHacknet)\\n\\t\\t\\tns.print(\\\"Name: \\\" + serverInfoArray[i].name + \\\"    /    Parent: \\\" + serverInfoArray[i].parent + \\\"    /    Depth: \\\" + serverInfoArray[i].depth + \\\"    /    Ports Needed: \\\" + serverInfoArray[i].numPortsRequired);\\n\\t}\\n}\\n\\nfunction testScanArrayDump(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: testScanArrayDump ====\\\");\\n\\tfor (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.print(\\\"Index: \\\" + i + \\\"/SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\nfunction test_sortByRequiredHackShowMaxMoney(ns, serverListArray) {\\n\\tns.print(\\\"==== TEST: test_sortByRequiredHackShowMaxMoney ====\\\");\\n    \\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / numPortsRequired: \\\" + serverListArray[i].numPortsRequired + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\",\"filename\":\"/master/functions/buildServerInfoArray-ns2.js\",\"module\":\"\",\"ramUsage\":2.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getEnumPortIndexVersion (version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns1.script\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\n\\n// ========== ARGS ============ \\nvar sArgs = {\\n\\n};\\n\\n// ========== VARS ============\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n   \\n};\\n\\n// ========== MAIN ============\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n    \\n    var hackablePortNumber = getNumOpenablePorts(ns);\\n\\n    // figure out how many ports I can steal\\n    // build get the list of servers\\n    // based on how many ports I can open, use the install and run script    \\n\\n    ns.print(hackablePortNumber);\\n}\\n\\n// ========= FUNCTIONS ========= \\nexport function getNumOpenablePorts(ns) {\\n    var numOpenablePorts = 0;\\n    \\n    if(ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    if(ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\"))\\n        numOpenablePorts++;\\n    \\n    return numOpenablePorts;\\n}\\n\\n// =========== TESTS ===========\",\"filename\":\"/master/functions/getNumOpenablePorts-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function getRootAccess (target)\\n{\\n\\tif (hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            brutessh(target);\\n        }\\n        if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ftpcrack(target);\\n        }\\n        if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            relaysmtp(target);\\n        }\\n        if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            httpworm(target);\\n        }\\n        if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns1.script\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getRootAccess (ns, target)\\n{\\n\\tif (ns.hasRootAccess(target) === false) {\\n        // If we have the various port oepning program, use them to open ports\\n        // on the target server\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n            ns.brutessh(target);\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            ns.ftpcrack(target);\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            ns.relaysmtp(target);\\n        }\\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            ns.httpworm(target);\\n        }\\n        if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            ns.sqlinject(target);\\n        }\\n        \\n        // Get root access to target server\\n        ns.nuke(target);\\n    }\\n}\",\"filename\":\"/master/functions/getRootAccess-ns2.js\",\"module\":\"\",\"ramUsage\":2.05,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// args\\nvar destServ = args[0];\\nvar hackTargetServ = args[1];\\n\\n// files to copy over\\nvar scripts = [\\n    \\\"/master/functions/getRootAccess-ns1.script\\\",\\n    \\\"/master/hacking/advanced/run-ns1.script\\\",\\n    \\\"/master/hacking/helpers/grow_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/hack_target-ns1.script\\\",\\n    \\\"/master/hacking/helpers/weaken_target-ns1.script\\\"\\n    ];\\n\\nvar primaryScript = \\\"/master/hacking/advanced/run-ns1.script\\\";\\n\\nvar sourceServer = \\\"home\\\";\\n\\nscp(scripts, sourceServer, destServ);\\nexec(primaryScript, destServ, 1, hackTargetServ);\",\"filename\":\"/master/hacking/advanced/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// TODO Update number of weaken threads:\\n//      Returns: The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads\\n// TODO Create v3.0: Better farm out the work\\n//      Spawn child scripts that sit and loop on the server\\n//          Maybe these just sit and constantly weaken/grow?\\n//      Use ports to communicate with remote PServers?\\n//          Shoudl be able to use growthAnalyze() to figure out how many grow calls we need\\n//          Should be able to math out how many weaken threads we need\\n//          Could farm out just what's needed to deal with grow, so not doubling up?\\n//          Use 2-3 ports; one to state the action, one to state the number of calls/threads\\n//          Can ports pass arrays or objects around?\\n//      Auto-select what server to targe based on hacking level and available money\\n\\n\\n// Imports\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// Defines the \\\"target server\\\", which is the server, via the first arg\\nvar target = args[0];\\n\\n// Amount of RAM to keep free if on the home PC\\nvar reserverHomeRamGb = 16;\\n\\n// Scripts being used\\nvar hackScript = \\\"/master/hacking/helpers/hack_target-ns1.script\\\";\\nvar growScript = \\\"/master/hacking/helpers/grow_target-ns1.script\\\";\\nvar weakenScript = \\\"/master/hacking/helpers/weaken_target-ns1.script\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar targetMaxMoney = getServerMaxMoney(target);\\nvar targetMoneyThresh = targetMaxMoney * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n//how much ram do the helper scripts take?\\nvar hackRam = getScriptRam(hackScript);\\nvar growRam = getScriptRam(growScript);\\nvar weakenRam = getScriptRam(weakenScript);\\n\\n//how much free ram does this server have?\\nfunction thisServFreeRam()\\n{\\n    var thisServRam = getServerRam(getHostname());\\n    var thisServMaxRam = thisServRam[0];\\n    var thisServUsedRam = thisServRam[1];\\n    var thisServFreeRam = thisServMaxRam - thisServUsedRam;\\n    \\n    // If it's the hom PC, indicate the free RAM is less based on how much\\n    // is being reserved (defined earlier in the script); otherwise return\\n    // the true free amount\\n    if(getHostname() == \\\"home\\\")\\n        return thisServFreeRam - reserverHomeRamGb;\\n    else\\n        return thisServFreeRam;\\n}\\n\\n// Get root access\\ngetRootAccess(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        var maxWeakenThreads = Math.floor(thisServFreeRam()/weakenRam);\\n        \\n        print(\\\"Weakening\\\");\\n        run(weakenScript, maxWeakenThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getWeakenTime(target)*1000);\\n        while (isRunning(weakenScript, getHostname(), target))\\n            sleep(1000);\\n    } else if (getServerMoneyAvailable(target) < targetMoneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        var maxGrowThreads = Math.floor(thisServFreeRam()/growRam);\\n        \\n        print(\\\"Growing\\\");\\n        run(growScript, maxGrowThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getGrowTime(target)*1000);\\n        while (isRunning(growScript, getHostname(), target))\\n            sleep(1000);\\n    } else {\\n        // Otherwise, hack it\\n        var maxHackThreads = Math.floor(thisServFreeRam()/hackRam);\\n        var desiredHackThreads = Math.floor(hackAnalyzeThreads(target, targetMaxMoney*0.10));\\n        \\n        print(\\\"Hacking\\\");\\n        if (desiredHackThreads < 1)\\n            run(hackScript, 1, target);\\n        else if (desiredHackThreads <= maxHackThreads)\\n            run(hackScript, desiredHackThreads, target);\\n        else\\n            run(hackScript, maxHackThreads, target);\\n        \\n        //wait for the script to finish\\n        sleep(getHackTime(target)*1000);\\n        while (isRunning(hackScript, getHostname(), target))\\n            sleep(1000);\\n    }\\n}\",\"filename\":\"/master/hacking/advanced/run-ns1.script\",\"module\":\"\",\"ramUsage\":4.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Get root access on the destServ & hackTargetServ\\n\\tgetRootAccess(sArgs.destServ);\\n\\tgetRootAccess(sArgs.hackTargetServ);\\n\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\tif (threadCount <= 0) {\\n\\t\\ttprint(\\\"ERROR: Desired thread count to low to run exec()! threadCount: \\\" + threadCount + \\\", sArgs.destServ: \\\" + sArgs.destServ)\\n\\t\\texit();\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":4.15,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\ttarget : args[0],\\t// Target to hack\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(sArgs.target) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(sArgs.target) + sVars.securityThreshModAdd;\\n\\n\\twhile(true) {\\n\\t\\tif (getServerSecurityLevel(sArgs.target) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(sArgs.target);\\n\\t\\t} else if (getServerMoneyAvailable(sArgs.target) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(sArgs.target);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(sArgs.target);\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":2.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"harakiri-sushi\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_harakiri-sushi-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"harakiri-sushi\\\"\\nvar target = \\\"joesguns\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_joesguns-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\nvar target = \\\"foodnstuff\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"/master/hacking/early/early_hack_template-ns1.script\",\"module\":\"\",\"ramUsage\":2.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\ngrow(serv);\",\"filename\":\"/master/hacking/helpers/grow_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nhack(serv);\",\"filename\":\"/master/hacking/helpers/hack_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"serv = args[0];\\n\\nweaken(serv);\",\"filename\":\"/master/hacking/helpers/weaken_target-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/deploy-ns1.script\",\"module\":\"\",\"ramUsage\":4.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\nvar installScript = args[0];\\nvar hackTarget = args[1];\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n    \\n    // run the new script installer\\n    run(installScript, 1, thisServer, hackTarget);\\n}\",\"filename\":\"/master/pserv/killall_and_deploy-ns1.script\",\"module\":\"\",\"ramUsage\":5.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ARGS\\n\\n// SETUP\\n// build a list of pservs\\nvar serverList = getPurchasedServers();\\n\\n// FUNCTIONS\\n\\n// MAIN LOGIC\\n// loop thru seach server\\nfor(i = 0; i < serverList.length; i++) {\\n    \\n    // get the server we're doing stuff on\\n    thisServer = serverList[i];\\n    \\n    // kill all running scripts\\n    print(\\\"DEBUG: Killing all scripts on: \\\" + thisServer);\\n    killall(thisServer);\\n    sleep(10000);\\n}\",\"filename\":\"/master/pserv/killall-ns1.script\",\"module\":\"\",\"ramUsage\":4.35,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ========= IMPORTS  ========= \\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ========== ARGS ============ \\n\\n// ========== VARS ============\\nvar sVars = {\\n    // PSERV settings\\n    pservStartingRamAmount: 8,\\n    pservHackTarget: \\\"joesguns\\\",\\n};\\n\\n// ========= FUNCTIONS ========= \\n\\n// ========== LOGIC ==========\\n// For BN-9 when we go back...\\n// run(\\\"/master/character/hacknet/server_autobuy-ns2.js\\\");\\n// run(\\\"/master/character/hacknet/hashmanager-ns2.js\\\");\\n\\nclear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\nrun(\\\"/master/hacking/director-ns2.js\\\");\\nrun(\\\"/master/character/hacknet/node_autobuy-ns2.js\\\");\\nrun(\\\"/master/buy_server/buy_server-ns2.js\\\", 1, sVars.pservHackTarget, sVars.pservStartingRamAmount);\\nrun(\\\"/master/world/gang/godfather-ns2.js\\\");\\nrun(\\\"/master/hacking/monitor-ns2.js\\\", 1, 300, \\\"tprint\\\");\",\"filename\":\"/master/restart_run/restart_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/templates/ns2_template.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs() {\\n    var scriptArgs = {\\n        hackTarget : args[0],\\n        desiredRam : args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    availableCashMod : 0.70,\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tprint(\\\"Starting script...\\\");\\n    disableLog(\\\"ALL\\\");\\n    \\n    if(sArgs.desiredRam > getPurchasedServerMaxRam()) {\\n        tprint(\\\"buy_server.script: sArgs.desiredRam (args[1]) exceeds getPurchasedServerMaxRam. Exiting.\\\");\\n        exit();\\n    }\\n    \\n    // loop to buy initial round of servers\\n    // while: server count < max servers\\n    print(\\\"DEBUG: server count:\\\" + getPurchasedServers().length);\\n    print(\\\"DEBUG: server limit:\\\" + getPurchasedServerLimit());\\n    while(getPurchasedServers().length < getPurchasedServerLimit())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // wait to have enough money to buy\\n        if(getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(sArgs.desiredRam))\\n        {\\n            // create a server name\\n            var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n            \\n            // buy a server\\n            var hostname = \\\"\\\"\\n            while (hostname === \\\"\\\") {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                hostname = purchaseServer(servName, sArgs.desiredRam);\\n            }\\n            \\n            // copy and run script\\n            run(sVars.setupScriptName, 1, hostname, sArgs.hackTarget);\\n        }\\n    }\\n    \\n    //increase the desireRam count as a one off\\n    sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n    \\n    // loop to upgrade servers\\n    while (sArgs.desiredRam <= getPurchasedServerMaxRam())\\n    {\\n        print(\\\"DEBUG: Buying at \\\" + sArgs.desiredRam +\\\"GB\\\");\\n        \\n        // call get purchased servers\\n        var purchasedServers = getPurchasedServers();\\n        \\n        for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++)\\n        {\\n            var oldHostname = purchasedServers[servIndex];\\n            print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n            \\n            if(getServerRam(oldHostname)[0] < sArgs.desiredRam)\\n            {\\n                while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                {\\n                    print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                    sleep(60*1000);\\n                }\\n                \\n                // kill all scripts on the old server\\n                print(\\\"DEBUG: Killing all scripts on: \\\" + oldHostname);\\n                killall(oldHostname);\\n                sleep(10000);\\n                \\n                // delete the old server\\n                print(\\\"DEBUG: Deleting: \\\" + oldHostname);\\n                deleteServer(oldHostname);\\n                \\n                // buy a server\\n                var servName = \\\"pserv-\\\" + sArgs.desiredRam + \\\"GB\\\";\\n                var newHostname = \\\"\\\";\\n    \\n                while (newHostname === \\\"\\\") {\\n                    while(getServerMoneyAvailable(\\\"home\\\")*sVars.availableCashMod < getPurchasedServerCost(sArgs.desiredRam))\\n                    {\\n                        print(\\\"DEBUG: Not enough money! Have/Need:\\\" + Math.floor(getServerMoneyAvailable(\\\"home\\\")) + \\\"/\\\" + getPurchasedServerCost(sArgs.desiredRam));\\n                        sleep(60*1000);\\n                    }\\n                    newHostname = purchaseServer(servName, sArgs.desiredRam);\\n                    sleep(1000);\\n                }\\n                print(\\\"DEBUG: New server named: \\\" + newHostname);\\n                \\n                // copy and run scripts\\n                run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n            }\\n        }\\n        \\n        // increase ram for the next loop\\n        sArgs.desiredRam = sArgs.desiredRam*sVars.ramIncreaseFactor;\\n        \\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests() {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction();\\n}\\n\\nfunction test_exampleFunction() {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\n// ===== REFERENCE ==============================\\n// Useful functions:\\n// ==================\\n// getPurchasedServers - array of servers that you won\\n// getPurchasedServerLimit - max number of servers you can purchase\\n// getPurchasedServerCost - cost of a server based on a RAM amount\\n// getPurchasedServerMaxRam - max ram you can purchse\\n// purchaseServer(name, RAM) - buys a server with the specified RAM\\n// getServerRam - returns max ram, used ram\\n// getServerMoneyAvailable(\\\"home\\\")\\n// ==================\",\"filename\":\"/master/buy_server/buy_server-ns1.script\",\"module\":\"\",\"ramUsage\":10.4,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\n\\n// ===== ARGS =================\\nfunction getScriptArgs(ns)\\n{\\n    var sArgs = {\\n        hackingTarget : ns.args[0]\\n    };\\n    \\n    return sArgs;\\n}\\n\\n// ===== VARS =================\\nvar sVars = {\\n    installScript : \\\"/master/hacking/basic/install_and_run-ns1.script\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\nvar eRamStats = {\\n    total : 0,\\n    used : 1,\\n};\\n\\n// ===== MAIN =================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n    // figure out how many ports I can steal\\n    var hackablePortNum = await hpn.getNumOpenablePorts(ns);\\n    ns.print(\\\"I can hack this many ports: \\\" + hackablePortNum);\\n    \\n    // build get the list of servers\\n    var serverList = await bsi.buildServerInfoArray(ns);\\n    \\n    // based on how many ports I can open, use the install and run script\\n    for (var i = 0; i < serverList.length; i++){\\n        var thisServer = serverList[i];\\n        \\n        if(thisServer.numPortsRequired <= hackablePortNum &&\\n          thisServer.isHacknet === false &&\\n\\t\\t  thisServer.name !== \\\"home\\\") {\\n            // get root access\\n\\t\\t\\tif (ns.hasRootAccess(thisServer.name) === false) {\\n\\t\\t\\t\\tns.print(\\\"getting access on \\\" + thisServer.name + \\\" which needs ports: \\\" + thisServer.numPortsRequired);\\n\\t\\t\\t\\tawait gra.getRootAccess(ns, thisServer.name);\\n\\t\\t\\t}\\n            \\n            // install the hack script\\n            var waitingToInstall = true;\\n            while(waitingToInstall) {\\n                var homeRam = ns.getServerRam(ns.getHostname());\\n                var homeFreeRam = homeRam[eRamStats.total] - homeRam[eRamStats.used];\\n                if (homeFreeRam >= ns.getScriptRam(sVars.installScript)) {\\n                    ns.run(sVars.installScript, 1, thisServer.name, sArgs.hackingTarget);\\n                    waitingToInstall = false;\\n                }\\n                await ns.sleep(1);\\n            }\\n        }\\n    }\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n}\\n\\n// ===== FUNCTIONS ============\\n\\n\\n// ===== TESTS ================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/deploy/server_steal_basic-ns2.js\",\"module\":\"\",\"ramUsage\":4.3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function getEnumPortIndexVersion(version) {\\n\\tvar ePortIndex_v1 = {\\n\\t\\tPRIMARY_HACKING_TARGET: 1,\\n\\t};\\n\\n\\tif (version === 1) {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n\\telse {\\n\\t\\treturn ePortIndex_v1;\\n\\t}\\n}\",\"filename\":\"/master/functions/enumLib-ns2.js\",\"module\":\"\",\"ramUsage\":1.6,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as dhb from \\\"/master/hacking/deployHackBots-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tscanFrequency : 60 * 1000, // 60 seconds in milliseconds\\n\\thackbotDeployServerMinRam : 8,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n\\ttestEnabled_serverArrayBuilder : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\tawait executeTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Build server lists\\n\\tvar hackableServerListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tvar deployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\n\\t// Establish initial target & deploy the hackbots\\n\\tns.print(\\\"Picking initial target and deploying the hackbots\\\");\\n\\tvar primaryHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET); // Could start out as NULL PORT DATA\\n\\tif(primaryHackTarget !== \\\"NULL PORT DATA\\\") {\\n\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\t}\\n\\t\\n\\n\\t// Sort the server list by money, high -> low\\n    hackableServerListArray.sort(function(a, b) {\\n        return b.maxMoney - a.maxMoney;\\n    });\\n\\n\\t// Start loopin' to find & update target\\n\\twhile(true) {\\n\\t\\tns.print(\\\"Scanning for a new target...\\\");\\n\\t\\tvar currentBestTarget = getBestHackableTarget(ns, hackableServerListArray);\\n\\n\\t\\t// If the best option is different from our current option, update the port\\n\\t\\tif (currentBestTarget !== primaryHackTarget)\\n\\t\\t{\\n\\t\\t\\tns.print(\\\"Updating primaryHackTarget to: \\\" + currentBestTarget);\\n\\t\\t\\tprimaryHackTarget = currentBestTarget;\\n\\t\\t\\tns.clear(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\t\\t\\tns.write(ePortIndex.PRIMARY_HACKING_TARGET, currentBestTarget);\\n\\n\\t\\t\\t// Re-deploy the hackbots at the new target\\n\\t\\t\\tgra.getRootAccess(ns, primaryHackTarget);\\n\\t\\t\\tdeployServerListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\t\\tawait dhb.deployHackBots(ns, deployServerListArray, primaryHackTarget);\\n\\n\\t\\t}\\n\\n\\t\\t// Sleep for like...a minute or something.\\n\\t\\tawait ns.sleep(sVars.scanFrequency);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getBestHackableTarget(ns, serverListArray) {\\n\\t// Figure out my hacking ability & port opening ability\\n\\tvar hackingSkillLevel = ns.getHackingLevel();\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\t// Iterate thru the list, finding the first option that can be hacked (skill & ports opening\\n\\tfor (var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i];\\n\\n\\t\\tif(hackingSkillLevel >= server.requiredHackingLevel && portBreakingLevel >= server.numPortsRequired) {\\n\\t\\t\\treturn server.name;\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== TESTS ==================================\\nasync function executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n\\tif (tests.testEnabled_serverArrayBuilder)\\n\\t\\tawait test_serverArrayBuilder(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\\n\\nasync function test_serverArrayBuilder(ns) {\\n\\tns.print(\\\"==== TEST: test_serverArrayBuilder ====\\\");\\n\\n\\tvar serverListArray = await bsi.buildHackableServerInfoArray(ns);\\n\\tprint(typeof serverListArray);\\n\\n    serverListArray.sort(function(a, b) {\\n        return a.requiredHackingLevel - b.requiredHackingLevel;\\n    });\\n\\n    for (var i=0; i < serverListArray.length; i++) {\\n\\t\\tns.tprint(\\\"Index: \\\" + i + \\\" / RequiredHackingLevel: \\\" + serverListArray[i].requiredHackingLevel + \\\" / MaxMoney: \\\" + ns.nFormat(serverListArray[i].maxMoney, \\\"0,0\\\") + \\\" / SeverName: \\\" + serverListArray[i].name);\\n\\t}\\n}\\n\\n/* ===== REFERENCE ==============================\\nns.write()\\nns.trywrite()\\nns.read()\\nns.peek()\\nns.clear()\\n\\t*/\",\"filename\":\"/master/hacking/director-ns2.js\",\"module\":{},\"ramUsage\":9.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ==============\\n\\n\\n// ===== ARGS =================\\nvar sArgs = {\\n\\tdestServ : args[0],\\n\\thackTargetServ : args[1],\\n};\\n\\n// ===== VARS =================\\nvar sVars = {\\n\\tthreadLimit : 100, //If this gets too high, server security can get out of control\\n\\tscriptsToCopy : [\\n\\t\\t\\t\\\"/master/functions/getRootAccess-ns1.script\\\",\\n\\t\\t\\t\\\"/master/functions/enumLib-ns1.script\\\",\\n\\t\\t\\t\\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\t\\t],\\n\\tscriptToRun : \\\"/master/hacking/guided_basic/run-ns1.script\\\",\\n\\tsourceServer : \\\"home\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN =================\\nmain();\\n\\nfunction main() {\\n\\t// Copy the scripts over\\n\\tscp(sVars.scriptsToCopy, sVars.sourceServer, sArgs.destServ);\\n\\n\\t// See how many threads we can run on the target server\\n\\tvar maxThreadCapactity = getMaxThreadCapacity(sArgs.destServ, sVars.scriptToRun);\\n\\tvar threadCount = 1;\\n\\n\\tif(maxThreadCapactity < sVars.threadLimit) {\\n\\t\\tthreadCount = maxThreadCapactity;\\n\\t}\\n\\telse if(maxThreadCapactity >= sVars.threadLimit){\\n\\t\\tthreadCount = sVars.threadLimit;\\n\\t}\\n\\n\\t// Run the script on the tartget server\\n\\texec(sVars.scriptToRun, sArgs.destServ, threadCount, sArgs.hackTargetServ);\\n\\t\\n\\t// Tests\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n}\\n\\n// ===== FUNCTIONS ============\\n// Returns free RAM on the target server\\nfunction getServFreeRam(target, reservedRam) {\\n    // Get the server's RAM, max and used\\n    var targetServRam = getServerRam(target);\\n    var targetServMaxRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServMaxRam - targetServUsedRam;\\n\\n    // Return the free RAM, less the resvered amount\\n    return targetServFreeRam - reservedRam;\\n}\\n\\nfunction getMaxThreadCapacity(target, script) {\\n    // Figure out how much RAM we can use\\n    targetFreeRam = getServFreeRam(target, 0);\\n\\n    // Get the RAM needed for the script (per thread)\\n    scriptRamPerThread = getScriptRam(script);\\n\\n    // Calculate the max number of threads\\n    maxThreadCapacity = Math.floor(targetFreeRam / scriptRamPerThread);\\n\\n    // Return that\\n    return maxThreadCapacity;\\n}\\n\\n// ===== TESTS ================\\nfunction executeTests() {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample();\\n}\\n\\nfunction testExample() {\\n\\tprint(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/install_and_run-ns1.script\",\"module\":\"\",\"ramUsage\":3.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport {getRootAccess} from \\\"/master/functions/getRootAccess-ns1.script\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns1.script\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\nvar portEmpty = \\\"NULL PORT DATA\\\";\\n\\n// ===== ARGS ===================================\\nvar sArgs = {\\n\\tinitialHackTarget : args[0],\\t// Initial to hack\\n};\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tmoneyThreshModPcnt : 0.75,\\n\\tsecurityThreshModAdd : 5,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\ttestExampleEnabled : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\n\\tvar hackTarget = sArgs.initialHackTarget;\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\n\\t// - Real Script Logic ----------------------\\n\\n\\t// Setting up some thresholds\\n\\tvar moneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\tvar securityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t// Get root access if I don't have it\\n\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\tgetRootAccess(hackTarget);\\n\\t}\\n\\n\\twhile(true) {\\n\\t\\tvar updateResults = updateHackTarget(hackTarget);\\n\\t\\tif(updateResults.updated === true) {\\n\\t\\t\\thackTarget = updateResults.hackTarget;\\n\\t\\t\\tmoneyThresh = getServerMaxMoney(hackTarget) * sVars.moneyThreshModPcnt;\\n\\t\\t\\tsecurityThresh = getServerMinSecurityLevel(hackTarget) + sVars.securityThreshModAdd;\\n\\n\\t\\t\\tif (hasRootAccess(hackTarget) === false) {\\n\\t\\t\\t\\tgetRootAccess(hackTarget);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (getServerSecurityLevel(hackTarget) > securityThresh) {\\n\\t\\t\\t// If the server's security level is above our threshold, weaken it\\n\\t\\t\\tweaken(hackTarget);\\n\\t\\t} else if (getServerMoneyAvailable(hackTarget) < moneyThresh) {\\n\\t\\t\\t// If the server's money is less than our threshold, grow it\\n\\t\\t\\tgrow(hackTarget);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, hack it\\n\\t\\t\\thack(hackTarget);\\n\\t\\t}\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction updateHackTarget(currentTarget) {\\n\\tvar results = {\\n\\t\\tupdated: false,\\n\\t\\thackTarget: currentTarget,\\n\\t};\\n\\n\\tprimaryHackTarget = peek(ePortIndex.PRIMARY_HACK_TARGET);\\n\\n\\tif(primaryHackTarget !== portEmpty && currentTarget !== primaryHackTarget) {\\n\\n\\t\\tresults.hackTarget = primaryHackTarget;\\n\\t}\\n\\n\\treturn results;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testExampleEnabled)\\n\\t\\ttestExample(ns);\\n}\\n\\nfunction testExample(ns) {\\n\\tns.print(\\\"==== TEST: testExample ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/guided_basic/run-ns1.script\",\"module\":\"\",\"ramUsage\":3.85,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n// ===== VARS ===================================\\nvar sVars = {\\n\\tnodeCountLimit: 24,\\n\\tnodeLevelLimit: 200,\\n\\tnodeRamLimit: 64,\\n\\tnodeCoresLimit: 16,\\n\\trecoupTimeCap: 6*60*60, // 6 hours in seconds\\n};\\n\\nvar buy = {\\n\\tnothing: -1,\\n\\tnode: 0,\\n\\tlevel: 1,\\n\\tram: 2,\\n\\tcores: 3,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting main function\\\");\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tvar done = false;\\n\\tvar thingToBuy = buy.nothing;\\n\\tvar playerMultipliers = ns.getHacknetMultipliers();\\n\\tvar nodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t// I bet this script will break horribly if I don't have at least one node to start off with\\n\\tif (ns.hacknet.numNodes() === 0) {\\n\\t\\tns.print(\\\"Buying the first node\\\");\\n\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\n\\t\\t// Wait for enough money\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\t\\t\\n\\t\\t// Buy the node\\n\\t\\tns.hacknet.purchaseNode();\\n\\t}\\n\\n\\tawait upgradeAllToMatchBaseNodeAsync(ns);\\n\\n\\twhile (!done) {\\n\\t\\t// check to see what to buy\\n\\t\\tthingToBuy = evaluateHacknetPurchaseOptions(ns, sVars.nodeCountLimit, sVars.nodeLevelLimit, sVars.nodeRamLimit, sVars.nodeCoresLimit, playerMultipliers, sVars.recoupTimeCap);\\n\\n\\t\\t// buy the right thing\\n\\t\\tswitch(thingToBuy){\\n\\t\\t\\tcase buy.node:\\n\\t\\t\\t\\tnodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\n\\t\\t\\t\\tns.print(\\\"Waiting for more money to buy a node!\\\");\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Wait for enough money\\n\\t\\t\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, nodeCost);\\n\\n\\t\\t\\t\\tns.print(\\\"Buying a node\\\");\\n\\t\\t\\t\\tawait purchaseAndUpgradeNode(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.level:\\n\\t\\t\\t\\tns.print(\\\"Upgrading LEVELS of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeLevelAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.ram:\\n\\t\\t\\t\\tns.print(\\\"Upgrading RAM of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeRamAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.cores:\\n\\t\\t\\t\\tns.print(\\\"Upgrading CORES of all nodes\\\");\\n\\t\\t\\t\\tawait upgradeAllHacknetNodeCoresAsync(ns);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase buy.nothing:\\n\\t\\t\\t\\tdone = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\t\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nfunction getHacknetNodeProduction(level, ram, cores, playerMultipliers) {\\n    var baseProduction = 0.08; //1.6;\\n    var ramModifier = Math.pow(1.035, ram-1);\\n    var coresModifier = (cores + 5) / 6;\\n    var playerModifier = playerMultipliers.production;\\n\\n    return baseProduction * level * ramModifier * coresModifier * playerModifier;\\n}\\n\\nfunction getCostToReachLevelFromScratch (desiredLevel, playerMultipliers) { \\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 520;\\n\\tvar increasePerLevel = 1.04;\\n\\tvar playerLevelCostModifier = playerMultipliers.levelCost;\\n\\tvar totalCostForDesiredLevel = 0;\\n\\n\\tfor(var intermediateLevel = 1; intermediateLevel < desiredLevel; intermediateLevel++) {\\n\\t\\ttotalCostForDesiredLevel += baseCost * Math.pow(increasePerLevel, intermediateLevel-1) * playerLevelCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredLevel;\\n}\\n\\nfunction getCostToReachRamFromScratch (desiredRam, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar desiredRamLevel = (Math.log(desiredRam)/Math.log(2)) + 1;\\n\\tvar baseCost = 30000;\\n\\tvar increasePerRamLevel = 2.56;\\n\\tvar playerRamCostModifier = playerMultipliers.ramCost;\\n\\tvar totalCostForDesiredRamLevel = 0;\\n\\n\\tfor(var intermediateRamLevel = 1; intermediateRamLevel < desiredRamLevel; intermediateRamLevel++) {\\n\\t\\ttotalCostForDesiredRamLevel += baseCost * Math.pow(increasePerRamLevel, intermediateRamLevel-1) * playerRamCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredRamLevel;\\n}\\n\\nfunction getCostToReachCoresFromScratch (desiredCores, playerMultipliers) {\\n\\t// Note: I think this formula might be off, but it's close enough\\n\\tvar baseCost = 500000;\\n\\tvar increasePerCore = 1.48;\\n\\tvar playerCoresCostModifier = playerMultipliers.coreCost;\\n\\tvar totalCostForDesiredCores = 0;\\n\\n\\tfor(var intermediateCores = 1; intermediateCores < desiredCores; intermediateCores++) {\\n\\t\\ttotalCostForDesiredCores += baseCost * Math.pow(increasePerCore, intermediateCores-1) * playerCoresCostModifier;\\n\\t}\\n\\n\\treturn totalCostForDesiredCores;\\n}\\n\\nfunction getLowestLevelHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest level\\\");\\n    var lowestLevelNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.level < lowestLevelNodeStats.level) {\\n            lowestLevelNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestLevelNodeStats;\\n}\\n\\nfunction getLowestRamHacknetNodeStats(ns) {\\n\\tns.print(\\\"Finding node with lowest ram\\\");\\n    var lowestRamNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.ram < lowestRamNodeStats.ram) {\\n            lowestRamNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestRamNodeStats;\\n}\\n\\nfunction getLowestCoresHacknetNodeStats(ns) {\\n    ns.print(\\\"Finding node with lowest cores\\\");\\n    var lowestCoresNodeStats = ns.hacknet.getNodeStats(0);\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < lowestCoresNodeStats.cores) {\\n            lowestCoresNodeStats = thisNodesStats;\\n        }\\n    }\\n\\n    return lowestCoresNodeStats;\\n}\\n\\nfunction getAllLowestHacknetNodeStats(ns) {\\n\\tns.print(\\\"Scanning thru all nodes to find ones with the lowest of each stat\\\");\\n    var allLowestNodeStats = {\\n\\t\\tlowestLevelNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestRamNodeStats : ns.hacknet.getNodeStats(0),\\n\\t\\tlowestCoresNodeStats : ns.hacknet.getNodeStats(0),\\n\\t};\\n\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = 0;\\n\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = 0;\\n\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tns.print(\\\"Evaluating if node \\\" + i + \\\" is lowest stat for anything\\\");\\n        var thisNodesStats = ns.hacknet.getNodeStats(i);\\n\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestLevelNodeStats.cores) {\\n            allLowestNodeStats.lowestLevelNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestLevelNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestRamNodeStats.cores) {\\n            allLowestNodeStats.lowestRamNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestRamNodeStats.nodeIndex = i;\\n        }\\n\\t\\t\\n        if (thisNodesStats.cores < allLowestNodeStats.lowestCoresNodeStats.cores) {\\n            allLowestNodeStats.lowestCoresNodeStats = thisNodesStats;\\n\\t\\t\\tallLowestNodeStats.lowestCoresNodeStats.nodeIndex = i;\\n        }\\n    }\\n\\n    return allLowestNodeStats;\\n}\\n\\nfunction evaluateHacknetPurchaseOptions(ns, maxNodes, maxLevel, maxRam, maxCores, playerMultipliers, recoupTimeCap) {\\n    ns.print(\\\"Evaluationg what to buy...\\\");\\n\\t// we're just going to go off the first node, assuming all others are updgraded\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar allLowestHacknetNodeStats = getAllLowestHacknetNodeStats(ns);\\n\\tvar lowestLevelNodeStats = allLowestHacknetNodeStats.lowestLevelNodeStats;\\n\\tvar lowestRamNodeStats = allLowestHacknetNodeStats.lowestRamNodeStats;\\n\\tvar lowestCoresNodeStats = allLowestHacknetNodeStats.lowestCoresNodeStats;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\t    \\n\\t// the math to truely evaluate a new node would be a PITA so instead,\\n\\t// if we aren't at the max, and it's cheaper than the cost to upgrade\\n\\t// the 1st node we just say fuck it and buy a new node\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"Checking to see if buying a node is cheaper than anything else\\\");\\n\\t\\tif ( newNodeCost < ns.hacknet.getLevelUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getRamUpgradeCost(baseNodeIndex, 1) &&\\n\\t\\t\\tnewNodeCost < ns.hacknet.getCoreUpgradeCost(baseNodeIndex, 1)\\n\\t\\t) {\\n            ns.print(\\\"Choosing to buy a node\\\");\\n\\t\\t\\treturn buy.node;\\n\\t\\t}\\n\\t}\\n\\t\\n\\t// get the recoup time of buying a node w/o upgrading it\\n\\tvar bareNodeRecoupTime = getBareNodeRecoupTime(ns, maxNodes, playerMultipliers);\\t\\n\\t\\n\\t// get the recoup time of buying a node and upgrading it to match node zero\\n    var upgradedNodeRecoupTime = getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a level\\n\\tvar levelRecoupTime = getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying RAM\\n    var ramRecoupTime = getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers);\\n\\t\\n\\t// get the recoup time of buying a core\\n\\tvar coresRecoupTime = getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers);\\n\\t\\n\\t// Do comparisons to see what to buy\\n\\tns.print(\\\"=========================== Ready to make a decision ===========================\\\");\\n\\tns.print(\\\"--- maxRecoupTime:\\\" + ns.nFormat(sVars.recoupTimeCap, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(sVars.recoupTimeCap/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--------------------------------------------------------------------------------\\\");\\n\\tns.print(\\\"Getting the minimum of: \\\");\\n\\tns.print(\\\"--- bareNodeRecoupTime:\\\" + ns.nFormat(bareNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(bareNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- upgradedNodeRecoupTime:\\\" + ns.nFormat(upgradedNodeRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(upgradedNodeRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- levelRecoupTime:\\\" + ns.nFormat(levelRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(levelRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- ramRecoupTime:\\\" + ns.nFormat(ramRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(ramRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"--- coresRecoupTime:\\\" + ns.nFormat(coresRecoupTime, \\\"0,0\\\") + \\\" seconds (\\\" + ns.nFormat(coresRecoupTime/60, \\\"0,0\\\") + \\\" minutes)\\\");\\n\\tns.print(\\\"================================================================================\\\");\\n\\n\\tvar minRecoupTime = Math.min(bareNodeRecoupTime, upgradedNodeRecoupTime, levelRecoupTime, ramRecoupTime, coresRecoupTime);\\n\\t\\n\\tif (bareNodeRecoupTime === minRecoupTime && bareNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n\\telse if (upgradedNodeRecoupTime === minRecoupTime && upgradedNodeRecoupTime < recoupTimeCap)\\n\\t{\\n        ns.print(\\\"Choosing to buy a node\\\");\\n        return buy.node;\\n\\t}\\t\\n    else if (levelRecoupTime === minRecoupTime && levelRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy a level\\\");\\n        return buy.level;\\n    }\\n    else if (ramRecoupTime === minRecoupTime && ramRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy ram\\\");\\n        return buy.ram;\\n    }\\n    else if (coresRecoupTime === minRecoupTime && coresRecoupTime < recoupTimeCap)\\n    {\\n        ns.print(\\\"Choosing to buy cores\\\");\\n        return buy.cores;\\n    }\\n    \\n    return buy.nothing;\\n}\\n\\nfunction getBareNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar bareNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining bareNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar bareNodeProduction = getHacknetNodeProduction(1, 1, 1, playerMultipliers);\\n\\t\\tns.print(\\\"bareNodeProduction: \\\" + bareNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tbareNodeRecoupTime = newNodeCost/bareNodeProduction;\\n\\t\\tns.print(\\\"bareNodeRecoupTime: \\\" + bareNodeRecoupTime);\\n\\t}\\n\\t\\n\\treturn bareNodeRecoupTime;\\n}\\n\\nfunction  getUpgradedNodeRecoupTime(ns, maxNodes, playerMultipliers) {\\n\\tvar upgradedNodeRecoupTime = Number.MAX_VALUE;\\n\\tvar newNodeCost = ns.hacknet.getPurchaseNodeCost();\\n\\tvar currentNodeCount = ns.hacknet.numNodes();\\n\\tvar baseNodeIndex = 0;\\n\\tvar baseNodeStats = ns.hacknet.getNodeStats(baseNodeIndex);\\n\\t\\n    if (currentNodeCount < maxNodes) {\\n\\t\\tns.print(\\\"=== Determining upgradedNodeRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tvar upgradedNodeProduction = baseNodeStats.production;\\n\\t\\tns.print(\\\"upgradedNodeProduction/baseNodeProduction: \\\" + upgradedNodeProduction);\\n\\t\\t\\n\\t\\tns.print(\\\"newNodeCost: \\\" + newNodeCost);\\n\\t\\t\\n\\t\\tvar levelUpgradeCost = getCostToReachLevelFromScratch(baseNodeStats.level, playerMultipliers);\\n\\t\\tns.print(\\\"levelUpgradeCost: \\\" + levelUpgradeCost);\\n\\t\\t\\n\\t\\tvar ramUpgradeCost = getCostToReachRamFromScratch(baseNodeStats.ram, playerMultipliers);\\n\\t\\tns.print(\\\"ramUpgradeCost: \\\" + ramUpgradeCost);\\n\\t\\t\\n\\t\\tvar coresUpgradeCost = getCostToReachCoresFromScratch(baseNodeStats.cores, playerMultipliers);\\n\\t\\tns.print(\\\"coresUpgradeCost: \\\" + coresUpgradeCost);\\n\\t\\t\\n\\t\\tvar upgradedNodeTotalCost = newNodeCost + levelUpgradeCost + ramUpgradeCost + coresUpgradeCost;\\n\\t\\tns.print(\\\"upgradedNodeTotalCost: \\\" + upgradedNodeTotalCost);\\n\\t\\t\\n\\t\\tupgradedNodeRecoupTime = upgradedNodeTotalCost/upgradedNodeProduction;\\n\\t\\tns.print(\\\"upgradedNodeRecoupTime: \\\" + upgradedNodeRecoupTime);\\n\\t\\t\\n\\t}\\n\\t\\n\\treturn upgradedNodeRecoupTime;\\n}\\n\\nfunction  getLevelRecoupTime(ns, lowestLevelNodeStats, maxLevel, playerMultipliers) {\\n\\tvar levelRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestLevelNodeStats.level < maxLevel) {\\n\\t\\tns.print(\\\"=== Determining levelRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestLevelNodeStats.production: \\\" + lowestLevelNodeStats.production);\\n\\t\\n        var nextLevelProduction = getHacknetNodeProduction(lowestLevelNodeStats.level+1, lowestLevelNodeStats.ram, lowestLevelNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextLevelProduction: \\\" + nextLevelProduction);\\n        \\n        var nextLevelProductionDelta = nextLevelProduction - lowestLevelNodeStats.production;\\n        ns.print(\\\"nextLevelProductionDelta: \\\" + nextLevelProductionDelta);\\n        \\n\\t\\tvar nextLevelCost = ns.hacknet.getLevelUpgradeCost(lowestLevelNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextLevelCost: \\\" + nextLevelCost);\\n        \\n\\t\\tlevelRecoupTime = nextLevelCost/nextLevelProductionDelta;\\n\\t\\tns.print(\\\"levelRecoupTime:\\\" + levelRecoupTime);\\n\\t}\\n\\t\\n\\treturn levelRecoupTime;\\n}\\n\\nfunction  getRamRecoupTime(ns, lowestRamNodeStats, maxRam, playerMultipliers) {\\n\\tvar ramRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestRamNodeStats.ram < maxRam) {\\n\\t\\tns.print(\\\"=== Determining ramRecoupTime ===\\\");\\n\\t\\tns.print(\\\"lowestRamNodeStats.production: \\\" + lowestRamNodeStats.production);\\n\\t\\n        var nextRamProduction = getHacknetNodeProduction(lowestRamNodeStats.level, lowestRamNodeStats.ram+1, lowestRamNodeStats.cores, playerMultipliers);\\n        ns.print(\\\"nextRamProduction: \\\" + nextRamProduction);\\n        \\n        var nextRamProductionDelta = nextRamProduction - lowestRamNodeStats.production;\\n        ns.print(\\\"nextRamProductionDelta: \\\" + nextRamProductionDelta);\\n        \\n\\t\\tvar nextRamCost = ns.hacknet.getRamUpgradeCost(lowestRamNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextRamCost: \\\" + nextRamCost);\\n        \\n\\t\\tramRecoupTime = nextRamCost/nextRamProductionDelta;\\n\\t\\tns.print(\\\"ramRecoupTime:\\\" + ramRecoupTime);\\n\\t}\\n\\t\\n\\treturn ramRecoupTime;\\n}\\n\\nfunction  getCoresRecoupTime(ns, lowestCoresNodeStats, maxCores, playerMultipliers) {\\n\\tvar coresRecoupTime = Number.MAX_VALUE;\\n\\t\\n    if (lowestCoresNodeStats.cores < maxCores) {\\n\\t\\tns.print(\\\"=== Determining coresRecoupTime ===\\\");\\n\\t\\t\\n\\t\\tns.print(\\\"lowestCoresNodeStats.production: \\\" + lowestCoresNodeStats.production);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.level: \\\" + lowestCoresNodeStats.level);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.ram: \\\" + lowestCoresNodeStats.ram);\\n\\t\\tns.print(\\\"lowestCoresNodeStats.cores: \\\" + lowestCoresNodeStats.cores);\\n\\t\\t\\n        var nextCoreProduction = getHacknetNodeProduction(lowestCoresNodeStats.level, lowestCoresNodeStats.ram, lowestCoresNodeStats.cores+1, playerMultipliers);\\n        ns.print(\\\"nextCoreProduction: \\\" + nextCoreProduction);\\n        \\n\\t\\tvar nextCoreProductionDelta = nextCoreProduction - lowestCoresNodeStats.production;\\n        ns.print(\\\"nextCoreProductionDelta: \\\" + nextCoreProductionDelta);\\n        \\n\\t\\tvar nextCoreCost = ns.hacknet.getCoreUpgradeCost(lowestCoresNodeStats.nodeIndex, 1);\\n        ns.print(\\\"nextCoreCost: \\\" + nextCoreCost);\\n\\t\\t\\n\\t\\tcoresRecoupTime = nextCoreCost/nextCoreProductionDelta;\\n\\t\\tns.print(\\\"coresRecoupTime:\\\" + coresRecoupTime);\\n\\t}\\n\\t\\n\\treturn coresRecoupTime;\\n}\\n\\nasync function upgradeAllHacknetNodeLevelAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredLevel = ns.hacknet.getNodeStats(0).level + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredLevelAsync(ns, i, desiredLevel);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeRamAsync(ns) {\\n    // we're keying desired amount off of the starting node\\n    var desiredRam = ns.hacknet.getNodeStats(0).ram + 1;\\n    \\n    // iterate thru all of our hacknet nodes\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredRamAsync(ns, i, desiredRam);\\n    }\\n}\\n\\nasync function upgradeAllHacknetNodeCoresAsync(ns) {\\n    // we're keying desired amount off of the starting cores\\n    var desiredCores = ns.hacknet.getNodeStats(0).cores + 1;\\n    \\n    // iterate thru all of our hacknet cores\\n    for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n        await upgradeNodeToDesiredCoresAsync(ns, i, desiredCores);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel) {\\n    // Keep going until we hit the desired level\\n    while (ns.hacknet.getNodeStats(nodeIndex).level < desiredLevel) {\\n        var cost = ns.hacknet.getLevelUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next level\\n\\t\\tns.print(\\\"Waiting for more money to buy a level\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeLevel(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam) {\\n    // Keep going until we hit the desired ram\\n    while (ns.hacknet.getNodeStats(nodeIndex).ram < desiredRam) {\\n        var cost = ns.hacknet.getRamUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next ram\\n\\t\\tns.print(\\\"Waiting for more money to buy a RAM\\\");\\n\\t\\t\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeRam(nodeIndex, 1);\\n    }\\n}\\n\\nasync function upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores) {\\n    // Keep going until we hit the desired cores\\n    while (ns.hacknet.getNodeStats(nodeIndex).cores < desiredCores) {\\n        var cost = ns.hacknet.getCoreUpgradeCost(nodeIndex, 1);\\n        \\n        // Wait to have enough money to buy the next cores\\n\\t\\tns.print(\\\"Waiting for more money to buy a core\\\");\\n\\n\\t\\tawait wallet.async_waitForEnoughMoney(ns, wallet.spendLimits.hacknet, cost);\\n        \\n        ns.hacknet.upgradeCore(nodeIndex, 1);\\n    }\\n}\\n\\nasync function purchaseAndUpgradeNode(ns) {\\n    // buy a new node and get it's stats\\n    var newNodeIndex = ns.hacknet.purchaseNode();\\n    \\n    // get stats for node 0, which should have the latest upgrades\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    await upgradeNodeToDesiredLevelAsync(ns, newNodeIndex, desiredLevel);\\n    await upgradeNodeToDesiredRamAsync(ns, newNodeIndex, desiredRam);\\n    await upgradeNodeToDesiredCoresAsync(ns, newNodeIndex, desiredCores);\\n}\\n\\nasync function upgradeAllToMatchBaseNodeAsync(ns) {\\n    var baseNodeStats = ns.hacknet.getNodeStats(0);\\n    \\n    var desiredLevel = baseNodeStats.level;\\n    var desiredRam = baseNodeStats.ram;\\n    var desiredCores = baseNodeStats.cores;\\n    \\n    // // iterate thru all of our hacknet cores\\n\\tfor (var nodeIndex = 0; nodeIndex < ns.hacknet.numNodes(); nodeIndex++) {\\n\\t\\tns.print(\\\"Bringing node \\\" + nodeIndex + \\\" up to spec with base node\\\");\\n\\t\\tawait upgradeNodeToDesiredLevelAsync(ns, nodeIndex, desiredLevel);\\n\\t\\tawait upgradeNodeToDesiredRamAsync(ns, nodeIndex, desiredRam);\\n\\t\\tawait upgradeNodeToDesiredCoresAsync(ns, nodeIndex, desiredCores);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/hacknet/node_autobuy-ns2.js\",\"module\":\"\",\"ramUsage\":9.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg: ns.args[0]\\n    };\\n\\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n    enabled: false, // Master override for all tests\\n    disableMain: false, // Disables all non-testing logic in main\\n    testEnabled_exampleFunction: false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n    var sArgs = getScriptArgs(ns);\\n\\n    // - Tests ----------------------------------\\n    if (tests.enabled)\\n        executeTests(ns);\\n\\n    // - Early out ------------------------------\\n    if (tests.disableMain) {\\n        ns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n        ns.exit();\\n    }\\n\\n    // - Real Script Logic ----------------------\\n    ns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getServerRamObject(ns, server) {\\n    // Get the server's RAM, total and used\\n    var targetServRam = ns.getServerRam(server);\\n    var targetServTotalRam = targetServRam[0];\\n    var targetServUsedRam = targetServRam[1];\\n\\n    // Use the RAM info to get the free ram\\n    var targetServFreeRam = targetServTotalRam - targetServUsedRam;\\n\\n    var serverRamObj = {\\n        total: targetServRam,\\n        used: targetServUsedRam,\\n        free: targetServFreeRam,\\n    }\\n\\n    return serverRamObj;\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n    ns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/functions/getServerRamObj-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\nimport * as hpn from \\\"/master/functions/getNumOpenablePorts-ns2.js\\\";\\nimport * as gsr from \\\"/master/functions/getServerRamObj-ns2.js\\\";\\nimport * as gra from \\\"/master/functions/getRootAccess-ns2.js\\\";\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n\\t\\tdeployTarget : ns.args[0],\\n        fallbackHackTarget : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\t// Set the best target\\n\\tvar bestHackTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n\\tif(bestHackTarget === \\\"NULL PORT DATA\\\") {\\n\\t\\tbestHackTarget = sArgs.fallbackHackTarget;\\n\\t}\\n\\n\\t// Function is built around a server array, so we build a simple one\\n\\tvar serverInfoArray = [bsi.getTargetInfo(ns, sArgs.deployTarget, null, 0)];\\n\\n\\t// Deploy the hackbots\\n\\tawait deployHackBots(ns, serverInfoArray, bestHackTarget);\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport async function deployHackBots(ns, deployServerListArray, hackTargetServer) {\\n\\tns.print(\\\"Beggining to deploy the hack bots! Targeting: \\\" + hackTargetServer);\\n\\n\\t// Ensure we have root access on the hack target\\n\\tgra.getRootAccess(ns, hackTargetServer);\\n\\n\\tvar portBreakingLevel = hpn.getNumOpenablePorts(ns);\\n\\n\\tfor (var i = 0; i < deployServerListArray.length; i++) {\\n\\t\\tvar deployServer = deployServerListArray[i];\\n\\t\\tns.print(\\\"Evaluating server: \\\" + deployServer.name);\\n\\n\\t\\tvar hackHelperScript = \\\"/master/hacking/helpers/hack_target_loop-ns1.script\\\";\\n\\t\\tvar growHelperScript = \\\"/master/hacking/helpers/grow_target_loop-ns1.script\\\";\\n\\t\\tvar weakenHelperScript = \\\"/master/hacking/helpers/weaken_target_loop-ns1.script\\\";\\n\\n\\t\\tvar minRequiredRam = ns.getScriptRam(hackHelperScript) + ns.getScriptRam(growHelperScript) + ns.getScriptRam(weakenHelperScript);\\n\\n\\t\\ttry {\\n\\t\\t\\tif ((portBreakingLevel >= deployServer.numPortsRequired && deployServer.ram >= minRequiredRam && deployServer.isHome === false) || deployServer.isPserv) {\\n\\t\\t\\t\\tns.print(\\\"Preparing to deploy the hack bots to: \\\" + deployServer.name);\\n\\t\\t\\t\\tgra.getRootAccess(ns, deployServer.name);\\n\\n\\t\\t\\t\\t// ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n\\t\\t\\t\\twhile (ns.killall(deployServer.name)) {\\n\\t\\t\\t\\t\\tns.print(\\\"Sleeping after trying to killall on \\\" + deployServer.name);\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar freeRam = gsr.getServerRamObject(ns, deployServer.name).free;\\n\\t\\t\\t\\t// Algorithm v2\\n\\t\\t\\t\\t// Weakening and hacking should make up at least 10% of the RAM pool, the remainder goes towards growing\\n\\t\\t\\t\\tvar ramPerWeakenHelperThread = ns.getScriptRam(weakenHelperScript);\\n\\t\\t\\t\\tvar weakenReservedRamMinimumModifier = 0.15;\\n\\t\\t\\t\\tvar weakenMinThreads = 1;\\n\\t\\t\\t\\tvar weakenRamMinRequirement = freeRam * weakenReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar weakenThreads = Math.ceil(weakenRamMinRequirement / ramPerWeakenHelperThread);\\n\\t\\t\\t\\tif (weakenThreads < weakenMinThreads) {\\n\\t\\t\\t\\t\\tweakenThreads = weakenMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar weakenRamUsage = weakenThreads * ramPerWeakenHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerHackHelperThread = ns.getScriptRam(hackHelperScript);\\n\\t\\t\\t\\tvar hackReservedRamMinimumModifier = 0.10;\\n\\t\\t\\t\\tvar hackMaxStealPercent = 0.01;\\n\\t\\t\\t\\tvar hackPercentPerThread = ns.hackAnalyzePercent(hackTargetServer)/100;\\n\\t\\t\\t\\tvar hackMaxThreadsRaw = hackMaxStealPercent/hackPercentPerThread;\\n\\t\\t\\t\\tvar hackMaxThreads = Math.floor(hackMaxThreadsRaw);\\n\\t\\t\\t\\tvar hackMinThreads = 1;\\n\\t\\t\\t\\tvar hackRamMinRequirement = freeRam * hackReservedRamMinimumModifier;\\n\\t\\t\\t\\tvar hackThreads = Math.ceil(hackRamMinRequirement / ramPerHackHelperThread);\\n\\t\\t\\t\\tif (hackThreads > hackMaxThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMaxThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (hackThreads < hackMinThreads) {\\n\\t\\t\\t\\t\\thackThreads = hackMinThreads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar hackRamUsage = hackThreads * ramPerHackHelperThread;\\n\\n\\t\\t\\t\\tvar ramPerGrowHelperThread = ns.getScriptRam(growHelperScript);\\n\\t\\t\\t\\tvar growRamPool = freeRam - (weakenRamUsage + hackRamUsage);\\n\\t\\t\\t\\tvar growThreads = Math.floor(growRamPool / ramPerGrowHelperThread);\\n\\n\\t\\t\\t\\tns.print(\\\"=========== Thread Count Dump ===========\\\");\\n\\t\\t\\t\\tns.print(\\\"weakenThreads: \\\" + weakenThreads);\\n\\t\\t\\t\\tns.print(\\\"growThreads: \\\" + growThreads);\\n\\t\\t\\t\\tns.print(\\\"hackThreads: \\\" + hackThreads);\\n\\t\\t\\t\\tns.print(\\\"============= End Debug Dump ============\\\");\\n\\n\\t\\t\\t\\t// Copy the scripts\\n\\t\\t\\t\\tns.print(\\\"Copying scripts...\\\");\\n\\t\\t\\t\\tns.scp(hackHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(growHelperScript, \\\"home\\\", deployServer.name);\\n\\t\\t\\t\\tns.scp(weakenHelperScript, \\\"home\\\", deployServer.name);\\n\\n\\t\\t\\t\\t// Run the scripts\\n\\t\\t\\t\\tns.print(\\\"Launching the hack bots!\\\");\\n\\t\\t\\t\\tawait ns.exec(weakenHelperScript, deployServer.name, weakenThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(growHelperScript, deployServer.name, growThreads, hackTargetServer);\\n\\t\\t\\t\\tawait ns.exec(hackHelperScript, deployServer.name, hackThreads, hackTargetServer, ns.getServerMaxMoney(hackTargetServer));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch(error)\\n\\t\\t{\\n\\t\\t\\tns.tprint(error);\\n\\t\\t\\tns.tprint(\\\"Likely a server stopped existing\\\");\\n\\t\\t}\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/deployHackBots-ns2.js\",\"module\":\"\",\"ramUsage\":7.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as enumLib from \\\"/master/functions/enumLib-ns2.js\\\";\\nvar ePortIndex = enumLib.getEnumPortIndexVersion(1);\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        scanFrequency : ns.args[0],\\n        mode : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    if (sArgs.mode === \\\"print\\\") {\\n        await monitorModePrint(ns, sArgs.scanFrequency);\\n    }\\n    else if (sArgs.mode === \\\"tprint\\\") {\\n        await monitorModeTPrint(ns, sArgs.scanFrequency);\\n    }\\n    else {\\n        await monitorModePrint(ns);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function monitorModePrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.print(\\\"scanTarget: \\\" + scanTarget);\\n            ns.print(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.print(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\nasync function monitorModeTPrint(ns, scanFrequency) {\\n    while(true) {\\n        if (ns.peek(ePortIndex.PRIMARY_HACKING_TARGET) !== \\\"NULL PORT DATA\\\") {\\n            var scanTarget = ns.peek(ePortIndex.PRIMARY_HACKING_TARGET);\\n            var securityCurrent = ns.nFormat(ns.getServerSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var securityMinimum = ns.nFormat(ns.getServerMinSecurityLevel(scanTarget), \\\"0,0.0\\\");\\n            var moneyCurrent = ns.nFormat(ns.getServerMoneyAvailable(scanTarget), \\\"0,0.00\\\");\\n            var moneyMax = ns.nFormat(ns.getServerMaxMoney(scanTarget), \\\"0,0.00\\\");\\n\\n            ns.tprint(\\\"scanTarget: \\\" + scanTarget);\\n            ns.tprint(\\\"Security (Minimum): \\\" + securityCurrent + \\\" (\\\" + securityMinimum + \\\")\\\");\\n            ns.tprint(\\\"Money (Max): \\\" + moneyCurrent + \\\" (\\\" + moneyMax + \\\")\\\");\\n        }\\n        else {\\n            ns.print(\\\"Bad peek results: \\\" + ns.peek(ePortIndex.PRIMARY_HACKING_TARGET));\\n        }\\n\\n        await ns.sleep(scanFrequency * 1000);\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/hacking/monitor-ns2.js\",\"module\":{},\"ramUsage\":3,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    \\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n    \\n    while(true) {\\n        await recruitmentMembers(ns);\\n        updateGangMemberCombatEquipment(ns);\\n        updateGangMemberHackingEquipment(ns);\\n        updateGangMemberTasks(ns);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function recruitmentMembers(ns) {\\n    while (ns.gang.canRecruitMember()) {\\n        var currentDateTime = new Date();\\n        // $TODO: Someday name a gang member \\\"Android-function getMilliseconds() { [native code] }\\\", for the funny\\n        var newGangMemberName = \\\"Android-\\\" + currentDateTime.getTime();\\n        ns.gang.recruitMember(newGangMemberName);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nfunction updateGangMemberCombatEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === false) {\\n        ns.print(\\\"Buying combat equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n\\n            if(ns.gang.getEquipmentType(equipment) !== \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberHackingEquipment(ns) {\\n    if(ns.gang.getGangInformation().isHacking === true) {\\n        ns.print(\\\"Buying hacking equipment\\\");\\n\\n        // Get a list of possible equipment\\n        var equipmentNamesArray = ns.gang.getEquipmentNames();\\n        \\n        for(var i=0; i < equipmentNamesArray.length; i++) {\\n            var equipment = equipmentNamesArray[i];\\n    \\n            if(ns.gang.getEquipmentType(equipment) === \\\"Rootkit\\\" && ns.gang.getEquipmentType(equipment) !== \\\"Augmentation\\\") {\\n                purchaseEquipmentForAllGangMembers(ns, equipment);\\n            }\\n        }\\n    }\\n}\\n\\nfunction updateGangMemberTasks(ns) {\\n    // Determine if the gang is a hacking gang or not\\n\\n    if (ns.gang.getGangInformation().isHacking === true) {\\n        assignHackingTasks(ns);\\n    }\\n    else if (ns.gang.getGangInformation().isHacking === false) {\\n        assignCombatTasks(ns);\\n    }\\n}\\n\\nfunction assignHackingTasks(ns) {\\n\\n}\\n\\nfunction assignCombatTasks(ns) {\\n    // Task will be \\\"Unassigned\\\" if not assigned\\n    // Build a list of gang members\\n    var gangMemberNamesArray = ns.gang.getMemberNames()\\n\\n    // iterate thru the gang members\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMemberName = gangMemberNamesArray[i];\\n        var gangMemberTask = getMemberInformation(gangMemberName).task;\\n        // if \\\"Unassigned\\\" set to \\\"Vigalante Justice\\\"\\n        if (gangMemberTask === \\\"Unassigned\\\") {\\n            setMemberTask(gangMemberName, \\\"Vigalante Justice\\\")\\n        }\\n\\n    }    \\n}\\n\\nfunction purchaseEquipmentForAllGangMembers(ns, equipment) {\\n    var gangMemberNamesArray = ns.gang.getMemberNames();\\n\\n    var equipmentCost = ns.gang.getEquipmentCost(equipment);\\n\\n    for(var i=0; i < gangMemberNamesArray.length; i++) {\\n        var gangMember = gangMemberNamesArray[i];\\n        var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.gangEquipment)\\n\\n        if(availableMoney > equipmentCost) {\\n            ns.gang.purchaseEquipment(gangMember, equipment);\\n        }\\n    }\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/gang/godfather-ns2.js\",\"module\":\"\",\"ramUsage\":20.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nexport var spendLimits = {\\n    newServer : 0.70,\\n    hacknet : 0.90,\\n    gangEquipment : 0.10,\\n};\\n\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n}\\n\\n// ===== FUNCTIONS ==============================\\nexport function getMyMoney(ns) {\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\n}\\n\\nexport function getAvailableMoney(ns, spendLimit) {\\n    var myMoney = getMyMoney(ns);\\n    var availableMoney = myMoney * spendLimit;\\n\\n    return availableMoney;\\n}\\n\\nexport function getSpendLimits() {\\n    return spendLimits;\\n}\\n\\nexport async function async_waitForEnoughMoney(ns, spendLimitModifier, desiredMoney) {\\n    var availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n\\n    while (availableMoney < desiredMoney) {\\n        debugDumpMoneyStats(ns, availableMoney, desiredMoney);\\n        await ns.sleep(10 * 1000);\\n        availableMoney = getAvailableMoney(ns, spendLimitModifier);\\n    }\\n}\\n\\nexport function debugDumpMoneyStats(ns, availableMoney, desiredMoney) {\\n    var percentageOfNeeded = (availableMoney/desiredMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! \\\" +\\n        \\\"Available: \\\" + ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        \\\"Desired: \\\" + ns.nFormat(desiredMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/character/wallet-ns2.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n\\n\\nexport async function main(ns) {\\n    var someNumber = 123456789.98765431;\\n    \\n    ns.tprint(ns.nFormat(wallet.spendLimits.newServer, \\\"0,0.00\\\"));\\n    ns.tprint(ns.nFormat(someNumber, \\\"0,0.00\\\"));\\n    \\n    ns.tprint(ns.heart.break());\\n    \\n    \\n    ns.tprint(\\\"Done!\\\");\\n}\",\"filename\":\"/temp/ns2_scratch.js\",\"module\":\"\",\"ramUsage\":1.7,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as wallet from \\\"/master/character/wallet-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        hackTarget : ns.args[0],\\n        desiredStartingRam : ns.args[1],\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n    ramIncreaseFactor : 16,\\n    setupScriptName : \\\"/master/hacking/deployHackBots-ns2.js\\\",\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n    ns.disableLog(\\\"ALL\\\");\\n\\n    var desiredRam = sArgs.desiredStartingRam;\\n    \\n    while(desiredRam <= ns.getPurchasedServerMaxRam()) {\\n        await fillEmptyServerSlots(ns, sArgs, desiredRam);\\n        await upgradeExisitngServers(ns, sArgs, desiredRam);\\n        desiredRam = incrementDesiredRam(desiredRam, sVars.ramIncreaseFactor);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function fillEmptyServerSlots(ns, sArgs, desiredRam) {\\n    while (ns.getPurchasedServers().length < ns.getPurchasedServerLimit()) {\\n        ns.print(\\\"DEBUG: Buying at \\\" + desiredRam + \\\"GB\\\");\\n\\n        // create a server name\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n\\n        // Attempt to buy a server\\n        var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n        var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n        // Run setup script on the new server\\n        await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function upgradeExisitngServers(ns, sArgs, desiredRam) {\\n    ns.print(\\\"DEBUG: Upgrading to \\\" + desiredRam + \\\"GB\\\");\\n\\n    // call get purchased servers\\n    var purchasedServers = ns.getPurchasedServers();\\n\\n    for (var servIndex = 0; servIndex < purchasedServers.length; servIndex++) {\\n        var oldHostname = purchasedServers[servIndex];\\n        ns.print(\\\"DEBUG: Evaluating: \\\" + oldHostname);\\n\\n        var oldHostRam = ns.getServerRam(oldHostname)[0];\\n\\n        if (oldHostRam < desiredRam) {\\n            // Wait for enough money\\n            await waitForEnoughMoney(ns, desiredRam);\\n\\n            // delete the old server\\n            await deleteOldServer(ns, oldHostname);\\n\\n            // buy a server\\n            var desiredServerName = \\\"pserv-\\\" + desiredRam + \\\"GB\\\";\\n            var newHostname = await purchaseNewServer(ns, desiredServerName, desiredRam);\\n\\n            ns.print(\\\"DEBUG: New server named: \\\" + newHostname);\\n\\n            // Run setup script on the new server\\n            await ns.run(sVars.setupScriptName, 1, newHostname, sArgs.hackTarget);\\n        }\\n    }\\n}\\n\\nasync function deleteOldServer(ns, server) {\\n    while(ns.serverExists(server)) {\\n        // kill all scripts on the old server\\n        // ns.killall returns true if any scripts were killed, false if not. We're ready to move on if we haven't killed anything\\n        while (ns.killall(server)) {\\n            ns.print(\\\"Sleeping after trying to killall on \\\" + server);\\n            await ns.sleep(1000);\\n        }\\n    \\n        // delete the old server\\n        ns.print(\\\"DEBUG: Deleting: \\\" + server);\\n        ns.deleteServer(server);\\n\\n        await ns.sleep(100);\\n    }\\n}\\n\\nasync function purchaseNewServer(ns, desiredServerName, desiredRam) {\\n    var newHostname = \\\"\\\";\\n\\n    while (newHostname === \\\"\\\") {\\n        // Wait for enough money\\n        await waitForEnoughMoney(ns, desiredRam);\\n\\n        newHostname = ns.purchaseServer(desiredServerName, desiredRam);\\n        await ns.sleep(1000);\\n    }\\n\\n    return newHostname;\\n}\\n\\nasync function waitForEnoughMoney(ns, desiredRam) {\\n    while (wallet.getAvailableMoney(ns, wallet.spendLimits.newServer) < ns.getPurchasedServerCost(desiredRam)) {\\n        debugDumpMoneyStats(ns, desiredRam);\\n        await ns.sleep(60 * 1000);\\n    }\\n}\\n\\nfunction incrementDesiredRam(currentDesiredRam, ramMultiplier) {\\n    var newDesiredRam = currentDesiredRam * ramMultiplier;\\n\\n    return newDesiredRam;\\n}\\n\\nfunction debugDumpMoneyStats(ns, desiredRam) {\\n    var availableMoney = wallet.getAvailableMoney(ns, wallet.spendLimits.newServer);\\n    var neededMoney = ns.getPurchasedServerCost(desiredRam);\\n    var percentageOfNeeded = (availableMoney/neededMoney)*100;\\n\\n    ns.print(\\\"DEBUG: Not enough money! Available / Needed / %: \\\" +\\n        ns.nFormat(availableMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(neededMoney, \\\"0,0.00\\\") + \\\" / \\\" +\\n        ns.nFormat(percentageOfNeeded, \\\"0.0\\\") + \\\"%\\\");\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/buy_server/buy_server-ns2.js\",\"module\":{},\"ramUsage\":10.5,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\nimport * as bsi from \\\"/master/functions/buildServerInfoArray-ns2.js\\\";\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs(ns) {\\n    var scriptArgs = {\\n        firstArg : ns.args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar e_contractTypes = {\\n\\tfindLargestPrimeFactor : \\\"Find Largest Prime Factor\\\",\\n\\tsubarrayWithMaximumSum : \\\"Subarray with Maximum Sum\\\",\\n\\ttotalWaysToSum : \\\"Total Ways to Sum\\\",\\n\\tspiralizeMatrix : \\\"Spiralize Matrix\\\",\\n\\tarrayJumpingGame : \\\"Array Jumping Game\\\",\\n\\tmergeOverlappingIntervals : \\\"Merge Overlapping Intervals\\\",\\n\\tgenerateIPAddresses : \\\"Generate IP Addresses\\\",\\n\\talgorithmicStockTraderI : \\\"Algorithmic Stock Trader I\\\",\\n\\talgorithmicStockTraderII : \\\"Algorithmic Stock Trader II\\\",\\n\\talgorithmicStockTraderIII : \\\"Algorithmic Stock Trader III\\\",\\n\\talgorithmicStockTraderIV : \\\"Algorithmic Stock Trader IV\\\",\\n\\tminimumPathSumInATriangle : \\\"Minimum Path Sum in a Triangle\\\",\\n\\tuniquePathsInAGridI : \\\"Unique Paths in a Grid I\\\",\\n\\tuniquePathsInAGridII : \\\"Unique Paths in a Grid II\\\",\\n\\tsanitizeParenthesesInExpression : \\\"Sanitize Parentheses in Expression\\\",\\n\\tfindAllValidMathExpressions : \\\"Find All Valid Math Expressions\\\",\\n};\\n\\nvar e_allowedToSolve = {\\n\\tfindLargestPrimeFactor : true,\\n\\tsubarrayWithMaximumSum : true,\\n\\ttotalWaysToSum : true,\\n\\tspiralizeMatrix : true,\\n\\tarrayJumpingGame : true,\\n\\tmergeOverlappingIntervals : true,\\n\\tgenerateIPAddresses : true,\\n\\talgorithmicStockTraderI : true,\\n\\talgorithmicStockTraderII : true,\\n\\talgorithmicStockTraderIII : true,\\n\\talgorithmicStockTraderIV : true,\\n\\tminimumPathSumInATriangle : true,\\n\\tuniquePathsInAGridI : true,\\n\\tuniquePathsInAGridII : true,\\n\\tsanitizeParenthesesInExpression : true,\\n\\tfindAllValidMathExpressions : true,\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nexport async function main(ns) {\\n\\tvar sArgs = getScriptArgs(ns);\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests(ns);\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\tns.tprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\tns.exit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tns.print(\\\"Starting script...\\\");\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile(true) {\\n\\t\\tawait async_findContractsAndLaunchSolver(ns);\\n\\n\\t\\tawait ns.sleep(60*1000);\\n\\t}\\n}\\n\\n// ===== FUNCTIONS ==============================\\nasync function async_findContractsAndLaunchSolver(ns) {\\n\\t// Build a server list\\n\\tvar serverListArray = await bsi.buildServerInfoArray(ns);\\n\\t\\n\\t// Iterate thru the list of servers\\n\\tfor(var i=0; i<serverListArray.length; i++) {\\n\\t\\tvar server = serverListArray[i].name;\\n\\n\\t\\t// Do an ls() on the server\\n\\t\\tvar lsResults = ns.ls(server, \\\".cct\\\");\\n\\n\\t\\t// If there are results matching the contract extension, spit info out to the terminal window\\n\\t\\tif(lsResults.length > 0) {\\n\\t\\t\\tfor(var j=0; j<lsResults.length; j++) {\\n\\t\\t\\t\\tvar contractName = lsResults[j];\\n\\t\\t\\t\\tlaunchRelevantSolver(ns, contractName, server);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction launchRelevantSolver (ns, contractName, server) {\\n\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\n\\t// buy the right thing\\n\\tswitch(contractType){\\n\\t\\tcase e_contractTypes.algorithmicStockTraderI:\\n\\t\\t\\tsolver_algorithmicStockTraderI(ns, contractName, server);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tns.tprint(\\\"No solver for type [\\\" + contractType + \\\"] on server [\\\" + server + \\\"] for contract [\\\" + contractName + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_findLargestPrimeFactor(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_subarrayWithMaximumSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_totalWaysToSum(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_spiralizeMatrix(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_arrayJumpingGame(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_mergeOverlappingIntervals(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_generateIPAddresses(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderI(ns, contractName, server) {\\n\\t/* ===== Problem Definition ====================================================================================================== **\\n\\tYou are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\n\\t\\tEx. 169,81,124,99,97,182,81,176,32,172,135\\n\\tDetermine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once).\\n\\tIf no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\n\\t** =============================================================================================================================== */\\n\\tif (e_allowedToSolve.algorithmicStockTraderI) {\\n\\t\\tvar contractType = ns.codingcontract.getContractType(contractName, server);\\n\\t\\tvar contractData = ns.codingcontract.getData(contractName, server);\\n\\t\\n\\t\\tvar stockPriceList = contractData;\\n\\t\\tvar maxBuyIndex = stockPriceList.length - 1;\\n\\t\\tvar maxSellIndex = stockPriceList.length;\\n\\t\\n\\t\\tvar bestProfit = 0;\\n\\t\\n\\t\\tfor(var buyPriceIndex = 0; buyPriceIndex < maxBuyIndex; buyPriceIndex++) {\\n\\t\\t\\tfor(var sellPriceIndex = buyPriceIndex + 1; sellPriceIndex < maxSellIndex; sellPriceIndex++) {\\n\\t\\t\\t\\tvar buyPrice = stockPriceList[buyPriceIndex];\\n\\t\\t\\t\\tvar sellPrice = stockPriceList[sellPriceIndex];\\n\\t\\t\\t\\tvar testProfit = sellPrice - buyPrice;\\n\\t\\n\\t\\t\\t\\tif (testProfit > bestProfit) {\\n\\t\\t\\t\\t\\tbestProfit = testProfit;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\tvar result = ns.codingcontract.attempt(bestProfit, contractName, server, {returnReward : true});\\n\\n\\t\\tif(result === false || result === \\\"\\\") {\\n\\t\\t\\te_allowedToSolve.algorithmicStockTraderI = false;\\n\\t\\t\\tns.tprint(\\\"CONTRACT FAILED: Type: [\\\" + contractType + \\\"], FileName: [\\\" + contractName + \\\"], Server: [\\\" + server + \\\"]\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tns.tprint(\\\"Completed Completed: Type: [\\\" + contractType + \\\"], fileName: [\\\" + contractName + \\\"], Server [\\\" + server + \\\"]\\\");\\n\\t\\t\\tns.tprint(result);\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tns.tprint(\\\"Solver disabled for type: [\\\" + contractType + \\\"]\\\");\\n\\t\\tns.tprint(\\\"There is a contract of this type named [\\\" + contractName + \\\"] on server [\\\" + server + \\\"]\\\");\\n\\t}\\n}\\n\\nfunction solver_algorithmicStockTraderII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_algorithmicStockTraderIV(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_minimumPathSumInATriangle(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridI(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_uniquePathsInAGridII(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_sanitizeParenthesesInExpression(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\nfunction solver_findAllValidMathExpressions(ns, contractName, server) {\\n\\tns.tprint(\\\"No solver for: \\\" + server + \\\" / \\\" + contractName);\\n}\\n\\n// ===== TESTS ==================================\\nfunction executeTests(ns) {\\n\\tif (tests.testEnabled_exampleFunction)\\n\\t\\ttest_exampleFunction(ns);\\n}\\n\\nfunction test_exampleFunction(ns) {\\n\\tns.print(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/contracts/foreman-ns2.js\",\"module\":\"\",\"ramUsage\":22.95,\"server\":\"60.8.2.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// ===== IMPORTS ================================\\n\\n// ===== ARGS ===================================\\nfunction getScriptArgs() {\\n    var scriptArgs = {\\n        crimesToCommit : args[0]\\n    };\\n    \\n    return scriptArgs;\\n}\\n\\n// ===== VARS ===================================\\nvar sVars = {\\n\\n};\\n\\nvar tests = {\\n\\tenabled : false, // Master override for all tests\\n\\tdisableMain : false, // Disables all non-testing logic in main\\n\\ttestEnabled_exampleFunction : false,\\n};\\n\\n// ===== MAIN ===================================\\nmain();\\n\\nfunction main() {\\n\\tvar sArgs = getScriptArgs();\\n\\t\\n\\t// - Tests ----------------------------------\\n\\tif (tests.enabled)\\n\\t\\texecuteTests();\\n\\t\\n\\t// - Early out ------------------------------\\n\\tif (tests.disableMain) {\\n\\t\\ttprint(\\\"WARNING: SCRIPT IS IN TEST ONLY MODE\\\");\\n\\t\\texit();\\n\\t}\\n\\t\\n\\t// - Real Script Logic ----------------------\\n\\tprint(\\\"Starting script...\\\");\\n\\tdisableLog(\\\"ALL\\\");\\n\\t\\n\\tfor( i=0; i < sArgs.crimesToCommit; i++ ) {\\n\\t\\tif (isBusy() === false) {\\n\\t\\t\\tcommitCrime(\\\"homicide\\\");\\n\\t\\t}\\n\\t\\tsleep(1000);\\n    }\\n}\\n\\n// ===== FUNCTIONS ==============================\\n\\n\\n// ===== TESTS ==================================\\nfunction executeTests() {\\n    if (tests.testEnabled_exampleFunction)\\n        test_exampleFunction();\\n}\\n\\nfunction test_exampleFunction() {\\n\\tprint(\\\"==== TEST: test_exampleFunction ====\\\");\\n\\n}\",\"filename\":\"/master/world/slums/homicide-ns1.script\",\"module\":\"\",\"ramUsage\":7.1,\"server\":\"60.8.2.2\"}}],\"serversOnNetwork\":[\"79.9.5.7\",\"13.1.5.7\",\"10.6.6.7\",\"17.1.0.7\",\"2.0.4.6\",\"1.5.3.1\",\"94.9.9.2\",\"46.6.1.8\",\"24.4.3.6\",\"49.5.4.4\",\"73.6.8.3\",\"95.1.3.8\",\"12.3.4.6\",\"75.8.1.9\",\"39.8.6.4\",\"49.2.3.4\",\"50.7.7.6\",\"89.7.8.1\",\"64.3.1.9\",\"20.9.0.4\",\"19.9.2.9\",\"42.3.0.3\",\"20.3.1.8\",\"82.3.4.1\",\"46.3.6.6\",\"10.8.9.3\",\"53.7.4.1\",\"60.0.4.6\",\"70.8.5.3\",\"20.0.2.9\",\"3.9.3.3\",\"97.4.1.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"// TODO Create a file copying script, assuming the libraries allow it\\n// TODO Create a script for buying up hacknet nodes\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/configs/hack_target.txt\",\"text\":\"harakiri-sushi\"}}],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"52.3.1.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"52.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"25.2.0.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":24725346673.5,\"moneyMax\":92720050025.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1378,\"serverGrowth\":99}},\"83.8.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-888139.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,35,26,14,9,39,39,37,2,34,29,18,36,7],[41,22,12,6,11,13,16,34,15,3,23,29,38,37],[1,25,50,7,45,2,22,28,47,30,15,11,20,37],[42,26,28,43,28,33,47,29,17,38,24,16,35,41],[39,14,37,17,24,4,21,46,12,33,11,10,15,38],[2,38,38,41,21,3,15,23,42,3,15,19,13,6]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"83.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"80.5.0.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":39594565287,\"moneyMax\":148479619826.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1315,\"serverGrowth\":99}},\"14.3.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-202279.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)(()())aaaa\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.3.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.3.5.4\",\"69.6.8.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":84,\"hackDifficulty\":84,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":11515203465.75,\"moneyMax\":43182012996.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1098,\"serverGrowth\":76}},\"80.5.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"80.5.0.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"85.5.6.2\",\"83.8.3.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":20643348586.5,\"moneyMax\":77412557199.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1167,\"serverGrowth\":64}},\"20.1.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"20.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"New World Order\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.3.5.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":15861571414.5,\"moneyMax\":59480892804.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1149,\"serverGrowth\":68}},\"25.2.0.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-652634.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-129635.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,15,22,22,3],[37,41,30,3,39],[29,33,34,44,1],[10,13,5,27,9],[16,1,28,2,14],[36,43,21,7,20],[11,37,13,37,46],[25,11,4,14,41]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737847.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,1,0,0],[0,0,0,0,1,0,1],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"25.2.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"85.5.6.2\",\"52.3.1.4\",\"14.7.5.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":47,\"hackDifficulty\":47,\"manuallyHacked\":false,\"minDifficulty\":16,\"moneyAvailable\":13258486377.75,\"moneyMax\":49719323916.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1135,\"serverGrowth\":55}},\"72.3.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-886330.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[105,2,191,182,59,73,119,155,177,30,48,100,53,47,72,123,187,71,162,90,30,120,17,47,110,4,73,167,150,64,75,72,88,146,118,175,64]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"72.3.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.6.3.6\",\"14.3.1.3\",\"20.1.9.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":96,\"hackDifficulty\":96,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":11431735323.75,\"moneyMax\":42869007464.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":982,\"serverGrowth\":96}},\"44.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183257.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17721363182\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"44.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"FourSigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"59.0.6.3\",\"31.7.9.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":18554760512.25,\"moneyMax\":69580351920.9375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1226,\"serverGrowth\":88}},\"46.8.1.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"46.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"87.6.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":20477172418.5,\"moneyMax\":76789396569.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1252,\"serverGrowth\":98}},\"2.4.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"2.4.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\",\"85.5.6.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":93,\"hackDifficulty\":93,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":1315894296.75,\"moneyMax\":4934603612.8125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1148,\"serverGrowth\":91}},\"14.7.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"14.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies Assets\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"25.2.0.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":99,\"hackDifficulty\":99,\"manuallyHacked\":false,\"minDifficulty\":33,\"moneyAvailable\":750000,\"moneyMax\":2812500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1334,\"serverGrowth\":1}},\"59.0.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"59.0.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\",\"44.5.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":88,\"hackDifficulty\":88,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":867928173,\"moneyMax\":3254730648.75,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":935,\"serverGrowth\":82}},\"23.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"23.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":610244093.25,\"moneyMax\":2288415349.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":868,\"serverGrowth\":47}},\"45.3.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450218.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[173,93,154,74,123,45,82,137,158,94,23,81,44,34,166,123,171,59,180,22,99,16],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"45.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.1.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":470103653.25,\"moneyMax\":1762888699.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":946,\"serverGrowth\":52}},\"20.3.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"20.3.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"66.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":95,\"hackDifficulty\":95,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":423725753.25,\"moneyMax\":1588971574.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":900,\"serverGrowth\":73}},\"87.6.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"87.6.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"42.8.4.4\",\"72.3.5.4\",\"46.8.1.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":594842373.75,\"moneyMax\":2230658901.5625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":894,\"serverGrowth\":77}},\"25.4.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"25.4.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":92,\"hackDifficulty\":92,\"manuallyHacked\":false,\"minDifficulty\":31,\"moneyAvailable\":719209384.5,\"moneyMax\":2697035191.875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":898,\"serverGrowth\":85}},\"72.2.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"72.2.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141.6096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2843.8099999996043,\"ramUsage\":1.75,\"server\":\"72.2.1.7\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,53,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.3008,\"onlineMoneyMade\":0,\"onlineRunningTime\":2843.8099999996043,\"ramUsage\":1.75,\"server\":\"72.2.1.7\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2843.8099999996043,\"ramUsage\":1.8,\"server\":\"72.2.1.7\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"72.2.1.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.2.1.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"72.2.1.7\"}}],\"serversOnNetwork\":[\"56.7.4.0\",\"75.9.4.1\",\"50.4.2.7\",\"74.2.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":88,\"hackDifficulty\":88,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":867470017.5,\"moneyMax\":3253012565.625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":872,\"serverGrowth\":82}},\"47.0.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"47.0.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"50.4.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":668037534.75,\"moneyMax\":2505140755.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":858,\"serverGrowth\":80}},\"13.6.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"13.6.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.9.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":74,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":452402187.75,\"moneyMax\":1696508204.0625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":854,\"serverGrowth\":72}},\"75.9.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"75.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\",\"13.6.2.0\",\"42.8.4.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":634564198.5,\"moneyMax\":2379615744.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":915,\"serverGrowth\":76}},\"85.9.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"85.9.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":621659746.5,\"moneyMax\":2331224049.375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":830,\"serverGrowth\":90}},\"46.2.8.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"46.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"99.5.7.3\",\"65.0.3.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":82,\"hackDifficulty\":82,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":819420078,\"moneyMax\":3072825292.5,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":875,\"serverGrowth\":63}},\"56.7.4.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"56.7.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.1.0.2\",\"23.3.9.3\",\"25.4.1.6\",\"72.2.1.7\",\"32.9.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":89,\"hackDifficulty\":89,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":692494501.5,\"moneyMax\":2596854380.625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":926,\"serverGrowth\":66}},\"50.4.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226368.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3546\",65],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"50.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\",\"47.0.8.5\",\"66.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":65,\"hackDifficulty\":65,\"manuallyHacked\":false,\"minDifficulty\":22,\"moneyAvailable\":691225128,\"moneyMax\":2592094230,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":799,\"serverGrowth\":69}},\"42.8.4.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"42.8.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.9.4.1\",\"87.6.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":79,\"hackDifficulty\":79,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":559889784.75,\"moneyMax\":2099586692.8125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":833,\"serverGrowth\":70}},\"56.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"56.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"65.0.3.2\",\"45.3.5.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":580331619,\"moneyMax\":2176243571.25,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":782,\"serverGrowth\":70}},\"95.0.7.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"95.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Delta One\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"75.1.0.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":82,\"hackDifficulty\":82,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":1159313225.25,\"moneyMax\":4347424594.6875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":891,\"serverGrowth\":55}},\"75.1.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"75.1.0.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.8736,\"onlineMoneyMade\":0,\"onlineRunningTime\":2850.0099999995987,\"ramUsage\":1.75,\"server\":\"75.1.0.2\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,2,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2850.0099999995987,\"ramUsage\":1.75,\"server\":\"75.1.0.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2850.0099999995987,\"ramUsage\":1.8,\"server\":\"75.1.0.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"75.1.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.1.0.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.1.0.2\"}}],\"serversOnNetwork\":[\"96.8.7.8\",\"56.7.4.0\",\"95.0.7.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1259451906,\"moneyMax\":4722944647.5,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":826,\"serverGrowth\":86}},\"74.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"74.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"72.2.1.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":69,\"hackDifficulty\":69,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":927367247.25,\"moneyMax\":3477627177.1875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":839,\"serverGrowth\":67}},\"32.9.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"32.9.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"56.7.4.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":76,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1028811026.25,\"moneyMax\":3858041348.4375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":822,\"serverGrowth\":73}},\"65.0.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-276334.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)a)()a()(a))))))a(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"65.0.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2807.4099999996374,\"ramUsage\":1.75,\"server\":\"65.0.3.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2807.4099999996374,\"ramUsage\":1.75,\"server\":\"65.0.3.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2807.4099999996374,\"ramUsage\":1.8,\"server\":\"65.0.3.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"65.0.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"65.0.3.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"65.0.3.2\"}}],\"serversOnNetwork\":[\"46.2.8.9\",\"56.1.5.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":80,\"hackDifficulty\":80,\"manuallyHacked\":false,\"minDifficulty\":27,\"moneyAvailable\":785444858.25,\"moneyMax\":2945418218.4375,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":794,\"serverGrowth\":76}},\"64.3.6.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"64.3.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Lexo Corporation\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2887.209999999565,\"ramUsage\":1.75,\"server\":\"64.3.6.9\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2887.209999999565,\"ramUsage\":1.75,\"server\":\"64.3.6.9\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2887.209999999565,\"ramUsage\":1.8,\"server\":\"64.3.6.9\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"64.3.6.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.6.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.6.9\"}}],\"serversOnNetwork\":[\"50.9.7.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":79,\"hackDifficulty\":79,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":557288922.75,\"moneyMax\":2089833460.3125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":688,\"serverGrowth\":64}},\"7.9.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183572.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,14],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"7.9.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2911.8099999995425,\"ramUsage\":1.75,\"server\":\"7.9.7.1\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":334.7136,\"onlineMoneyMade\":0,\"onlineRunningTime\":2911.8099999995425,\"ramUsage\":1.75,\"server\":\"7.9.7.1\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2911.8099999995425,\"ramUsage\":1.8,\"server\":\"7.9.7.1\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"7.9.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.9.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"7.9.7.1\"}}],\"serversOnNetwork\":[\"66.1.0.2\",\"85.9.2.7\",\"3.3.7.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":42,\"hackDifficulty\":42,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":382941130.5,\"moneyMax\":1436029239.375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":490,\"serverGrowth\":51}},\"46.7.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-281024-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11314065115\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"46.7.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":126.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,11]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":141.6096,\"onlineMoneyMade\":0,\"onlineRunningTime\":2899.4099999995537,\"ramUsage\":1.75,\"server\":\"46.7.9.5\",\"threads\":11}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,53,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.3008,\"onlineMoneyMade\":0,\"onlineRunningTime\":2899.4099999995537,\"ramUsage\":1.75,\"server\":\"46.7.9.5\",\"threads\":53}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2899.4099999995537,\"ramUsage\":1.8,\"server\":\"46.7.9.5\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.7.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.7.9.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.7.9.5\"}}],\"serversOnNetwork\":[\"60.9.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":499239672.75,\"moneyMax\":1872148772.8125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":537,\"serverGrowth\":58}},\"96.8.7.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417530.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()))()a\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"96.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2853.009999999596,\"ramUsage\":1.75,\"server\":\"96.8.7.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2853.009999999596,\"ramUsage\":1.75,\"server\":\"96.8.7.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2853.009999999596,\"ramUsage\":1.8,\"server\":\"96.8.7.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"96.8.7.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"96.8.7.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"96.8.7.8\"}}],\"serversOnNetwork\":[\"89.2.3.3\",\"75.1.0.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":76,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":1022629426.875,\"moneyMax\":1022629426.875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":407,\"serverGrowth\":45}},\"50.9.7.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767319.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,31],[19,21],[2,6],[3,12],[20,24],[18,24],[12,22],[3,12],[3,12],[3,11],[20,25],[16,24],[1,7],[14,16],[6,9],[14,20],[21,30],[3,13],[4,9],[21,27]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"50.9.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2890.209999999562,\"ramUsage\":1.75,\"server\":\"50.9.7.5\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2890.209999999562,\"ramUsage\":1.75,\"server\":\"50.9.7.5\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2890.209999999562,\"ramUsage\":1.8,\"server\":\"50.9.7.5\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"50.9.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.9.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.9.7.5\"}}],\"serversOnNetwork\":[\"47.9.2.5\",\"64.3.6.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":53,\"hackDifficulty\":53,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":136864230.75,\"moneyMax\":513240865.3125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":430,\"serverGrowth\":35}},\"66.1.0.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"66.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"38.2.9.2\",\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":73,\"hackDifficulty\":73,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":626353122.75,\"moneyMax\":2348824210.3125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":753,\"serverGrowth\":75}},\"89.2.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"89.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2856.209999999593,\"ramUsage\":1.75,\"server\":\"89.2.3.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2856.209999999593,\"ramUsage\":1.75,\"server\":\"89.2.3.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2856.209999999593,\"ramUsage\":1.8,\"server\":\"89.2.3.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"89.2.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.2.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.2.3.3\"}}],\"serversOnNetwork\":[\"28.8.5.2\",\"96.8.7.8\",\"99.5.7.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":63,\"hackDifficulty\":63,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":210157057.5,\"moneyMax\":788088965.625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":467,\"serverGrowth\":55}},\"60.9.0.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"60.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"36.0.8.8\",\"46.7.9.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":62,\"hackDifficulty\":62,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":340913696.25,\"moneyMax\":1278426360.9375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":573,\"serverGrowth\":68}},\"51.7.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"51.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2862.2099999995876,\"ramUsage\":1.75,\"server\":\"51.7.1.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2862.2099999995876,\"ramUsage\":1.75,\"server\":\"51.7.1.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2862.2099999995876,\"ramUsage\":1.8,\"server\":\"51.7.1.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"51.7.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.7.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"51.7.1.2\"}}],\"serversOnNetwork\":[\"18.1.5.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":70,\"hackDifficulty\":70,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":325135407.75,\"moneyMax\":1219257779.0625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":438,\"serverGrowth\":52}},\"38.2.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"38.2.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2914.8099999995397,\"ramUsage\":1.75,\"server\":\"38.2.9.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2914.8099999995397,\"ramUsage\":1.75,\"server\":\"38.2.9.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2914.8099999995397,\"ramUsage\":1.8,\"server\":\"38.2.9.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"38.2.9.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"38.2.9.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"38.2.9.2\"}}],\"serversOnNetwork\":[\"34.1.7.1\",\"66.1.0.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":39,\"hackDifficulty\":13.732,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":442667092.5,\"moneyMax\":442667092.5,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":302,\"serverGrowth\":53}},\"64.0.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"64.0.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"73.7.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":58,\"hackDifficulty\":22.310000000000016,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":674306609.0625,\"moneyMax\":674306609.0625,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":364,\"serverGrowth\":65}},\"36.0.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"36.0.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Netlink Technologies\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2902.609999999551,\"ramUsage\":1.75,\"server\":\"36.0.8.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2902.609999999551,\"ramUsage\":1.75,\"server\":\"36.0.8.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2902.609999999551,\"ramUsage\":1.8,\"server\":\"36.0.8.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"36.0.8.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.0.8.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"36.0.8.8\"}}],\"serversOnNetwork\":[\"23.4.2.8\",\"60.9.0.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":74,\"hackDifficulty\":26.14400000000001,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":752945440,\"moneyMax\":773437500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":385,\"serverGrowth\":64}},\"47.9.2.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765860.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"47.9.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"73.7.3.3\",\"50.9.7.5\",\"46.4.2.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":51,\"hackDifficulty\":17.228,\"manuallyHacked\":false,\"minDifficulty\":17,\"moneyAvailable\":211403430.5625,\"moneyMax\":215270766.5625,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":276,\"serverGrowth\":47}},\"79.9.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695974.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"79.9.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Food N Stuff Supermarket\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2927.2099999995285,\"ramUsage\":1.75,\"server\":\"79.9.5.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2927.2099999995285,\"ramUsage\":1.75,\"server\":\"79.9.5.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2927.2099999995285,\"ramUsage\":1.8,\"server\":\"79.9.5.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"79.9.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.9.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"79.9.5.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"56.6.1.2\",\"90.1.1.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":9.96,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":1510357.078642345,\"moneyMax\":5625000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"13.1.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"13.1.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2881.0099999995705,\"ramUsage\":1.75,\"server\":\"13.1.5.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2881.0099999995705,\"ramUsage\":1.75,\"server\":\"13.1.5.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2881.0099999995705,\"ramUsage\":1.8,\"server\":\"13.1.5.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"13.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"13.1.5.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"13.1.5.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":10,\"hackDifficulty\":9.556000000000001,\"manuallyHacked\":false,\"minDifficulty\":3,\"moneyAvailable\":1748864.0022987544,\"moneyMax\":6468750,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"10.6.6.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"10.6.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2877.8099999995734,\"ramUsage\":1.75,\"server\":\"10.6.6.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2877.8099999995734,\"ramUsage\":1.75,\"server\":\"10.6.6.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2877.8099999995734,\"ramUsage\":1.8,\"server\":\"10.6.6.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"10.6.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.6.6.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":17.265999999999735,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":5149789.2792117465,\"moneyMax\":7031250,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"47.9.9.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57272.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,5],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"47.9.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2868.409999999582,\"ramUsage\":1.75,\"server\":\"47.9.9.0\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2868.409999999582,\"ramUsage\":1.75,\"server\":\"47.9.9.0\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2868.409999999582,\"ramUsage\":1.8,\"server\":\"47.9.9.0\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"47.9.9.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.9.9.0\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"47.9.9.0\"}}],\"serversOnNetwork\":[\"2.0.4.6\",\"15.2.1.4\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":5625000,\"moneyMax\":21093750,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"56.6.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-858062.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12017535157\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"56.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2924.209999999531,\"ramUsage\":1.75,\"server\":\"56.6.1.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2924.209999999531,\"ramUsage\":1.75,\"server\":\"56.6.1.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2924.209999999531,\"ramUsage\":1.8,\"server\":\"56.6.1.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"56.6.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"56.6.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"56.6.1.2\"}}],\"serversOnNetwork\":[\"79.9.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":19.551999999999992,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":2098343.5829269304,\"moneyMax\":7734375,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"34.1.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691004.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,4,0,1,4,5,9,0,8,3,2,3,9,0,4,10,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-409650.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[4,7],[6,8,5],[8,1,9,1]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133213-Netburners.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()aa((()\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"34.1.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2918.009999999537,\"ramUsage\":1.75,\"server\":\"34.1.7.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2918.009999999537,\"ramUsage\":1.75,\"server\":\"34.1.7.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2918.009999999537,\"ramUsage\":1.8,\"server\":\"34.1.7.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"34.1.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.1.7.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"34.1.7.1\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"38.2.9.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":25,\"hackDifficulty\":25,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":3750000,\"moneyMax\":14062500,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"23.4.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"23.4.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,6]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2905.609999999548,\"ramUsage\":1.75,\"server\":\"23.4.2.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,26,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":334.7136,\"onlineMoneyMade\":0,\"onlineRunningTime\":2905.609999999548,\"ramUsage\":1.75,\"server\":\"23.4.2.8\",\"threads\":26}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2905.609999999548,\"ramUsage\":1.8,\"server\":\"23.4.2.8\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"23.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"23.4.2.8\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"36.0.8.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":33750000,\"moneyMax\":126562500,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"17.1.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691739.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[173,84,70,159,53,128,139,4,140,110,10,58,92,72,65,69,124,5,67,54,163,61,22,61,46,69,131,18,94,192,69,22,108,27,71,18,161,175,177,20,67]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"17.1.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2874.809999999576,\"ramUsage\":1.75,\"server\":\"17.1.0.7\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2874.809999999576,\"ramUsage\":1.75,\"server\":\"17.1.0.7\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2874.809999999576,\"ramUsage\":1.8,\"server\":\"17.1.0.7\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"17.1.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.1.0.7\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"17.1.0.7\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":14.712,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":2335390.2983274986,\"moneyMax\":8437500,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"2.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327431-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":97,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"2.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2871.809999999579,\"ramUsage\":1.75,\"server\":\"2.0.4.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2871.809999999579,\"ramUsage\":1.75,\"server\":\"2.0.4.6\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2871.809999999579,\"ramUsage\":1.8,\"server\":\"2.0.4.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"2.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"2.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"2.0.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"47.9.9.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":5.007999999999999,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":11193693,\"moneyMax\":11250000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"15.2.1.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"15.2.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2865.4099999995847,\"ramUsage\":1.75,\"server\":\"15.2.1.4\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2865.4099999995847,\"ramUsage\":1.75,\"server\":\"15.2.1.4\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2865.4099999995847,\"ramUsage\":1.8,\"server\":\"15.2.1.4\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"15.2.1.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.1.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"15.2.1.4\"}}],\"serversOnNetwork\":[\"47.9.9.0\",\"18.1.5.9\",\"28.8.5.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":20,\"hackDifficulty\":20,\"manuallyHacked\":false,\"minDifficulty\":7,\"moneyAvailable\":18000000,\"moneyMax\":67500000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"61.2.5.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"61.2.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2798.209999999646,\"ramUsage\":1.75,\"server\":\"61.2.5.6\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2798.209999999646,\"ramUsage\":1.75,\"server\":\"61.2.5.6\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2798.209999999646,\"ramUsage\":1.8,\"server\":\"61.2.5.6\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"61.2.5.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"61.2.5.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"61.2.5.6\"}}],\"serversOnNetwork\":[\"1.5.3.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":7500000,\"moneyMax\":28125000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"73.7.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208573.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[180,32,75,74,132,80,15,30,113,151,25,116,80,145,61,140,79,48,143,4,154,131,129,162,165,122,125,22,81,99,22,187,190,173,177,151,24,102,164,154,103,176,11,160,7,172,113],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"73.7.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2896.4099999995565,\"ramUsage\":1.75,\"server\":\"73.7.3.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2896.4099999995565,\"ramUsage\":1.75,\"server\":\"73.7.3.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2896.4099999995565,\"ramUsage\":1.8,\"server\":\"73.7.3.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"73.7.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.7.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.7.3.3\"}}],\"serversOnNetwork\":[\"90.1.1.6\",\"64.0.8.6\",\"47.9.2.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":26,\"hackDifficulty\":9.112,\"manuallyHacked\":false,\"minDifficulty\":9,\"moneyAvailable\":177106471.875,\"moneyMax\":177106471.875,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":202,\"serverGrowth\":33}},\"18.1.5.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"18.1.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"15.2.1.4\",\"51.7.1.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":41,\"hackDifficulty\":41,\"manuallyHacked\":false,\"minDifficulty\":14,\"moneyAvailable\":42876000,\"moneyMax\":160785000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":265,\"serverGrowth\":28}},\"1.5.3.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"1.5.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2801.209999999643,\"ramUsage\":1.75,\"server\":\"1.5.3.1\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2801.209999999643,\"ramUsage\":1.75,\"server\":\"1.5.3.1\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2801.209999999643,\"ramUsage\":1.8,\"server\":\"1.5.3.1\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"1.5.3.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.5.3.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"1.5.3.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\",\"61.2.5.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":30,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":15000000,\"moneyMax\":56250000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"99.5.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-651822.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"99.5.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2810.4099999996347,\"ramUsage\":1.75,\"server\":\"99.5.7.3\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2810.4099999996347,\"ramUsage\":1.75,\"server\":\"99.5.7.3\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2810.4099999996347,\"ramUsage\":1.8,\"server\":\"99.5.7.3\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"99.5.7.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"99.5.7.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"99.5.7.3\"}}],\"serversOnNetwork\":[\"89.2.3.3\",\"46.2.8.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":46,\"hackDifficulty\":46,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":187500000,\"moneyMax\":703125000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":492,\"serverGrowth\":45}},\"31.7.9.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604688.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[1,16,40,8,34,45,27,10,19],[46,35,42,9,47,10,32,47,43],[9,43,1,5,29,2,15,1,21],[8,17,20,30,16,29,40,48,15],[17,37,26,46,3,46,16,1,33],[13,34,15,7,41,28,11,48,44],[15,23,6,23,37,42,16,17,35],[15,39,15,30,45,17,29,48,46],[37,47,33,23,32,3,6,38,18]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"31.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"44.5.7.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":55,\"hackDifficulty\":55,\"manuallyHacked\":false,\"minDifficulty\":18,\"moneyAvailable\":675000000,\"moneyMax\":2531250000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":969,\"serverGrowth\":52}},\"3.3.7.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"3.3.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"7.9.7.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":44,\"hackDifficulty\":44,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":337500000,\"moneyMax\":1265625000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":791,\"serverGrowth\":44}},\"66.2.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"66.2.4.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":254.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,22]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":283.2192,\"onlineMoneyMade\":0,\"onlineRunningTime\":2828.609999999618,\"ramUsage\":1.75,\"server\":\"66.2.4.5\",\"threads\":22}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,108,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1390.3488,\"onlineMoneyMade\":0,\"onlineRunningTime\":2828.609999999618,\"ramUsage\":1.75,\"server\":\"66.2.4.5\",\"threads\":108}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2828.609999999618,\"ramUsage\":1.8,\"server\":\"66.2.4.5\",\"threads\":15}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"66.2.4.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.2.4.5\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"66.2.4.5\"}}],\"serversOnNetwork\":[\"50.4.2.7\",\"2.4.0.7\",\"59.0.6.3\",\"20.3.3.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"46.4.2.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"46.4.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2884.0099999995678,\"ramUsage\":1.75,\"server\":\"46.4.2.8\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2884.0099999995678,\"ramUsage\":1.75,\"server\":\"46.4.2.8\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2884.0099999995678,\"ramUsage\":1.8,\"server\":\"46.4.2.8\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.4.2.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.4.2.8\"}}],\"serversOnNetwork\":[\"47.9.2.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"28.8.5.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-595750.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,-2,-7,8,7,-3,-7,6,-4,5,-6,-7,8,3,-8,7,3,4,-10,-6,-6,-10,-8,-8,0,0,-8,-5,3,6,-3,-1,0,2,6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"28.8.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,3]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.6208,\"onlineMoneyMade\":0,\"onlineRunningTime\":2859.40999999959,\"ramUsage\":1.75,\"server\":\"28.8.5.2\",\"threads\":3}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,13,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":167.3568,\"onlineMoneyMade\":0,\"onlineRunningTime\":2859.40999999959,\"ramUsage\":1.75,\"server\":\"28.8.5.2\",\"threads\":13}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2859.40999999959,\"ramUsage\":1.8,\"server\":\"28.8.5.2\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"28.8.5.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.8.5.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"28.8.5.2\"}}],\"serversOnNetwork\":[\"15.2.1.4\",\"89.2.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\"85.5.6.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373366.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"904852476\",-49],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"85.5.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,2]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2825.609999999621,\"ramUsage\":1.75,\"server\":\"85.5.6.2\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,6,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77.2416,\"onlineMoneyMade\":0,\"onlineRunningTime\":2825.609999999621,\"ramUsage\":1.75,\"server\":\"85.5.6.2\",\"threads\":6}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2825.609999999621,\"ramUsage\":1.8,\"server\":\"85.5.6.2\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"85.5.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"85.5.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"85.5.6.2\"}}],\"serversOnNetwork\":[\"2.4.0.7\",\"80.5.0.2\",\"25.2.0.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"90.1.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.1.1.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,1]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.8736,\"onlineMoneyMade\":0,\"onlineRunningTime\":2921.009999999534,\"ramUsage\":1.75,\"server\":\"90.1.1.6\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,2,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25.7472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2921.009999999534,\"ramUsage\":1.75,\"server\":\"90.1.1.6\",\"threads\":2}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2921.009999999534,\"ramUsage\":1.8,\"server\":\"90.1.1.6\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"90.1.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.1.1.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"90.1.1.6\"}}],\"serversOnNetwork\":[\"79.9.5.7\",\"34.1.7.1\",\"23.4.2.8\",\"73.7.3.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":60,\"serverGrowth\":0}},\"69.6.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"69.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"14.3.1.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"64.9.0.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"64.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"94.9.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"94.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.6.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB\",\"httpPortOpen\":false,\"ip\":\"46.6.1.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2795.2099999996485,\"ramUsage\":1.75,\"server\":\"46.6.1.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2795.2099999996485,\"ramUsage\":1.75,\"server\":\"46.6.1.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2795.2099999996485,\"ramUsage\":1.8,\"server\":\"46.6.1.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.6.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.6.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.6.1.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"24.4.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-0\",\"httpPortOpen\":false,\"ip\":\"24.4.3.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2792.0099999996514,\"ramUsage\":1.75,\"server\":\"24.4.3.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2792.0099999996514,\"ramUsage\":1.75,\"server\":\"24.4.3.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2792.0099999996514,\"ramUsage\":1.8,\"server\":\"24.4.3.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"24.4.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"24.4.3.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"24.4.3.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"49.5.4.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-1\",\"httpPortOpen\":false,\"ip\":\"49.5.4.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2789.009999999654,\"ramUsage\":1.75,\"server\":\"49.5.4.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2789.009999999654,\"ramUsage\":1.75,\"server\":\"49.5.4.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2789.009999999654,\"ramUsage\":1.8,\"server\":\"49.5.4.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"49.5.4.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.5.4.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.5.4.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"73.6.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-2\",\"httpPortOpen\":false,\"ip\":\"73.6.8.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2785.809999999657,\"ramUsage\":1.75,\"server\":\"73.6.8.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2785.809999999657,\"ramUsage\":1.75,\"server\":\"73.6.8.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2785.809999999657,\"ramUsage\":1.8,\"server\":\"73.6.8.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"73.6.8.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.6.8.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"73.6.8.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"95.1.3.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-3\",\"httpPortOpen\":false,\"ip\":\"95.1.3.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2782.80999999966,\"ramUsage\":1.75,\"server\":\"95.1.3.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2782.80999999966,\"ramUsage\":1.75,\"server\":\"95.1.3.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2782.80999999966,\"ramUsage\":1.8,\"server\":\"95.1.3.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"95.1.3.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.1.3.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"95.1.3.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"12.3.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-4\",\"httpPortOpen\":false,\"ip\":\"12.3.4.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.6099999996627,\"ramUsage\":1.75,\"server\":\"12.3.4.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.6099999996627,\"ramUsage\":1.75,\"server\":\"12.3.4.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2779.6099999996627,\"ramUsage\":1.8,\"server\":\"12.3.4.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"12.3.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.3.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"12.3.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"75.8.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-5\",\"httpPortOpen\":false,\"ip\":\"75.8.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2776.6099999996654,\"ramUsage\":1.75,\"server\":\"75.8.1.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2776.6099999996654,\"ramUsage\":1.75,\"server\":\"75.8.1.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2776.6099999996654,\"ramUsage\":1.8,\"server\":\"75.8.1.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"75.8.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.8.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"75.8.1.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"39.8.6.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-6\",\"httpPortOpen\":false,\"ip\":\"39.8.6.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2773.4099999996683,\"ramUsage\":1.75,\"server\":\"39.8.6.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2773.4099999996683,\"ramUsage\":1.75,\"server\":\"39.8.6.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2773.4099999996683,\"ramUsage\":1.8,\"server\":\"39.8.6.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"39.8.6.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"39.8.6.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"39.8.6.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"49.2.3.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-7\",\"httpPortOpen\":false,\"ip\":\"49.2.3.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2770.2099999996713,\"ramUsage\":1.75,\"server\":\"49.2.3.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2770.2099999996713,\"ramUsage\":1.75,\"server\":\"49.2.3.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2770.2099999996713,\"ramUsage\":1.8,\"server\":\"49.2.3.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"49.2.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.2.3.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"49.2.3.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"50.7.7.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-8\",\"httpPortOpen\":false,\"ip\":\"50.7.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2767.209999999674,\"ramUsage\":1.75,\"server\":\"50.7.7.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2767.209999999674,\"ramUsage\":1.75,\"server\":\"50.7.7.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2767.209999999674,\"ramUsage\":1.8,\"server\":\"50.7.7.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"50.7.7.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.7.7.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"50.7.7.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"89.7.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-9\",\"httpPortOpen\":false,\"ip\":\"89.7.8.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2764.009999999677,\"ramUsage\":1.75,\"server\":\"89.7.8.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2764.009999999677,\"ramUsage\":1.75,\"server\":\"89.7.8.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2764.009999999677,\"ramUsage\":1.8,\"server\":\"89.7.8.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"89.7.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.7.8.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"89.7.8.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"64.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-10\",\"httpPortOpen\":false,\"ip\":\"64.3.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2761.0099999996796,\"ramUsage\":1.75,\"server\":\"64.3.1.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2761.0099999996796,\"ramUsage\":1.75,\"server\":\"64.3.1.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2761.0099999996796,\"ramUsage\":1.8,\"server\":\"64.3.1.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"64.3.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.1.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"64.3.1.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.9.0.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-11\",\"httpPortOpen\":false,\"ip\":\"20.9.0.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2757.8099999996825,\"ramUsage\":1.75,\"server\":\"20.9.0.4\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2757.8099999996825,\"ramUsage\":1.75,\"server\":\"20.9.0.4\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2757.8099999996825,\"ramUsage\":1.8,\"server\":\"20.9.0.4\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.9.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.0.4\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.9.0.4\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"19.9.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-12\",\"httpPortOpen\":false,\"ip\":\"19.9.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2754.8099999996853,\"ramUsage\":1.75,\"server\":\"19.9.2.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2754.8099999996853,\"ramUsage\":1.75,\"server\":\"19.9.2.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2754.8099999996853,\"ramUsage\":1.8,\"server\":\"19.9.2.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"19.9.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.9.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"19.9.2.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"42.3.0.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-13\",\"httpPortOpen\":false,\"ip\":\"42.3.0.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2751.809999999688,\"ramUsage\":1.75,\"server\":\"42.3.0.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2751.809999999688,\"ramUsage\":1.75,\"server\":\"42.3.0.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2751.809999999688,\"ramUsage\":1.8,\"server\":\"42.3.0.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"42.3.0.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.3.0.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"42.3.0.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.3.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-14\",\"httpPortOpen\":false,\"ip\":\"20.3.1.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2748.609999999691,\"ramUsage\":1.75,\"server\":\"20.3.1.8\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2748.609999999691,\"ramUsage\":1.75,\"server\":\"20.3.1.8\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2748.609999999691,\"ramUsage\":1.8,\"server\":\"20.3.1.8\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.3.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.3.1.8\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.3.1.8\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"82.3.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-15\",\"httpPortOpen\":false,\"ip\":\"82.3.4.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2745.409999999694,\"ramUsage\":1.75,\"server\":\"82.3.4.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2745.409999999694,\"ramUsage\":1.75,\"server\":\"82.3.4.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2745.409999999694,\"ramUsage\":1.8,\"server\":\"82.3.4.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"82.3.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"82.3.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"82.3.4.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"46.3.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-16\",\"httpPortOpen\":false,\"ip\":\"46.3.6.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2742.4099999996965,\"ramUsage\":1.75,\"server\":\"46.3.6.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2742.4099999996965,\"ramUsage\":1.75,\"server\":\"46.3.6.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2742.4099999996965,\"ramUsage\":1.8,\"server\":\"46.3.6.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"46.3.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.3.6.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"46.3.6.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"10.8.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-17\",\"httpPortOpen\":false,\"ip\":\"10.8.9.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2739.4099999996993,\"ramUsage\":1.75,\"server\":\"10.8.9.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2739.4099999996993,\"ramUsage\":1.75,\"server\":\"10.8.9.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2739.4099999996993,\"ramUsage\":1.8,\"server\":\"10.8.9.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"10.8.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.8.9.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"10.8.9.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"53.7.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-18\",\"httpPortOpen\":false,\"ip\":\"53.7.4.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2736.209999999702,\"ramUsage\":1.75,\"server\":\"53.7.4.1\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2736.209999999702,\"ramUsage\":1.75,\"server\":\"53.7.4.1\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2736.209999999702,\"ramUsage\":1.8,\"server\":\"53.7.4.1\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"53.7.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.7.4.1\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"53.7.4.1\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.0.4.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-19\",\"httpPortOpen\":false,\"ip\":\"60.0.4.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2733.209999999705,\"ramUsage\":1.75,\"server\":\"60.0.4.6\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2733.209999999705,\"ramUsage\":1.75,\"server\":\"60.0.4.6\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2733.209999999705,\"ramUsage\":1.8,\"server\":\"60.0.4.6\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"60.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.0.4.6\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"60.0.4.6\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"70.8.5.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-20\",\"httpPortOpen\":false,\"ip\":\"70.8.5.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2730.009999999708,\"ramUsage\":1.75,\"server\":\"70.8.5.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2730.009999999708,\"ramUsage\":1.75,\"server\":\"70.8.5.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2730.009999999708,\"ramUsage\":1.8,\"server\":\"70.8.5.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"70.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.8.5.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"70.8.5.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"20.0.2.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-21\",\"httpPortOpen\":false,\"ip\":\"20.0.2.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2726.8099999997107,\"ramUsage\":1.75,\"server\":\"20.0.2.9\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2726.8099999997107,\"ramUsage\":1.75,\"server\":\"20.0.2.9\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2726.8099999997107,\"ramUsage\":1.8,\"server\":\"20.0.2.9\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"20.0.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.0.2.9\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"20.0.2.9\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"3.9.3.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-22\",\"httpPortOpen\":false,\"ip\":\"3.9.3.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2723.8099999997135,\"ramUsage\":1.75,\"server\":\"3.9.3.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2723.8099999997135,\"ramUsage\":1.75,\"server\":\"3.9.3.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2723.8099999997135,\"ramUsage\":1.8,\"server\":\"3.9.3.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"3.9.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"3.9.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"3.9.3.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"97.4.1.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2048GB-23\",\"httpPortOpen\":false,\"ip\":\"97.4.1.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":2047.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,0,176]},\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2265.7536,\"onlineMoneyMade\":0,\"onlineRunningTime\":2720.6099999997164,\"ramUsage\":1.75,\"server\":\"97.4.1.3\",\"threads\":176}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"96.8.7.8\":[0,0,877,0]},\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11290.1472,\"onlineMoneyMade\":0,\"onlineRunningTime\":2720.6099999997164,\"ramUsage\":1.75,\"server\":\"97.4.1.3\",\"threads\":877}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\",1022629426.875],\"dataMap\":{},\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2720.6099999997164,\"ramUsage\":1.8,\"server\":\"97.4.1.3\",\"threads\":114}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\nvar targetMaxMoney = args[1];\\n\\nwhile(true) {\\n    targetCurrentMoney = getServerMoneyAvailable(target);\\n    targetMoneyPercent = targetCurrentMoney/targetMaxMoney;\\n    if(targetMoneyPercent > 0.50)\\n    {\\n        hack(target);\\n    }\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/hack_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.8,\"server\":\"97.4.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    grow(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/grow_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.4.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0];\\n\\nwhile(true) {\\n    weaken(target);\\n    sleep(100);\\n}\",\"filename\":\"/master/hacking/helpers/weaken_target_loop-ns1.script\",\"module\":\"\",\"ramUsage\":1.75,\"server\":\"97.4.1.3\"}}],\"serversOnNetwork\":[\"60.8.2.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":112945.73456410228,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":2874.5109333333376,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":140193.10539487164,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"14.7.5.3\",\"BitRunners Server\":\"66.2.4.5\",\"The Black Hand Server\":\"46.4.2.8\",\"NiteSec Server\":\"28.8.5.2\",\"The Dark Army Server\":\"85.5.6.2\",\"CyberSec Server\":\"90.1.1.6\",\"Daedalus Server\":\"69.6.8.2\",\"w0r1d_d43m0n\":\"64.9.0.8\",\"Darkweb Server\":\"94.9.9.2\"}}","AliasesSave":"{\"dir\":\"ls\",\"nuke\":\"run NUKE.exe\",\"ssh\":\"run BruteSSH.exe\",\"sql\":\"run SQLInject.exe\",\"ftp\":\"run FTPCrack.exe\",\"http\":\"run HTTPWorm.exe\",\"smtp\":\"run relaySMTP.exe\",\"pull\":\"run pull/pull-ns2.js\",\"wallet\":\"nano master/character/wallet-ns2.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableHotkeys\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressHospitalizationPopup\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.47.0\"","AllGangsSave":""}}